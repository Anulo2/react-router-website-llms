# https://reactrouter.com/ llms-full.txt

![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

# ![React Router logo, six dots in an upward triangle (one on top, two in the middle, three on the bottom) with a path of three highlighted and connected from top to bottom, next to the text React Router](https://reactrouter.com/splash/hero-3d-logo.webp)

A user‑obsessed, standards‑focused, multi‑strategy router you can deploy anywhere.

[Docs](https://reactrouter.com/home) [GitHub](https://github.com/remix-run/react-router) [Discord](https://rmx.as/discord)

![](https://reactrouter.com/splash/v7-badge-1.svg)![](https://reactrouter.com/splash/v7-badge-2.svg)

## What to expect from this version:

Non-breakingUpgrading from v6 to v7 is a non-breaking upgrade. Keep using React Router the same way you already do.

Bridge to React 19All new bundling, server rendering, pre-rendering, and streaming features allow you bridge the gap from React 18 to 19 incrementally.

Type SafetyNew typegen provides first class types for route params, loader data, actions, and more.

## Choose Your Adventure:

[**I'm new!** \\
\\
Learn how to get the most out of React Router\\
\\
Start Here](https://reactrouter.com/home) [**I'm on v6** \\
\\
Upgrade to v7 in just a few steps\\
\\
Upgrade Now](https://reactrouter.com/upgrading/v6) [**I want to adopt framework features** \\
\\
Learn how to adopt the new framework features in your existing React Router app\\
\\
Adopt Framework Features](https://reactrouter.com/upgrading/component-routes) [**I'm stuck** \\
\\
Join GitHub discussions for help\\
\\
Get Help](https://rmx.as/discord)

2,238,208,561Downloads on npm

1,147Contributors on GitHub

54,199Stars on GitHub

3,597,612Dependents on GitHub

![](https://reactrouter.com/splash/shopify-badge.svg)

© 2024 Shopify, Inc.![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

CHANGELOG.md

On this page

- [v7.2.0](https://reactrouter.com/changelog#v720)
- [What's Changed](https://reactrouter.com/changelog#whats-changed)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes)
- [Unstable Changes](https://reactrouter.com/changelog#unstable-changes)
- [Changes by Package](https://reactrouter.com/changelog#changes-by-package)
- [v7.1.5](https://reactrouter.com/changelog#v715)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-1)
- [v7.1.4](https://reactrouter.com/changelog#v714)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-2)
- [v7.1.3](https://reactrouter.com/changelog#v713)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-3)
- [v7.1.2](https://reactrouter.com/changelog#v712)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-4)
- [v7.1.1](https://reactrouter.com/changelog#v711)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-5)
- [v7.1.0](https://reactrouter.com/changelog#v710)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-1)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-6)
- [Changes by Package](https://reactrouter.com/changelog#changes-by-package-1)
- [v7.0.2](https://reactrouter.com/changelog#v702)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-7)
- [v7.0.1](https://reactrouter.com/changelog#v701)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-8)
- [v7.0.0](https://reactrouter.com/changelog#v700)
- [Breaking Changes](https://reactrouter.com/changelog#breaking-changes)
- [Other Notable Changes](https://reactrouter.com/changelog#other-notable-changes)
- [Major Changes ( `react-router`)](https://reactrouter.com/changelog#major-changes-react-router)
- [Major Changes ( `@react-router/*`)](https://reactrouter.com/changelog#major-changes-react-router-1)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-2)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-9)
- [Changes by Package](https://reactrouter.com/changelog#changes-by-package-2)
- [v6.30.0](https://reactrouter.com/changelog#v6300)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-3)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-10)
- [v6.29.0](https://reactrouter.com/changelog#v6290)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-4)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-11)
- [v6.28.2](https://reactrouter.com/changelog#v6282)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-12)
- [v6.28.1](https://reactrouter.com/changelog#v6281)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-13)
- [v6.28.0](https://reactrouter.com/changelog#v6280)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-1)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-5)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-14)
- [v6.27.0](https://reactrouter.com/changelog#v6270)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-2)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-6)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-15)
- [v6.26.2](https://reactrouter.com/changelog#v6262)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-16)
- [v6.26.1](https://reactrouter.com/changelog#v6261)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-17)
- [v6.26.0](https://reactrouter.com/changelog#v6260)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-7)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-18)
- [v6.25.1](https://reactrouter.com/changelog#v6251)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-19)
- [v6.25.0](https://reactrouter.com/changelog#v6250)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-3)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-8)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-20)
- [v6.24.1](https://reactrouter.com/changelog#v6241)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-21)
- [v6.24.0](https://reactrouter.com/changelog#v6240)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-4)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-9)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-22)
- [v6.23.1](https://reactrouter.com/changelog#v6231)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-23)
- [v6.23.0](https://reactrouter.com/changelog#v6230)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-5)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-10)
- [v6.22.3](https://reactrouter.com/changelog#v6223)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-24)
- [v6.22.2](https://reactrouter.com/changelog#v6222)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-25)
- [v6.22.1](https://reactrouter.com/changelog#v6221)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-26)
- [v6.22.0](https://reactrouter.com/changelog#v6220)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-6)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-11)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-27)
- [v6.21.3](https://reactrouter.com/changelog#v6213)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-28)
- [v6.21.2](https://reactrouter.com/changelog#v6212)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-29)
- [v6.21.1](https://reactrouter.com/changelog#v6211)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-30)
- [v6.21.0](https://reactrouter.com/changelog#v6210)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-7)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-12)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-31)
- [v6.20.1](https://reactrouter.com/changelog#v6201)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-32)
- [v6.20.0](https://reactrouter.com/changelog#v6200)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-13)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-33)
- [v6.19.0](https://reactrouter.com/changelog#v6190)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-8)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-14)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-34)
- [v6.18.0](https://reactrouter.com/changelog#v6180)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-9)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-15)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-35)
- [v6.17.0](https://reactrouter.com/changelog#v6170)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-10)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-16)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-36)
- [v6.16.0](https://reactrouter.com/changelog#v6160)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-17)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-37)
- [v6.15.0](https://reactrouter.com/changelog#v6150)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-18)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-38)
- [v6.14.2](https://reactrouter.com/changelog#v6142)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-39)
- [v6.14.1](https://reactrouter.com/changelog#v6141)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-40)
- [v6.14.0](https://reactrouter.com/changelog#v6140)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-11)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-19)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-41)
- [v6.13.0](https://reactrouter.com/changelog#v6130)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-12)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-20)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-42)
- [v6.12.1](https://reactrouter.com/changelog#v6121)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-43)
- [v6.12.0](https://reactrouter.com/changelog#v6120)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-13)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-21)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-44)
- [v6.11.2](https://reactrouter.com/changelog#v6112)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-45)
- [v6.11.1](https://reactrouter.com/changelog#v6111)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-46)
- [v6.11.0](https://reactrouter.com/changelog#v6110)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-22)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-47)
- [v6.10.0](https://reactrouter.com/changelog#v6100)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-14)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-23)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-48)
- [v6.9.0](https://reactrouter.com/changelog#v690)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-15)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-24)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-49)
- [v6.8.2](https://reactrouter.com/changelog#v682)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-50)
- [v6.8.1](https://reactrouter.com/changelog#v681)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-51)
- [v6.8.0](https://reactrouter.com/changelog#v680)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-25)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-52)
- [v6.7.0](https://reactrouter.com/changelog#v670)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-26)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-53)
- [v6.6.2](https://reactrouter.com/changelog#v662)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-54)
- [v6.6.1](https://reactrouter.com/changelog#v661)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-55)
- [v6.6.0](https://reactrouter.com/changelog#v660)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-16)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-27)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-56)
- [v6.5.0](https://reactrouter.com/changelog#v650)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-17)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-28)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-57)
- [v6.4.5](https://reactrouter.com/changelog#v645)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-58)
- [v6.4.4](https://reactrouter.com/changelog#v644)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-59)
- [v6.4.3](https://reactrouter.com/changelog#v643)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-60)
- [v6.4.2](https://reactrouter.com/changelog#v642)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-61)
- [v6.4.1](https://reactrouter.com/changelog#v641)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-62)
- [v6.4.0](https://reactrouter.com/changelog#v640)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-18)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-63)
- [v6.3.0](https://reactrouter.com/changelog#v630)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-29)
- [v6.2.2](https://reactrouter.com/changelog#v622)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-64)
- [v6.2.1](https://reactrouter.com/changelog#v621)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-65)
- [v6.2.0](https://reactrouter.com/changelog#v620)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-30)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-66)
- [v6.1.1](https://reactrouter.com/changelog#v611)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-67)
- [v6.1.0](https://reactrouter.com/changelog#v610)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-31)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-68)
- [v6.0.2](https://reactrouter.com/changelog#v602)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-69)
- [v6.0.1](https://reactrouter.com/changelog#v601)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-70)
- [v6.0.0](https://reactrouter.com/changelog#v600)

- [v7.2.0](https://reactrouter.com/changelog#v720)
- [What's Changed](https://reactrouter.com/changelog#whats-changed)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes)
- [Unstable Changes](https://reactrouter.com/changelog#unstable-changes)
- [Changes by Package](https://reactrouter.com/changelog#changes-by-package)
- [v7.1.5](https://reactrouter.com/changelog#v715)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-1)
- [v7.1.4](https://reactrouter.com/changelog#v714)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-2)
- [v7.1.3](https://reactrouter.com/changelog#v713)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-3)
- [v7.1.2](https://reactrouter.com/changelog#v712)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-4)
- [v7.1.1](https://reactrouter.com/changelog#v711)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-5)
- [v7.1.0](https://reactrouter.com/changelog#v710)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-1)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-6)
- [Changes by Package](https://reactrouter.com/changelog#changes-by-package-1)
- [v7.0.2](https://reactrouter.com/changelog#v702)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-7)
- [v7.0.1](https://reactrouter.com/changelog#v701)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-8)
- [v7.0.0](https://reactrouter.com/changelog#v700)
- [Breaking Changes](https://reactrouter.com/changelog#breaking-changes)
- [Other Notable Changes](https://reactrouter.com/changelog#other-notable-changes)
- [Major Changes ( `react-router`)](https://reactrouter.com/changelog#major-changes-react-router)
- [Major Changes ( `@react-router/*`)](https://reactrouter.com/changelog#major-changes-react-router-1)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-2)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-9)
- [Changes by Package](https://reactrouter.com/changelog#changes-by-package-2)
- [v6.30.0](https://reactrouter.com/changelog#v6300)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-3)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-10)
- [v6.29.0](https://reactrouter.com/changelog#v6290)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-4)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-11)
- [v6.28.2](https://reactrouter.com/changelog#v6282)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-12)
- [v6.28.1](https://reactrouter.com/changelog#v6281)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-13)
- [v6.28.0](https://reactrouter.com/changelog#v6280)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-1)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-5)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-14)
- [v6.27.0](https://reactrouter.com/changelog#v6270)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-2)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-6)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-15)
- [v6.26.2](https://reactrouter.com/changelog#v6262)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-16)
- [v6.26.1](https://reactrouter.com/changelog#v6261)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-17)
- [v6.26.0](https://reactrouter.com/changelog#v6260)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-7)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-18)
- [v6.25.1](https://reactrouter.com/changelog#v6251)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-19)
- [v6.25.0](https://reactrouter.com/changelog#v6250)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-3)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-8)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-20)
- [v6.24.1](https://reactrouter.com/changelog#v6241)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-21)
- [v6.24.0](https://reactrouter.com/changelog#v6240)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-4)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-9)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-22)
- [v6.23.1](https://reactrouter.com/changelog#v6231)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-23)
- [v6.23.0](https://reactrouter.com/changelog#v6230)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-5)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-10)
- [v6.22.3](https://reactrouter.com/changelog#v6223)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-24)
- [v6.22.2](https://reactrouter.com/changelog#v6222)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-25)
- [v6.22.1](https://reactrouter.com/changelog#v6221)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-26)
- [v6.22.0](https://reactrouter.com/changelog#v6220)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-6)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-11)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-27)
- [v6.21.3](https://reactrouter.com/changelog#v6213)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-28)
- [v6.21.2](https://reactrouter.com/changelog#v6212)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-29)
- [v6.21.1](https://reactrouter.com/changelog#v6211)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-30)
- [v6.21.0](https://reactrouter.com/changelog#v6210)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-7)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-12)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-31)
- [v6.20.1](https://reactrouter.com/changelog#v6201)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-32)
- [v6.20.0](https://reactrouter.com/changelog#v6200)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-13)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-33)
- [v6.19.0](https://reactrouter.com/changelog#v6190)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-8)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-14)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-34)
- [v6.18.0](https://reactrouter.com/changelog#v6180)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-9)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-15)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-35)
- [v6.17.0](https://reactrouter.com/changelog#v6170)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-10)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-16)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-36)
- [v6.16.0](https://reactrouter.com/changelog#v6160)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-17)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-37)
- [v6.15.0](https://reactrouter.com/changelog#v6150)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-18)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-38)
- [v6.14.2](https://reactrouter.com/changelog#v6142)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-39)
- [v6.14.1](https://reactrouter.com/changelog#v6141)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-40)
- [v6.14.0](https://reactrouter.com/changelog#v6140)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-11)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-19)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-41)
- [v6.13.0](https://reactrouter.com/changelog#v6130)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-12)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-20)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-42)
- [v6.12.1](https://reactrouter.com/changelog#v6121)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-43)
- [v6.12.0](https://reactrouter.com/changelog#v6120)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-13)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-21)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-44)
- [v6.11.2](https://reactrouter.com/changelog#v6112)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-45)
- [v6.11.1](https://reactrouter.com/changelog#v6111)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-46)
- [v6.11.0](https://reactrouter.com/changelog#v6110)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-22)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-47)
- [v6.10.0](https://reactrouter.com/changelog#v6100)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-14)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-23)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-48)
- [v6.9.0](https://reactrouter.com/changelog#v690)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-15)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-24)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-49)
- [v6.8.2](https://reactrouter.com/changelog#v682)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-50)
- [v6.8.1](https://reactrouter.com/changelog#v681)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-51)
- [v6.8.0](https://reactrouter.com/changelog#v680)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-25)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-52)
- [v6.7.0](https://reactrouter.com/changelog#v670)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-26)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-53)
- [v6.6.2](https://reactrouter.com/changelog#v662)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-54)
- [v6.6.1](https://reactrouter.com/changelog#v661)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-55)
- [v6.6.0](https://reactrouter.com/changelog#v660)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-16)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-27)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-56)
- [v6.5.0](https://reactrouter.com/changelog#v650)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-17)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-28)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-57)
- [v6.4.5](https://reactrouter.com/changelog#v645)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-58)
- [v6.4.4](https://reactrouter.com/changelog#v644)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-59)
- [v6.4.3](https://reactrouter.com/changelog#v643)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-60)
- [v6.4.2](https://reactrouter.com/changelog#v642)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-61)
- [v6.4.1](https://reactrouter.com/changelog#v641)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-62)
- [v6.4.0](https://reactrouter.com/changelog#v640)
- [What's Changed](https://reactrouter.com/changelog#whats-changed-18)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-63)
- [v6.3.0](https://reactrouter.com/changelog#v630)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-29)
- [v6.2.2](https://reactrouter.com/changelog#v622)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-64)
- [v6.2.1](https://reactrouter.com/changelog#v621)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-65)
- [v6.2.0](https://reactrouter.com/changelog#v620)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-30)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-66)
- [v6.1.1](https://reactrouter.com/changelog#v611)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-67)
- [v6.1.0](https://reactrouter.com/changelog#v610)
- [Minor Changes](https://reactrouter.com/changelog#minor-changes-31)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-68)
- [v6.0.2](https://reactrouter.com/changelog#v602)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-69)
- [v6.0.1](https://reactrouter.com/changelog#v601)
- [Patch Changes](https://reactrouter.com/changelog#patch-changes-70)
- [v6.0.0](https://reactrouter.com/changelog#v600)

# React Router Releases

This page lists all releases/release notes for React Router back to `v6.0.0`. For releases prior to v6, please refer to the [Github Releases Page](https://github.com/remix-run/react-router/releases).

We manage release notes in this file instead of the paginated Github Releases Page for 2 reasons:

- Pagination in the Github UI means that you cannot easily search release notes for a large span of releases at once
- The paginated Github interface also cuts off longer releases notes without indication in list view, and you need to click into the detail view to see the full set of release notes

Table of Contents

- [React Router Releases](https://reactrouter.com/changelog#react-router-releases)
  - [v7.2.0](https://reactrouter.com/changelog#v720)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed)
      - [Type-safe `href` utility](https://reactrouter.com/changelog#type-safe-href-utility)
      - [Prerendering with a SPA Fallback](https://reactrouter.com/changelog#prerendering-with-a-spa-fallback)
      - [Allow a root `loader` in SPA Mode](https://reactrouter.com/changelog#allow-a-root-loader-in-spa-mode)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes)
    - [Unstable Changes](https://reactrouter.com/changelog#unstable-changes)
    - [Changes by Package](https://reactrouter.com/changelog#changes-by-package)
  - [v7.1.5](https://reactrouter.com/changelog#v715)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-1)
  - [v7.1.4](https://reactrouter.com/changelog#v714)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-2)
  - [v7.1.3](https://reactrouter.com/changelog#v713)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-3)
  - [v7.1.2](https://reactrouter.com/changelog#v712)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-4)
  - [v7.1.1](https://reactrouter.com/changelog#v711)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-5)
  - [v7.1.0](https://reactrouter.com/changelog#v710)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-1)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-6)
    - [Changes by Package](https://reactrouter.com/changelog#changes-by-package-1)
  - [v7.0.2](https://reactrouter.com/changelog#v702)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-7)
  - [v7.0.1](https://reactrouter.com/changelog#v701)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-8)
  - [v7.0.0](https://reactrouter.com/changelog#v700)
    - [Breaking Changes](https://reactrouter.com/changelog#breaking-changes)
      - [Package Restructuring](https://reactrouter.com/changelog#package-restructuring)
      - [Removed Adapter Re-exports](https://reactrouter.com/changelog#removed-adapter-re-exports)
      - [Removed APIs](https://reactrouter.com/changelog#removed-apis)
      - [Minimum Versions](https://reactrouter.com/changelog#minimum-versions)
      - [Adopted Future Flag Behaviors](https://reactrouter.com/changelog#adopted-future-flag-behaviors)
      - [Vite Compiler](https://reactrouter.com/changelog#vite-compiler)
      - [Exposed Router Promises](https://reactrouter.com/changelog#exposed-router-promises)
    - [Other Notable Changes](https://reactrouter.com/changelog#other-notable-changes)
      - [`routes.ts`](https://reactrouter.com/changelog#routests)
      - [Typesafety improvements](https://reactrouter.com/changelog#typesafety-improvements)
      - [Prerendering](https://reactrouter.com/changelog#prerendering)
    - [Major Changes ( `react-router`)](https://reactrouter.com/changelog#major-changes-react-router)
    - [Major Changes ( `@react-router/*`)](https://reactrouter.com/changelog#major-changes-react-router-1)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-2)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-9)
    - [Changes by Package](https://reactrouter.com/changelog#changes-by-package-2)
- [React Router v6 Releases](https://reactrouter.com/changelog#react-router-v6-releases)
  - [v6.30.0](https://reactrouter.com/changelog#v6300)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-3)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-10)
  - [v6.29.0](https://reactrouter.com/changelog#v6290)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-4)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-11)
  - [v6.28.2](https://reactrouter.com/changelog#v6282)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-12)
  - [v6.28.1](https://reactrouter.com/changelog#v6281)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-13)
  - [v6.28.0](https://reactrouter.com/changelog#v6280)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-1)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-5)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-14)
  - [v6.27.0](https://reactrouter.com/changelog#v6270)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-2)
      - [Stabilized APIs](https://reactrouter.com/changelog#stabilized-apis)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-6)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-15)
  - [v6.26.2](https://reactrouter.com/changelog#v6262)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-16)
  - [v6.26.1](https://reactrouter.com/changelog#v6261)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-17)
  - [v6.26.0](https://reactrouter.com/changelog#v6260)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-7)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-18)
  - [v6.25.1](https://reactrouter.com/changelog#v6251)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-19)
  - [v6.25.0](https://reactrouter.com/changelog#v6250)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-3)
      - [Stabilized `v7_skipActionErrorRevalidation`](https://reactrouter.com/changelog#stabilized-v7_skipactionerrorrevalidation)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-8)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-20)
  - [v6.24.1](https://reactrouter.com/changelog#v6241)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-21)
  - [v6.24.0](https://reactrouter.com/changelog#v6240)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-4)
      - [Lazy Route Discovery (a.k.a. "Fog of War")](https://reactrouter.com/changelog#lazy-route-discovery-aka-fog-of-war)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-9)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-22)
  - [v6.23.1](https://reactrouter.com/changelog#v6231)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-23)
  - [v6.23.0](https://reactrouter.com/changelog#v6230)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-5)
      - [Data Strategy (unstable)](https://reactrouter.com/changelog#data-strategy-unstable)
      - [Skip Action Error Revalidation (unstable)](https://reactrouter.com/changelog#skip-action-error-revalidation-unstable)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-10)
  - [v6.22.3](https://reactrouter.com/changelog#v6223)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-24)
  - [v6.22.2](https://reactrouter.com/changelog#v6222)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-25)
  - [v6.22.1](https://reactrouter.com/changelog#v6221)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-26)
  - [v6.22.0](https://reactrouter.com/changelog#v6220)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-6)
      - [Core Web Vitals Technology Report Flag](https://reactrouter.com/changelog#core-web-vitals-technology-report-flag)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-11)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-27)
  - [v6.21.3](https://reactrouter.com/changelog#v6213)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-28)
  - [v6.21.2](https://reactrouter.com/changelog#v6212)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-29)
  - [v6.21.1](https://reactrouter.com/changelog#v6211)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-30)
  - [v6.21.0](https://reactrouter.com/changelog#v6210)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-7)
      - [`future.v7_relativeSplatPath`](https://reactrouter.com/changelog#futurev7_relativesplatpath)
      - [Partial Hydration](https://reactrouter.com/changelog#partial-hydration)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-12)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-31)
  - [v6.20.1](https://reactrouter.com/changelog#v6201)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-32)
  - [v6.20.0](https://reactrouter.com/changelog#v6200)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-13)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-33)
  - [v6.19.0](https://reactrouter.com/changelog#v6190)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-8)
      - [`unstable_flushSync` API](https://reactrouter.com/changelog#unstable_flushsync-api)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-14)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-34)
  - [v6.18.0](https://reactrouter.com/changelog#v6180)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-9)
      - [New Fetcher APIs](https://reactrouter.com/changelog#new-fetcher-apis)
      - [Persistence Future Flag ( `future.v7_fetcherPersist`)](https://reactrouter.com/changelog#persistence-future-flag-futurev7_fetcherpersist)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-15)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-35)
  - [v6.17.0](https://reactrouter.com/changelog#v6170)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-10)
      - [View Transitions 🚀](https://reactrouter.com/changelog#view-transitions-)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-16)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-36)
  - [v6.16.0](https://reactrouter.com/changelog#v6160)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-17)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-37)
  - [v6.15.0](https://reactrouter.com/changelog#v6150)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-18)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-38)
  - [v6.14.2](https://reactrouter.com/changelog#v6142)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-39)
  - [v6.14.1](https://reactrouter.com/changelog#v6141)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-40)
  - [v6.14.0](https://reactrouter.com/changelog#v6140)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-11)
      - [JSON/Text Submissions](https://reactrouter.com/changelog#jsontext-submissions)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-19)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-41)
  - [v6.13.0](https://reactrouter.com/changelog#v6130)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-12)
      - [`future.v7_startTransition`](https://reactrouter.com/changelog#futurev7_starttransition)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-20)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-42)
  - [v6.12.1](https://reactrouter.com/changelog#v6121)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-43)
  - [v6.12.0](https://reactrouter.com/changelog#v6120)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-13)
      - [`React.startTransition` support](https://reactrouter.com/changelog#reactstarttransition-support)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-21)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-44)
  - [v6.11.2](https://reactrouter.com/changelog#v6112)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-45)
  - [v6.11.1](https://reactrouter.com/changelog#v6111)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-46)
  - [v6.11.0](https://reactrouter.com/changelog#v6110)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-22)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-47)
  - [v6.10.0](https://reactrouter.com/changelog#v6100)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-14)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-23)
      - [`future.v7_normalizeFormMethod`](https://reactrouter.com/changelog#futurev7_normalizeformmethod)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-48)
  - [v6.9.0](https://reactrouter.com/changelog#v690)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-15)
      - [`Component`/ `ErrorBoundary` route properties](https://reactrouter.com/changelog#componenterrorboundary-route-properties)
      - [Introducing Lazy Route Modules](https://reactrouter.com/changelog#introducing-lazy-route-modules)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-24)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-49)
  - [v6.8.2](https://reactrouter.com/changelog#v682)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-50)
  - [v6.8.1](https://reactrouter.com/changelog#v681)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-51)
  - [v6.8.0](https://reactrouter.com/changelog#v680)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-25)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-52)
  - [v6.7.0](https://reactrouter.com/changelog#v670)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-26)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-53)
  - [v6.6.2](https://reactrouter.com/changelog#v662)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-54)
  - [v6.6.1](https://reactrouter.com/changelog#v661)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-55)
  - [v6.6.0](https://reactrouter.com/changelog#v660)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-16)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-27)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-56)
  - [v6.5.0](https://reactrouter.com/changelog#v650)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-17)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-28)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-57)
  - [v6.4.5](https://reactrouter.com/changelog#v645)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-58)
  - [v6.4.4](https://reactrouter.com/changelog#v644)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-59)
  - [v6.4.3](https://reactrouter.com/changelog#v643)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-60)
  - [v6.4.2](https://reactrouter.com/changelog#v642)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-61)
  - [v6.4.1](https://reactrouter.com/changelog#v641)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-62)
  - [v6.4.0](https://reactrouter.com/changelog#v640)
    - [What's Changed](https://reactrouter.com/changelog#whats-changed-18)
      - [Remix Data APIs](https://reactrouter.com/changelog#remix-data-apis)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-63)
  - [v6.3.0](https://reactrouter.com/changelog#v630)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-29)
  - [v6.2.2](https://reactrouter.com/changelog#v622)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-64)
  - [v6.2.1](https://reactrouter.com/changelog#v621)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-65)
  - [v6.2.0](https://reactrouter.com/changelog#v620)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-30)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-66)
  - [v6.1.1](https://reactrouter.com/changelog#v611)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-67)
  - [v6.1.0](https://reactrouter.com/changelog#v610)
    - [Minor Changes](https://reactrouter.com/changelog#minor-changes-31)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-68)
  - [v6.0.2](https://reactrouter.com/changelog#v602)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-69)
  - [v6.0.1](https://reactrouter.com/changelog#v601)
    - [Patch Changes](https://reactrouter.com/changelog#patch-changes-70)
  - [v6.0.0](https://reactrouter.com/changelog#v600)

## v7.2.0

Date: 2025-02-18

### What's Changed

#### Type-safe `href` utility

In framework mode, we now provide you with a fully type-safe `href` utility to give you all the warm and fuzzy feelings of path auto-completion and param validation for links in your application:

```
import { href } from "react-router";

export default function Component() {
  const link = href("/blog/:slug", { slug: "my-first-post" });
  //                ^ type-safe!     ^ Also type-safe!

  return (
    <main>
      <Link to={href("/products/:id", { id: "asdf" })} />
      <NavLink to={href("/:lang?/about", { lang: "en" })} />
    </main>
  );
}

```

Copy code to clipboard

You'll now get type errors if you pass a bad path value or a bad param value:

```
const badPath = href("/not/a/valid/path");
//                   ^ Error!

const badParam = href("/blog/:slug", { oops: "bad param" });
//                                     ^ Error!

```

Copy code to clipboard

#### Prerendering with a SPA Fallback

This release enhances the ability to use a combination of pre-rendered paths alongside other paths that operate in "SPA Mode" when pre-rendering with `ssr:false`.

- If you specify `ssr:false` without a `prerender` config, this is considered "SPA Mode" and the generated `index.html` file will only render down to the root route and will be able to hydrate for any valid application path
- If you specify `ssr:false` with a `prerender` config but _do not_ include the `/` path (i.e., `prerender: ['/blog/post']`), then we still generate a "SPA Mode" `index.html` file that can hydrate for any path in the application
- If you specify `ssr:false` and include the `/` path in your `prerender` config, the generated `index.html` file will be specific to the root index route, so we will now also generate a separate "SPA Mode" file in `__spa-fallback.html` that you can serve/hydrate for non-prerendered paths

For more info, see the [Pre-rendering](https://reactrouter.com/dev/how-to/pre-rendering#pre-rendering-with-a-spa-fallback) docs for more info.

#### Allow a root `loader` in SPA Mode

SPA Mode used to prohibit the use of loaders in all routes so that we could hydrate for any path in the application. However, because the root route is always rendered at build time, we can lift this restriction for the root route.

In order to use your build-time loader data during pre-rendering, we now also expose the `loaderData` as an optional prop for the `HydrateFallback` component on routes:

- This will be defined so long as the `HydrateFallback` is rendering because _children_ routes are loading
- This will be `undefined` if the `HydrateFallback` is rendering because the route itself has it's own hydrating `clientLoader`
  - In SPA mode, this will allow you to render loader root data into the SPA Mode HTML file

### Minor Changes

- `react-router` \- New type-safe `href` utility that guarantees links point to actual paths in your app ( [#13012](https://github.com/remix-run/react-router/pull/13012))
- `@react-router/dev` \- Generate a "SPA fallback" HTML file when pre-rendering the `/` route with `ssr:false` ( [#12948](https://github.com/remix-run/react-router/pull/12948))
- `@react-router/dev` \- Allow a `loader` in the root route in SPA mode because it can be called/server-rendered at build time ( [#12948](https://github.com/remix-run/react-router/pull/12948))

  - `Route.HydrateFallbackProps` now also receives `loaderData`

### Patch Changes

- `react-router` \- Disable Lazy Route Discovery for all `ssr:false` apps and not just "SPA Mode" because there is no runtime server to serve the search-param-configured `__manifest` requests ( [#12894](https://github.com/remix-run/react-router/pull/12894))

  - We previously only disabled this for "SPA Mode" but we realized it should apply to all `ssr:false` apps
  - In those `prerender` scenarios we would pre-render the `/__manifest` file but that makes some unnecessary assumptions about the static file server behaviors
- `react-router` \- Don't apply Single Fetch revalidation de-optimization when in SPA mode since there is no server HTTP request ( [#12948](https://github.com/remix-run/react-router/pull/12948))
- `react-router` \- Properly handle revalidations to across a pre-render/SPA boundary ( [#13021](https://github.com/remix-run/react-router/pull/13021))

  - In "hybrid" applications where some routes are pre-rendered and some are served from a SPA fallback, we need to avoid making `.data` requests if the path wasn't pre-rendered because the request will 404
  - We don't know all the pre-rendered paths client-side, however:
    - All `loader` data in `ssr:false` mode is static because it's generated at build time
    - A route must use a `clientLoader` to do anything dynamic
    - Therefore, if a route only has a `loader` and not a `clientLoader`, we disable revalidation by default because there is no new data to retrieve
    - We short circuit and skip single fetch `.data` request logic if there are no server loaders with `shouldLoad=true` in our single fetch `dataStrategy`
    - This ensures that the route doesn't cause a `.data` request that would 404 after a submission
- `react-router` \- Align dev server behavior with static file server behavior when `ssr:false` is set ( [#12948](https://github.com/remix-run/react-router/pull/12948))

  - When no `prerender` config exists, only SSR down to the root `HydrateFallback` (SPA Mode)
  - When a `prerender` config exists but the current path is not pre-rendered, only SSR down to the root `HydrateFallback` (SPA Fallback)
  - Return a 404 on `.data` requests to non-pre-rendered paths
- `react-router` \- Improve prefetch performance of CSS side effects in framework mode ( [#12889](https://github.com/remix-run/react-router/pull/12889))
- `react-router` \- Properly handle interrupted manifest requests in lazy route discovery ( [#12915](https://github.com/remix-run/react-router/pull/12915))
- `@react-router/dev` \- Handle custom `envDir` in Vite config ( [#12969](https://github.com/remix-run/react-router/pull/12969))
- `@react-router/dev` \- Fix CLI parsing to allow argument-less `npx react-router` usage ( [#12925](https://github.com/remix-run/react-router/pull/12925))
- `@react-router/dev` \- Skip action-only resource routes when using `prerender:true` ( [#13004](https://github.com/remix-run/react-router/pull/13004))
- `@react-router/dev` \- Enhance invalid export detection when using `ssr:false` ( [#12948](https://github.com/remix-run/react-router/pull/12948))

  - `headers`/ `action` functions are prohibited in all routes with `ssr:false` because there will be no runtime server on which to run them
  - `loader` functions are more nuanced and depend on whether a given route is prerendered

    - When using `ssr:false` without a `prerender` config, only the `root` route can have a `loader`
    - When using `ssr:false` with a `prerender` config, only routes matched by a `prerender` path can have a `loader`
- `@react-router/dev` \- Error at build time in `ssr:false` \+ `prerender` apps for the edge case scenario of: ( [#13021](https://github.com/remix-run/react-router/pull/13021))

  - A parent route has only a `loader` (does not have a `clientLoader`)
  - The parent route is pre-rendered
  - The parent route has children routes which are not prerendered
  - This means that when the child paths are loaded via the SPA fallback, the parent won't have any `loaderData` because there is no server on which to run the `loader`
  - This can be resolved by either adding a parent `clientLoader` or pre-rendering the child paths
  - If you add a `clientLoader`, calling the `serverLoader()` on non-prerendered paths will throw a 404
- `@react-router/dev` \- Limit prerendered resource route `.data` files to only the target route ( [#13004](https://github.com/remix-run/react-router/pull/13004))
- `@react-router/dev` \- Fix pre-rendering of binary files ( [#13039](https://github.com/remix-run/react-router/pull/13039))
- `@react-router/dev` \- Fix typegen for repeated params ( [#13012](https://github.com/remix-run/react-router/pull/13012))

  - In React Router, path parameters are keyed by their name, so for a path pattern like `/a/:id/b/:id?/c/:id`, the last `:id` will set the value for `id` in `useParams` and the `params` prop

    - For example, `/a/1/b/2/c/3` will result in the value `{ id: 3 }` at runtime
  - Previously, generated types for params incorrectly modeled repeated params with an array
    - For example, `/a/1/b/2/c/3` generated a type like `{ id: [1,2,3] }`.
  - To be consistent with runtime behavior, the generated types now correctly model the "last one wins" semantics of path parameters.
    - For example, `/a/1/b/2/c/3` now generates a type like `{ id: 3 }`.
- `@react-router/dev` \- Fix path to load `package.json` for `react-router --version` ( [#13012](https://github.com/remix-run/react-router/pull/13012))

### Unstable Changes

⚠️ _[Unstable features](https://reactrouter.com/community/api-development-strategy#unstable-flags) are not recommended for production use_

- `react-router` \- Add `unstable_SerializesTo` brand type for library authors to register types serializable by React Router's streaming format ( `turbo-stream`) ( [#12264](https://github.com/remix-run/react-router/pull/12264))
- `@react-router/dev` \- Add unstable support for splitting route modules in framework mode via `future.unstable_splitRouteModules` ( [#11871](https://github.com/remix-run/react-router/pull/11871))
- `@react-router/dev` \- Add `future.unstable_viteEnvironmentApi` flag to enable experimental Vite Environment API support ( [#12936](https://github.com/remix-run/react-router/pull/12936))

### Changes by Package

- [`create-react-router`](https://github.com/remix-run/react-router/blob/react-router%407.2.0/packages/create-react-router/CHANGELOG.md#720)
- [`react-router`](https://github.com/remix-run/react-router/blob/react-router%407.2.0/packages/react-router/CHANGELOG.md#720)
- [`@react-router/architect`](https://github.com/remix-run/react-router/blob/react-router%407.2.0/packages/react-router-architect/CHANGELOG.md#720)
- [`@react-router/cloudflare`](https://github.com/remix-run/react-router/blob/react-router%407.2.0/packages/react-router-cloudflare/CHANGELOG.md#720)
- [`@react-router/dev`](https://github.com/remix-run/react-router/blob/react-router%407.2.0/packages/react-router-dev/CHANGELOG.md#720)
- [`@react-router/express`](https://github.com/remix-run/react-router/blob/react-router%407.2.0/packages/react-router-express/CHANGELOG.md#720)
- [`@react-router/fs-routes`](https://github.com/remix-run/react-router/blob/react-router%407.2.0/packages/react-router-fs-routes/CHANGELOG.md#720)
- [`@react-router/node`](https://github.com/remix-run/react-router/blob/react-router%407.2.0/packages/react-router-node/CHANGELOG.md#720)
- [`@react-router/remix-config-routes-adapter`](https://github.com/remix-run/react-router/blob/react-router%407.2.0/packages/react-router-remix-config-routes-adapter/CHANGELOG.md#720)
- [`@react-router/serve`](https://github.com/remix-run/react-router/blob/react-router%407.2.0/packages/react-router-serve/CHANGELOG.md#720)

**Full Changelog**: [`v7.1.5...v7.2.0`](https://github.com/remix-run/react-router/compare/react-router@7.1.5...react-router@7.2.0)

## v7.1.5

Date: 2025-01-31

### Patch Changes

- `react-router` \- Fix regression introduced in `7.1.4` via [#12800](https://github.com/remix-run/react-router/pull/12800) that caused issues navigating to hash routes inside splat routes for applications using Lazy Route Discovery ( `patchRoutesOnNavigation`) ( [#12927](https://github.com/remix-run/react-router/pull/12927))

**Full Changelog**: [`v7.1.4...v7.1.5`](https://github.com/remix-run/react-router/compare/react-router@7.1.4...react-router@7.1.5)

## v7.1.4

Date: 2025-01-30

### Patch Changes

- `@react-router/dev` \- Properly resolve Windows file paths to scan for Vite's dependency optimization when using the `unstable_optimizeDeps` future flag ( [#12637](https://github.com/remix-run/react-router/pull/12637))
- `@react-router/dev` \- Fix prerendering when using a custom server - previously we ended up trying to import the users custom server when we actually want to import the virtual server build module ( [#12759](https://github.com/remix-run/react-router/pull/12759))
- `react-router` \- Properly handle status codes that cannot have a body in single fetch responses (204, etc.) ( [#12760](https://github.com/remix-run/react-router/pull/12760))
- `react-router` \- Properly bubble headers as `errorHeaders` when throwing a `data()` result ( [#12846](https://github.com/remix-run/react-router/pull/12846))

  - Avoid duplication of `Set-Cookie` headers if also returned from `headers`
- `react-router` \- Stop erroring on resource routes that return raw strings/objects and instead serialize them as `text/plain` or `application/json` responses ( [#12848](https://github.com/remix-run/react-router/pull/12848))

  - This only applies when accessed as a resource route without the `.data` extension
  - When accessed from a Single Fetch `.data` request, they will still be encoded via `turbo-stream`
- `react-router` \- Optimize Lazy Route Discovery path discovery to favor a single `querySelectorAll` call at the `body` level instead of many calls at the sub-tree level ( [#12731](https://github.com/remix-run/react-router/pull/12731))
- `react-router` \- Optimize route matching by skipping redundant `matchRoutes` calls when possible ( [#12800](https://github.com/remix-run/react-router/pull/12800), [#12882](https://github.com/remix-run/react-router/pull/12882))
- `react-router` \- Internal reorg to clean up some duplicated route module types ( [#12799](https://github.com/remix-run/react-router/pull/12799))

**Full Changelog**: [`v7.1.3...v7.1.4`](https://github.com/remix-run/react-router/compare/react-router@7.1.3...react-router@7.1.4)

## v7.1.3

Date: 2025-01-17

### Patch Changes

- `@react-router/dev` \- Fix `reveal` and `routes` CLI commands ( [#12745](https://github.com/remix-run/react-router/pull/12745))

**Full Changelog**: [`v7.1.2...v7.1.3`](https://github.com/remix-run/react-router/compare/react-router@7.1.2...react-router@7.1.3)

## v7.1.2

Date: 2025-01-16

### Patch Changes

- `react-router` \- Fix issue with fetcher data cleanup in the data layer on fetcher unmount ( [#12681](https://github.com/remix-run/react-router/pull/12681))
- `react-router` \- Do not rely on `symbol` for filtering out `redirect` responses from loader data ( [#12694](https://github.com/remix-run/react-router/pull/12694))

  - Previously, some projects were getting type checking errors like:



    ```
    error TS4058: Return type of exported function has or is using name 'redirectSymbol' from external module "node_modules/..." but cannot be named.

    ```

    Copy code to clipboard

  - Now that `symbol` s are not used for the `redirect` response type, these errors should no longer be present
- `@react-router/dev` \- Fix default external conditions in Vite v6 ( [#12644](https://github.com/remix-run/react-router/pull/12644))

  - This fixes resolution issues with certain npm packages
- `@react-router/dev` \- Fix mismatch in prerendering html/data files when path is missing a leading slash ( [#12684](https://github.com/remix-run/react-router/pull/12684))
- `@react-router/dev` \- Use `module-sync` server condition when enabled in the runtime. This fixes React context mismatches (e.g. `useHref() may be used only in the context of a <Router> component.`) during development on Node 22.10.0+ when using libraries that have a peer dependency on React Router ( [#12729](https://github.com/remix-run/react-router/pull/12729))
- `@react-router/dev` \- Fix `react-refresh` source maps ( [#12686](https://github.com/remix-run/react-router/pull/12686))

**Full Changelog**: [`v7.1.1...v7.1.2`](https://github.com/remix-run/react-router/compare/react-router@7.1.1...react-router@7.1.2)

## v7.1.1

Date: 2024-12-23

### Patch Changes

- `@react-router/dev` \- Fix for a crash when optional args are passed to the CLI ( [#12609](https://github.com/remix-run/react-router/pull/12609))

**Full Changelog**: [`v7.1.0...v7.1.1`](https://github.com/remix-run/react-router/compare/react-router@7.1.0...react-router@7.1.1)

## v7.1.0

Date: 2024-12-20

### Minor Changes

- Add support for Vite v6 ( [#12469](https://github.com/remix-run/react-router/pull/12469))

### Patch Changes

- `react-router` \- Throw unwrapped Single Fetch `redirect` to align with pre-Single Fetch behavior ( [#12506](https://github.com/remix-run/react-router/pull/12506))
- `react-router` \- Ignore redirects when inferring loader data types ( [#12527](https://github.com/remix-run/react-router/pull/12527))
- `react-router` \- Remove `<Link prefetch>` warning which suffers from false positives in a lazy route discovery world ( [#12485](https://github.com/remix-run/react-router/pull/12485))
- `create-react-router` \- Fix missing `fs-extra` dependency ( [#12556](https://github.com/remix-run/react-router/pull/12556))
- `@react-router/dev`/ `@react-router/serve` \- Properly initialize `NODE_ENV` if not already set for compatibility with React 19 ( [#12578](https://github.com/remix-run/react-router/pull/12578))
- `@react-router/dev` \- Remove the leftover/unused `abortDelay` prop from `ServerRouter` and update the default `entry.server.tsx` to use the new `streamTimeout` value for Single Fetch ( [#12478](https://github.com/remix-run/react-router/pull/12478))

  - The `abortDelay` functionality was removed in v7 as it was coupled to the `defer` implementation from Remix v2, but this removal of this prop was missed
  - If you were still using this prop in your `entry.server` file, it's likely your app is not aborting streams as you would expect and you will need to adopt the new [`streamTimeout`](https://reactrouter.com/explanation/special-files#streamtimeout) value introduced with Single Fetch
- `@react-router/fs-routes` \- Throw error in `flatRoutes` if routes directory is missing ( [#12407](https://github.com/remix-run/react-router/pull/12407))

### Changes by Package

- [`create-react-router`](https://github.com/remix-run/react-router/blob/react-router%407.1.0/packages/create-react-router/CHANGELOG.md#710)
- [`react-router`](https://github.com/remix-run/react-router/blob/react-router%407.1.0/packages/react-router/CHANGELOG.md#710)
- [`@react-router/architect`](https://github.com/remix-run/react-router/blob/react-router%407.1.0/packages/react-router-architect/CHANGELOG.md#710)
- [`@react-router/cloudflare`](https://github.com/remix-run/react-router/blob/react-router%407.1.0/packages/react-router-cloudflare/CHANGELOG.md#710)
- [`@react-router/dev`](https://github.com/remix-run/react-router/blob/react-router%407.1.0/packages/react-router-dev/CHANGELOG.md#710)
- [`@react-router/express`](https://github.com/remix-run/react-router/blob/react-router%407.1.0/packages/react-router-express/CHANGELOG.md#710)
- [`@react-router/fs-routes`](https://github.com/remix-run/react-router/blob/react-router%407.1.0/packages/react-router-fs-routes/CHANGELOG.md#710)
- [`@react-router/node`](https://github.com/remix-run/react-router/blob/react-router%407.1.0/packages/react-router-node/CHANGELOG.md#710)
- [`@react-router/remix-config-routes-adapter`](https://github.com/remix-run/react-router/blob/react-router%407.1.0/packages/react-router-remix-config-routes-adapter/CHANGELOG.md#710)
- [`@react-router/serve`](https://github.com/remix-run/react-router/blob/react-router%407.1.0/packages/react-router-serve/CHANGELOG.md#710)

**Full Changelog**: [`v7.0.2...v7.1.0`](https://github.com/remix-run/react-router/compare/react-router@7.0.2...react-router@7.1.0)

## v7.0.2

Date: 2024-12-02

### Patch Changes

- `react-router` \- Temporarily only use one build in export map so packages can have a peer dependency on react router ( [#12437](https://github.com/remix-run/react-router/pull/12437))
- `@react-router/dev` \- Support `moduleResolution` `Node16` and `NodeNext` ( [#12440](https://github.com/remix-run/react-router/pull/12440))
- `@react-router/dev` \- Generate wide `matches` and `params` types for child routes ( [#12397](https://github.com/remix-run/react-router/pull/12397))

  - At runtime, `matches` includes child route matches and `params` include child route path parameters
  - But previously, we only generated types for parent routes and the current route in `matches` and `params`
  - To align our generated types more closely to the runtime behavior, we now generate more permissive, wider types when accessing child route information

**Full Changelog**: [`v7.0.1...v7.0.2`](https://github.com/remix-run/react-router/compare/react-router@7.0.1...react-router@7.0.2)

## v7.0.1

Date: 2024-11-22

### Patch Changes

- `@react-router/dev` \- Ensure typegen file watcher is cleaned up when Vite dev server restarts ( [#12331](https://github.com/remix-run/react-router/pull/12331))
- `@react-router/dev` \- Pass route `error` to `ErrorBoundary` as a prop ( [#12338](https://github.com/remix-run/react-router/pull/12338))

**Full Changelog**: [`v7.0.0...v7.0.1`](https://github.com/remix-run/react-router/compare/react-router@7.0.0...react-router@7.0.1)

## v7.0.0

Date: 2024-11-21

### Breaking Changes

#### Package Restructuring

- The `react-router-dom`, `@remix-run/react`, `@remix-run/server-runtime`, and `@remix-run/router` have been collapsed into the `react-router` package

  - To ease migration, `react-router-dom` is still published in v7 as a re-export of everything from `react-router`
- The `@remix-run/cloudflare-pages` and `@remix-run/cloudflare-workers` have been collapsed into `@react-router/cloudflare` package\`
- The `react-router-dom-v5-compat` and `react-router-native` packages are removed starting with v7

#### Removed Adapter Re-exports

Remix v2 used to re-export all common `@remix-run/server-runtime` APIs through the various runtime packages ( `node`, `cloudflare`, `deno`) so that you wouldn't need an additional `@remix-run/server-runtime` dependency in your `package.json`. With the collapsing of packages into `react-router`, these common APIs are now no longer re-exported through the runtime adapters. You should import all common APIs from `react-router`, and only import runtime-specific APIs from the runtime packages:

```
// Runtime-specific APIs
import { createFileSessionStorage } from "@react-router/node";
// Runtime-agnostic APIs
import { redirect, useLoaderData } from "react-router";

```

Copy code to clipboard

#### Removed APIs

The following APIs have been removed in React Router v7:

- `json`
- `defer`
- `unstable_composeUploadHandlers`
- `unstable_createMemoryUploadHandler`
- `unstable_parseMultipartFormData`

#### Minimum Versions

React Router v7 requires the following minimum versions:

- `node@20`
  - React Router no longer provides an `installGlobals` method to [polyfill](https://reactrouter.com/dev/guides/deploying/custom-node#polyfilling-fetch) the `fetch` API
- `react@18`, `react-dom@18`

#### Adopted Future Flag Behaviors

Remix and React Router follow an [API Development Strategy](https://reactrouter.com/en/main/guides/api-development-strategy) leveraging "Future Flags" to avoid introducing a slew of breaking changes in a major release. Instead, breaking changes are introduced in minor releases behind a flag, allowing users to opt-in at their convenience. In the next major release, all future flag behaviors become the default behavior.

The following previously flagged behaviors are now the default in React Router v7:

- [React Router v6 flags](https://reactrouter.com/en/v6/upgrading/future)
  - `future.v7_relativeSplatPath`
  - `future.v7_startTransition`
  - `future.v7_fetcherPersist`
  - `future.v7_normalizeFormMethod`
  - `future.v7_partialHydration`
  - `future.v7_skipActionStatusRevalidation`
- [Remix v2 flags](https://remix.run/docs/en/v2/start/future-flags)
  - `future.v3_fetcherPersist`
  - `future.v3_relativeSplatPath`
  - `future.v3_throwAbortReason`
  - `future.v3_singleFetch`
  - `future.v3_lazyRouteDiscovery`
  - `future.v3_optimizeDeps`

#### Vite Compiler

The [Remix Vite plugin](https://remix.run/docs/en/2.12.1/start/future-flags#vite-plugin) is the proper way to build full-stack SSR apps using React Router v7. The former `esbuild`-based compiler is no longer available.

**Renamed `vitePlugin` and `cloudflareDevProxyVitePlugin`**

For Remix consumers migrating to React Router, the `vitePlugin` and `cloudflareDevProxyVitePlugin` exports have been renamed and moved ( [#11904](https://github.com/remix-run/react-router/pull/11904))

```
-import {
-  vitePlugin as remix,
-  cloudflareDevProxyVitePlugin,
-} from "@remix/dev";

+import { reactRouter } from "@react-router/dev/vite";
+import { cloudflareDevProxy } from "@react-router/dev/vite/cloudflare";

```

Copy code to clipboard

**Removed `manifest` option**

For Remix consumers migrating to React Router, the Vite plugin's `manifest` option has been removed. The `manifest` option been superseded by the more powerful `buildEnd` hook since it's passed the `buildManifest` argument. You can still write the build manifest to disk if needed, but you'll most likely find it more convenient to write any logic depending on the build manifest within the `buildEnd` hook itself. ( [#11573](https://github.com/remix-run/react-router/pull/11573))

If you were using the `manifest` option, you can replace it with a `buildEnd` hook that writes the manifest to disk like this:

```
// react-router.config.ts
import { type Config } from "@react-router/dev/config";
import { writeFile } from "node:fs/promises";

export default {
  async buildEnd({ buildManifest }) {
    await writeFile(
      "build/manifest.json",
      JSON.stringify(buildManifest, null, 2),
      "utf-8"
    );
  },
} satisfies Config;

```

Copy code to clipboard

#### Exposed Router Promises

Because React 19 will have first-class support for handling promises in the render pass (via `React.use` and `useAction`), we are now comfortable exposing the promises for the APIs that previously returned `undefined`:

- `useNavigate()`
- `useSubmit()`
- `useFetcher().load`
- `useFetcher().submit`
- `useRevalidator().revalidate()`

### Other Notable Changes

#### `routes.ts`

When using the React Router Vite plugin, routes are defined in `app/routes.ts`. Route config is exported via the `routes` export, conforming to the `RouteConfig` type. Route helper functions `route`, `index`, and `layout` are provided to make declarative type-safe route definitions easier.

```
// app/routes.ts
import {
  type RouteConfig,
  route,
  index,
  layout,
} from "@react-router/dev/routes";

export const routes: RouteConfig = [\
  index("./home.tsx"),\
  route("about", "./about.tsx"),\
\
  layout("./auth/layout.tsx", [\
    route("login", "./auth/login.tsx"),\
    route("register", "./auth/register.tsx"),\
  ]),\
\
  route("concerts", [\
    index("./concerts/home.tsx"),\
    route(":city", "./concerts/city.tsx"),\
    route("trending", "./concerts/trending.tsx"),\
  ]),\
];

```

Copy code to clipboard

For Remix consumers migrating to React Router, you can still configure file system routing within `routes.ts` using the `@react-router/fs-routes` package. A minimal route config that reproduces the default Remix setup looks like this:

```
// app/routes.ts
import { type RouteConfig } from "@react-router/dev/routes";
import { flatRoutes } from "@react-router/fs-routes";

export const routes: RouteConfig = flatRoutes();

```

Copy code to clipboard

If you want to migrate from file system routing to config-based routes, you can mix and match approaches by spreading the results of the async `flatRoutes` function into the array of config-based routes.

```
// app/routes.ts
import { type RouteConfig, route } from "@react-router/dev/routes";
import { flatRoutes } from "@react-router/fs-routes";

export const routes: RouteConfig = [\
  // Example config-based route:\
  route("/hello", "./routes/hello.tsx"),\
\
  // File system routes scoped to a different directory:\
  ...(await flatRoutes({\
    rootDirectory: "fs-routes",\
  })),\
];

```

Copy code to clipboard

If you were using Remix's `routes` option to use alternative file system routing conventions, you can adapt these to the new `RouteConfig` format using `@react-router/remix-config-routes-adapter`.

For example, if you were using [Remix v1 route conventions](https://remix.run/docs/en/1.19.3/file-conventions/routes-files) in Remix v2, you can combine `@react-router/remix-config-routes-adapter` with `@remix-run/v1-route-convention` to adapt this to React Router:

```
// app/routes.ts
import { type RouteConfig } from "@react-router/dev/routes";
import { remixConfigRoutes } from "@react-router/remix-config-routes-adapter";
import { createRoutesFromFolders } from "@remix-run/v1-route-convention";

export const routes: RouteConfig = remixConfigRoutes(async (defineRoutes) => {
  return createRoutesFromFolders(defineRoutes, {
    ignoredFilePatterns: ["**/.*", "**/*.css"],
  });
});

```

Copy code to clipboard

Also note that, if you were using Remix's `routes` option to define config-based routes, you can also adapt these to the new `RouteConfig` format using `@react-router/remix-config-routes-adapter` with minimal code changes. While this makes for a fast migration path, we recommend migrating any config-based routes from Remix to the new `RouteConfig` format since it's a fairly straightforward migration.

```
// app/routes.ts
-import { type RouteConfig } from "@react-router/dev/routes";
+import { type RouteConfig, route } from "@react-router/dev/routes";
-import { remixConfigRoutes } from "@react-router/remix-config-routes-adapter";

-export const routes: RouteConfig = remixConfigRoutes(async (defineRoutes) => {
-  defineRoutes((route) => {
-    route("/parent", "./routes/parent.tsx", () => [\
-      route("/child", "./routes/child.tsx"),\
-    ]);
-  });
-});
+export const routes: RouteConfig = [\
+  route("/parent", "./routes/parent.tsx", [\
+    route("/child", "./routes/child.tsx"),\
+  ]),\
+];

```

Copy code to clipboard

#### Typesafety improvements

React Router now generates types for each of your route modules and passes typed props to route module component exports ( [#11961](https://github.com/remix-run/react-router/pull/11961), [#12019](https://github.com/remix-run/react-router/pull/12019)). You can access those types by importing them from `./+types/<route filename without extension>`.

See [_How To > Route Module Type Safety_](https://reactrouter.com/dev/how-to/route-module-type-safety) and [_Explanations > Type Safety_](https://reactrouter.com/dev/explanation/type-safety) for more details.

#### Prerendering

React Router v7 includes a new `prerender` config in the vite plugin to support SSG use-cases. This will pre-render your `.html` and `.data` files at build time and so you can serve them statically at runtime from a running server or a CDN ( [#11539](https://github.com/remix-run/react-router/pull/11539))

```
export default defineConfig({
  plugins: [\
    reactRouter({\
      async prerender({ getStaticPaths }) {\
        let slugs = await fakeGetSlugsFromCms();\
        return [\
          ...getStaticPaths(),\
          ...slugs.map((slug) => `/product/${slug}`),\
        ];\
      },\
    }),\
    tsconfigPaths(),\
  ],
});

async function fakeGetSlugsFromCms() {
  await new Promise((r) => setTimeout(r, 1000));
  return ["shirt", "hat"];
}

```

Copy code to clipboard

### Major Changes ( `react-router`)

- Remove the original `defer` implementation in favor of using raw promises via single fetch and `turbo-stream` ( [#11744](https://github.com/remix-run/react-router/pull/11744))

  - This removes these exports from React Router:
    - `defer`
    - `AbortedDeferredError`
    - `type TypedDeferredData`
    - `UNSAFE_DeferredData`
    - `UNSAFE_DEFERRED_SYMBOL`
- Collapse packages into `react-router`( [#11505](https://github.com/remix-run/react-router/pull/11505))

  - `@remix-run/router`
  - `react-router-dom`
  - `@remix-run/server-runtime`
  - `@remix-run/testing`
  - As a note, the `react-router-dom` package is maintained to ease adoption but it simply re-exports all APIs from `react-router`
- Drop support for Node 16, React Router SSR now requires Node 18 or higher ( [#11391](https://github.com/remix-run/react-router/pull/11391), [#11690](https://github.com/remix-run/react-router/pull/11690))
- Remove `future.v7_startTransition` flag ( [#11696](https://github.com/remix-run/react-router/pull/11696))
- Expose the underlying router promises from the following APIs for composition in React 19 APIs: ( [#11521](https://github.com/remix-run/react-router/pull/11521))
- Remove `future.v7_normalizeFormMethod` future flag ( [#11697](https://github.com/remix-run/react-router/pull/11697))
- Imports/Exports cleanup ( [#11840](https://github.com/remix-run/react-router/pull/11840))

  - Removed the following exports that were previously public API from `@remix-run/router`
    - types
      - `AgnosticDataIndexRouteObject`
      - `AgnosticDataNonIndexRouteObject`
      - `AgnosticDataRouteMatch`
      - `AgnosticDataRouteObject`
      - `AgnosticIndexRouteObject`
      - `AgnosticNonIndexRouteObject`
      - `AgnosticRouteMatch`
      - `AgnosticRouteObject`
      - `TrackedPromise`
      - `unstable_AgnosticPatchRoutesOnMissFunction`
      - `Action` -\> exported as `NavigationType` via `react-router`
      - `Router` exported as `RemixRouter` to differentiate from RR's `<Router>`
    - API
      - `getToPathname` ( `@private`)
      - `joinPaths` ( `@private`)
      - `normalizePathname` ( `@private`)
      - `resolveTo` ( `@private`)
      - `stripBasename` ( `@private`)
      - `createBrowserHistory` -\> in favor of `createBrowserRouter`
      - `createHashHistory` -\> in favor of `createHashRouter`
      - `createMemoryHistory` -\> in favor of `createMemoryRouter`
      - `createRouter`
      - `createStaticHandler` -\> in favor of wrapper `createStaticHandler` in RR Dom
      - `getStaticContextFromError`
  - Removed the following exports that were previously public API from `react-router`
    - `Hash`
    - `Pathname`
    - `Search`
- Remove `future.v7_prependBasename` from the internalized `@remix-run/router` package ( [#11726](https://github.com/remix-run/react-router/pull/11726))
- Remove `future.v7_throwAbortReason` from internalized `@remix-run/router` package ( [#11728](https://github.com/remix-run/react-router/pull/11728))
- Add `exports` field to all packages ( [#11675](https://github.com/remix-run/react-router/pull/11675))
- Renamed `RemixContext` to `FrameworkContext` ( [#11705](https://github.com/remix-run/react-router/pull/11705))
- Update the minimum React version to 18 ( [#11689](https://github.com/remix-run/react-router/pull/11689))
- `PrefetchPageDescriptor` replaced by `PageLinkDescriptor` ( [#11960](https://github.com/remix-run/react-router/pull/11960))
- Remove the `future.v7_partialHydration` flag ( [#11725](https://github.com/remix-run/react-router/pull/11725))

  - This also removes the `<RouterProvider fallbackElement>` prop

    - To migrate, move the `fallbackElement` to a `hydrateFallbackElement`/ `HydrateFallback` on your root route
  - Also worth nothing there is a related breaking changer with this future flag:
    - Without `future.v7_partialHydration` (when using `fallbackElement`), `state.navigation` was populated during the initial load
    - With `future.v7_partialHydration`, `state.navigation` remains in an `"idle"` state during the initial load
- Remove `future.v7_relativeSplatPath` future flag ( [#11695](https://github.com/remix-run/react-router/pull/11695))
- Remove remaining future flags ( [#11820](https://github.com/remix-run/react-router/pull/11820))

  - React Router `v7_skipActionErrorRevalidation`
  - Remix `v3_fetcherPersist`, `v3_relativeSplatPath`, `v3_throwAbortReason`
- Rename `createRemixStub` to `createRoutesStub` ( [#11692](https://github.com/remix-run/react-router/pull/11692))
- Remove `@remix-run/router` deprecated `detectErrorBoundary` option in favor of `mapRouteProperties` ( [#11751](https://github.com/remix-run/react-router/pull/11751))
- Add `react-router/dom` subpath export to properly enable `react-dom` as an optional `peerDependency` ( [#11851](https://github.com/remix-run/react-router/pull/11851))

  - This ensures that we don't blindly `import ReactDOM from "react-dom"` in `<RouterProvider>` in order to access `ReactDOM.flushSync()`, since that would break `createMemoryRouter` use cases in non-DOM environments
  - DOM environments should import from `react-router/dom` to get the proper component that makes `ReactDOM.flushSync()` available:

    - If you are using the Vite plugin, use this in your `entry.client.tsx`:

      - `import { HydratedRouter } from 'react-router/dom'`
    - If you are not using the Vite plugin and are manually calling `createBrowserRouter`/ `createHashRouter`:

      - `import { RouterProvider } from "react-router/dom"`
- Remove `future.v7_fetcherPersist` flag ( [#11731](https://github.com/remix-run/react-router/pull/11731))
- Allow returning `undefined` from loaders and actions ( [#11680](https://github.com/remix-run/react-router/pull/11680), [#12057](https://reactrouter.com/%5Bhttps://github.com/remix-run/react-router/pull/1205))
- Use `createRemixRouter`/ `RouterProvider` in `entry.client` instead of `RemixBrowser` ( [#11469](https://github.com/remix-run/react-router/pull/11469))
- Remove the deprecated `json` utility ( [#12146](https://github.com/remix-run/react-router/pull/12146))

  - You can use [`Response.json`](https://developer.mozilla.org/en-US/docs/Web/API/Response/json_static) if you still need to construct JSON responses in your app

### Major Changes ( `@react-router/*`)

- Remove `future.v3_singleFetch` flag ( [#11522](https://github.com/remix-run/react-router/pull/11522))
- Drop support for Node 16 and 18, update minimum Node version to 20 ( [#11690](https://github.com/remix-run/react-router/pull/11690), [#12171](https://github.com/remix-run/react-router/pull/12171))

  - Remove `installGlobals()` as this should no longer be necessary
- Add `exports` field to all packages ( [#11675](https://github.com/remix-run/react-router/pull/11675))
- No longer re-export APIs from `react-router` through different runtime/adapter packages ( [#11702](https://github.com/remix-run/react-router/pull/11702))
- For Remix consumers migrating to React Router, the `crypto` global from the [Web Crypto API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API) is now required when using cookie and session APIs

  - This means that the following APIs are provided from `react-router` rather than platform-specific packages: ( [#11837](https://github.com/remix-run/react-router/pull/11837))

    - `createCookie`
    - `createCookieSessionStorage`
    - `createMemorySessionStorage`
    - `createSessionStorage`
  - For consumers running older versions of Node, the `installGlobals` function from `@remix-run/node` has been updated to define `globalThis.crypto`, using [Node's `require('node:crypto').webcrypto` implementation](https://nodejs.org/api/webcrypto.html)
  - Since platform-specific packages no longer need to implement this API, the following low-level APIs have been removed:
    - `createCookieFactory`
    - `createSessionStorageFactory`
    - `createCookieSessionStorageFactory`
    - `createMemorySessionStorageFactory`
- Consolidate types previously duplicated across `@remix-run/router`, `@remix-run/server-runtime`, and `@remix-run/react` now that they all live in `react-router` ( [#12177](https://github.com/remix-run/react-router/pull/12177))

  - Examples: `LoaderFunction`, `LoaderFunctionArgs`, `ActionFunction`, `ActionFunctionArgs`, `DataFunctionArgs`, `RouteManifest`, `LinksFunction`, `Route`, `EntryRoute`
  - The `RouteManifest` type used by the "remix" code is now slightly stricter because it is using the former `@remix-run/router` `RouteManifest`
    - `Record<string, Route> -> Record<string, Route | undefined>`
  - Removed `AppData` type in favor of inlining `unknown` in the few locations it was used
  - Removed `ServerRuntimeMeta*` types in favor of the `Meta*` types they were duplicated from
- Migrate Remix v2 type generics to React Router ( [#12180](https://github.com/remix-run/react-router/pull/12180))

  - These generics are provided for Remix v2 migration purposes
  - These generics and the APIs they exist on should be considered informally deprecated in favor of the new `Route.*` types
  - Anyone migrating from React Router v6 should probably not leverage these new generics and should migrate straight to the `Route.*` types
  - For React Router v6 users, these generics are new and should not impact your app, with one exception
    - `useFetcher` previously had an optional generic (used primarily by Remix v2) that expected the data type
    - This has been updated in v7 to expect the type of the function that generates the data (i.e., `typeof loader`/ `typeof action`)
    - Therefore, you should update your usages:
      - ❌ `useFetcher<LoaderData>()`
      - ✅ `useFetcher<typeof loader>()`
- Update `cookie` dependency to `^1.0.1` \- please see the [release notes](https://github.com/jshttp/cookie/releases) for any breaking changes ( [#12172](https://github.com/remix-run/react-router/pull/12172))
- `@react-router/cloudflare` \- For Remix consumers migrating to React Router, all exports from `@remix-run/cloudflare-pages` are now provided for React Router consumers in the `@react-router/cloudflare` package. There is no longer a separate package for Cloudflare Pages. ( [#11801](https://github.com/remix-run/react-router/pull/11801))
- `@react-router/cloudflare` \- The `@remix-run/cloudflare-workers` package has been deprecated. Remix consumers migrating to React Router should use the `@react-router/cloudflare` package directly. For guidance on how to use `@react-router/cloudflare` within a Cloudflare Workers context, refer to the Cloudflare Workers template. ( [#11801](https://github.com/remix-run/react-router/pull/11801))
- `@react-router/dev` \- For Remix consumers migrating to React Router, the `vitePlugin` and `cloudflareDevProxyVitePlugin` exports have been renamed and moved. ( [#11904](https://github.com/remix-run/react-router/pull/11904))
- `@react-router/dev` \- For Remix consumers migrating to React Router who used the Vite plugin's `buildEnd` hook, the resolved `reactRouterConfig` object no longer contains a `publicPath` property since this belongs to Vite, not React Router ( [#11575](https://github.com/remix-run/react-router/pull/11575))
- `@react-router/dev` \- For Remix consumers migrating to React Router, the Vite plugin's `manifest` option has been removed ( [#11573](https://github.com/remix-run/react-router/pull/11573))
- `@react-router/dev` \- Update default `isbot` version to v5 and drop support for `isbot@3` ( [#11770](https://github.com/remix-run/react-router/pull/11770))

  - If you have `isbot@4` or `isbot@5` in your `package.json`:

    - You do not need to make any changes
  - If you have `isbot@3` in your `package.json` and you have your own `entry.server.tsx` file in your repo

    - You do not need to make any changes
    - You can upgrade to `isbot@5` independent of the React Router v7 upgrade
  - If you have `isbot@3` in your `package.json` and you do not have your own `entry.server.tsx` file in your repo

    - You are using the internal default entry provided by React Router v7 and you will need to upgrade to `isbot@5` in your `package.json`
- `@react-router/dev` \- For Remix consumers migrating to React Router, Vite manifests (i.e. `.vite/manifest.json`) are now written within each build subdirectory, e.g. `build/client/.vite/manifest.json` and `build/server/.vite/manifest.json` instead of `build/.vite/client-manifest.json` and `build/.vite/server-manifest.json`. This means that the build output is now much closer to what you'd expect from a typical Vite project. ( [#11573](https://github.com/remix-run/react-router/pull/11573))

  - Originally the Remix Vite plugin moved all Vite manifests to a root-level `build/.vite` directory to avoid accidentally serving them in production, particularly from the client build. This was later improved with additional logic that deleted these Vite manifest files at the end of the build process unless Vite's `build.manifest` had been enabled within the app's Vite config. This greatly reduced the risk of accidentally serving the Vite manifests in production since they're only present when explicitly asked for. As a result, we can now assume that consumers will know that they need to manage these additional files themselves, and React Router can safely generate a more standard Vite build output.

### Minor Changes

- `react-router` \- Params, loader data, and action data as props for route component exports ( [#11961](https://github.com/remix-run/react-router/pull/11961))
- `react-router` \- Add route module type generation ( [#12019](https://github.com/remix-run/react-router/pull/12019))
- `react-router` \- Remove duplicate `RouterProvider` implementations ( [#11679](https://github.com/remix-run/react-router/pull/11679))
- `react-router` \- Stabilize `unstable_dataStrategy` ( [#11969](https://github.com/remix-run/react-router/pull/11969))
- `react-router` \- Stabilize `unstable_patchRoutesOnNavigation` ( [#11970](https://github.com/remix-run/react-router/pull/11970))
- `react-router` \- Add prefetching support to `Link`/ `NavLink` when using Remix SSR ( [#11402](https://github.com/remix-run/react-router/pull/11402))
- `react-router` \- Enhance `ScrollRestoration` so it can restore properly on an SSR'd document load ( [#11401](https://github.com/remix-run/react-router/pull/11401))
- `@react-router/dev` \- Add support for the `prerender` config in the React Router vite plugin, to support existing SSG use-cases ( [#11539](https://github.com/remix-run/react-router/pull/11539))
- `@react-router/dev` \- Remove internal `entry.server.spa.tsx` implementation which was not compatible with the Single Fetch async hydration approach ( [#11681](https://github.com/remix-run/react-router/pull/11681))
- `@react-router/serve`: Update `express.static` configurations to support new `prerender` API ( [#11547](https://github.com/remix-run/react-router/pull/11547))

  - Assets in the `build/client/assets` folder are served as before, with a 1-year immutable `Cache-Control` header
  - Static files outside of assets, such as pre-rendered `.html` and `.data` files are not served with a specific `Cache-Control` header
  - `.data` files are served with `Content-Type: text/x-turbo`
    - For some reason, when adding this via `express.static`, it seems to also add a `Cache-Control: public, max-age=0` to `.data` files

### Patch Changes

- Replace `substr` with `substring` ( [#12080](https://github.com/remix-run/react-router/pull/12080))
- `react-router` \- Fix redirects returned from loaders/actions using `data()` ( [#12021](https://github.com/remix-run/react-router/pull/12021))
- `@react-router/dev` \- Enable prerendering for resource routes ( [#12200](https://github.com/remix-run/react-router/pull/12200))
- `@react-router/dev` \- resolve config directory relative to flat output file structure ( [#12187](https://github.com/remix-run/react-router/pull/12187))

### Changes by Package

- [`react-router`](https://github.com/remix-run/react-router/blob/react-router%407.0.0/packages/react-router/CHANGELOG.md#700)
- [`@react-router/architect`](https://github.com/remix-run/react-router/blob/react-router%407.0.0/packages/react-router-architect/CHANGELOG.md#700)
- [`@react-router/cloudflare`](https://github.com/remix-run/react-router/blob/react-router%407.0.0/packages/react-router-cloudflare/CHANGELOG.md#700)
- [`@react-router/dev`](https://github.com/remix-run/react-router/blob/react-router%407.0.0/packages/react-router-dev/CHANGELOG.md#700)
- [`@react-router/express`](https://github.com/remix-run/react-router/blob/react-router%407.0.0/packages/react-router-express/CHANGELOG.md#700)
- [`@react-router/fs-routes`](https://github.com/remix-run/react-router/blob/react-router%407.0.0/packages/react-router-fs-routes/CHANGELOG.md#700)
- [`@react-router/node`](https://github.com/remix-run/react-router/blob/react-router%407.0.0/packages/react-router-node/CHANGELOG.md#700)
- [`@react-router/remix-config-routes-adapter`](https://github.com/remix-run/react-router/blob/react-router%407.0.0/packages/react-router-remix-config-routes-adapter/CHANGELOG.md#700)
- [`@react-router/serve`](https://github.com/remix-run/react-router/blob/react-router%407.0.0/packages/react-router-serve/CHANGELOG.md#700)

**Full Changelog**: [`v6.28.0...v7.0.0`](https://github.com/remix-run/react-router/compare/react-router@6.28.0...react-router@7.0.0)

# React Router v6 Releases

## v6.30.0

Date: 2025-02-27

### Minor Changes

- Add `fetcherKey` as a parameter to `patchRoutesOnNavigation` ( [#13109](https://github.com/remix-run/react-router/pull/13109))

### Patch Changes

- Fix regression introduced in `6.29.0` via [#12169](https://github.com/remix-run/react-router/pull/12169) that caused issues navigating to hash routes inside splat routes for applications using Lazy Route Discovery ( `patchRoutesOnNavigation`) ( [#13108](https://github.com/remix-run/react-router/pull/13108))

**Full Changelog**: [`v6.29.0...v6.30.0`](https://github.com/remix-run/react-router/compare/react-router@6.29.0...react-router@6.30.0)

## v6.29.0

Date: 2025-01-30

### Minor Changes

- Provide the request `signal` as a parameter to `patchRoutesOnNavigation` ( [#12900](https://github.com/remix-run/react-router/pull/12900))

  - This can be used to abort any manifest fetches if the in-flight navigation/fetcher is aborted

### Patch Changes

- Do not log v7 deprecation warnings in production builds ( [#12794](https://github.com/remix-run/react-router/pull/12794))
- Properly bubble headers when throwing a `data()` result ( [#12845](https://github.com/remix-run/react-router/pull/12845))
- Optimize route matching by skipping redundant `matchRoutes` calls when possible ( [#12169](https://github.com/remix-run/react-router/pull/12169))
- Strip search parameters from `patchRoutesOnNavigation` `path` param for fetcher calls ( [#12899](https://github.com/remix-run/react-router/pull/12899))

**Full Changelog**: [`v6.28.2...v6.29.0`](https://github.com/remix-run/react-router/compare/react-router@6.28.2...react-router@6.29.0)

## v6.28.2

Date: 2025-01-16

### Patch Changes

- Fix manual fetcher `key` usage when not opted into `future.v7_fetcherPersist` ( [#12674](https://github.com/remix-run/react-router/pull/12674))
- Fix issue with fetcher data cleanup in the data layer on fetcher unmount ( [#12674](https://github.com/remix-run/react-router/pull/12674))

**Full Changelog**: [`v6.28.1...v6.28.2`](https://github.com/remix-run/react-router/compare/react-router@6.28.1...react-router@6.28.2)

## v6.28.1

Date: 2024-12-20

### Patch Changes

- Allow users to opt out of v7 deprecation warnings by setting flags to `false` ( [#12441](https://github.com/remix-run/react-router/pull/12441))

**Full Changelog**: [`v6.28.0...v6.28.1`](https://github.com/remix-run/react-router/compare/react-router@6.28.0...react-router@6.28.1)

## v6.28.0

Date: 2024-11-06

### What's Changed

- In preparation for v7 we've added deprecation warnings for any future flags that you have not yet opted into. Please use the flags to better prepare for eventually upgrading to v7.

### Minor Changes

- Log deprecation warnings for v7 flags ( [#11750](https://github.com/remix-run/react-router/pull/11750))

  - Add deprecation warnings to `json`/ `defer` in favor of returning raw objects

    - These methods will be removed in React Router v7

### Patch Changes

- Update JSDoc URLs for new website structure (add /v6/ segment) ( [#12141](https://github.com/remix-run/react-router/pull/12141))

**Full Changelog**: [`v6.27.0...v6.28.0`](https://github.com/remix-run/react-router/compare/react-router@6.27.0...react-router@6.28.0)

## v6.27.0

Date: 2024-10-11

### What's Changed

#### Stabilized APIs

This release stabilizes a handful of "unstable" APIs in preparation for the [pending](https://x.com/remix_run/status/1841926034868077009) React Router v7 release (see [these](https://remix.run/blog/merging-remix-and-react-router) [posts](https://remix.run/blog/incremental-path-to-react-19) for more info):

- `unstable_dataStrategy` → `dataStrategy` ( `createBrowserRouter` and friends) ( [Docs](https://reactrouter.com/v6/routers/create-browser-router#optsdatastrategy))
- `unstable_patchRoutesOnNavigation` → `patchRoutesOnNavigation` ( `createBrowserRouter` and friends) ( [Docs](https://reactrouter.com/v6/routers/create-browser-router#optspatchroutesonnavigation))
- `unstable_flushSync` → `flushSync` ( `useSubmit`, `fetcher.load`, `fetcher.submit`) ( [Docs](https://reactrouter.com/v6/hooks/use-submit#optionsflushsync))
- `unstable_viewTransition` → `viewTransition` ( `<Link>`, `<Form>`, `useNavigate`, `useSubmit`) ( [Docs](https://reactrouter.com/v6/components/link#viewtransition))

### Minor Changes

- Stabilize the `unstable_flushSync` option for navigations and fetchers ( [#11989](https://github.com/remix-run/react-router/pull/11989))
- Stabilize the `unstable_viewTransition` option for navigations and the corresponding `unstable_useViewTransitionState` hook ( [#11989](https://github.com/remix-run/react-router/pull/11989))
- Stabilize `unstable_dataStrategy` ( [#11974](https://github.com/remix-run/react-router/pull/11974))
- Stabilize `unstable_patchRoutesOnNavigation` ( [#11973](https://github.com/remix-run/react-router/pull/11973))

  - Add new `PatchRoutesOnNavigationFunctionArgs` type for convenience ( [#11967](https://github.com/remix-run/react-router/pull/11967))

### Patch Changes

- Fix bug when submitting to the current contextual route (parent route with an index child) when an `?index` param already exists from a prior submission ( [#12003](https://github.com/remix-run/react-router/pull/12003))
- Fix `useFormAction` bug - when removing `?index` param it would not keep other non-Remix `index` params ( [#12003](https://github.com/remix-run/react-router/pull/12003))
- Fix bug with fetchers not persisting `preventScrollReset` through redirects during concurrent fetches ( [#11999](https://github.com/remix-run/react-router/pull/11999))
- Avoid unnecessary `console.error` on fetcher abort due to back-to-back revalidation calls ( [#12050](https://github.com/remix-run/react-router/pull/12050))
- Fix bugs with `partialHydration` when hydrating with errors ( [#12070](https://github.com/remix-run/react-router/pull/12070))
- Remove internal cache to fix issues with interrupted `patchRoutesOnNavigation` calls ( [#12055](https://github.com/remix-run/react-router/pull/12055))

  - ⚠️ This may be a breaking change if you were relying on this behavior in the `unstable_` API
  - We used to cache in-progress calls to `patchRoutesOnNavigation` internally so that multiple navigations with the same start/end would only execute the function once and use the same promise
  - However, this approach was at odds with `patch` short circuiting if a navigation was interrupted (and the `request.signal` aborted) since the first invocation's `patch` would no-op
  - This cache also made some assumptions as to what a valid cache key might be - and is oblivious to any other application-state changes that may have occurred
  - So, the cache has been removed because in _most_ cases, repeated calls to something like `import()` for async routes will already be cached automatically - and if not it's easy enough for users to implement this cache in userland
- Remove internal `discoveredRoutes` FIFO queue from `unstable_patchRoutesOnNavigation` ( [#11977](https://github.com/remix-run/react-router/pull/11977))

  - ⚠️ This may be a breaking change if you were relying on this behavior in the `unstable_` API
  - This was originally implemented as an optimization but it proved to be a bit too limiting
  - If you need this optimization you can implement your own cache inside `patchRoutesOnNavigation`
- Fix types for `RouteObject` within `PatchRoutesOnNavigationFunction`'s `patch` method so it doesn't expect agnostic route objects passed to `patch` ( [#11967](https://github.com/remix-run/react-router/pull/11967))
- Expose errors thrown from `patchRoutesOnNavigation` directly to `useRouteError` instead of wrapping them in a 400 `ErrorResponse` instance ( [#12111](https://github.com/remix-run/react-router/pull/12111))

**Full Changelog**: [`v6.26.2...v6.27.0`](https://github.com/remix-run/react-router/compare/react-router@6.26.2...react-router@6.27.0)

## v6.26.2

Date: 2024-09-09

### Patch Changes

- Update the `unstable_dataStrategy` API to allow for more advanced implementations ( [#11943](https://github.com/remix-run/react-router/pull/11943))

  - ⚠️ If you have already adopted `unstable_dataStrategy`, please review carefully as this includes breaking changes to this API
  - Rename `unstable_HandlerResult` to `unstable_DataStrategyResult`
  - Change the return signature of `unstable_dataStrategy` from a parallel array of `unstable_DataStrategyResult[]` (parallel to `matches`) to a key/value object of `routeId => unstable_DataStrategyResult`
    - This allows more advanced control over revalidation behavior because you can opt-into or out-of revalidating data that may not have been revalidated by default (via `match.shouldLoad`)
  - You should now return/throw a result from your `handlerOverride` instead of returning a `DataStrategyResult`
    - The return value (or thrown error) from your `handlerOverride` will be wrapped up into a `DataStrategyResult` and returned fromm `match.resolve`
    - Therefore, if you are aggregating the results of `match.resolve()` into a final results object you should not need to think about the `DataStrategyResult` type
    - If you are manually filling your results object from within your `handlerOverride`, then you will need to assign a `DataStrategyResult` as the value so React Router knows if it's a successful execution or an error (see examples in the documentation for details)
  - Added a new `fetcherKey` parameter to `unstable_dataStrategy` to allow differentiation from navigational and fetcher calls
- Preserve opted-in view transitions through redirects ( [#11925](https://github.com/remix-run/react-router/pull/11925))
- Preserve pending view transitions through a router revalidation call ( [#11917](https://github.com/remix-run/react-router/pull/11917))
- Fix blocker usage when `blocker.proceed` is called quickly/synchronously ( [#11930](https://github.com/remix-run/react-router/pull/11930))

**Full Changelog**: [`v6.26.1...v6.26.2`](https://github.com/remix-run/react-router/compare/react-router@6.26.1...react-router@6.26.2)

## v6.26.1

Date: 2024-08-15

### Patch Changes

- Rename `unstable_patchRoutesOnMiss` to `unstable_patchRoutesOnNavigation` to match new behavior ( [#11888](https://github.com/remix-run/react-router/pull/11888))
- Update `unstable_patchRoutesOnNavigation` logic so that we call the method when we match routes with dynamic param or splat segments in case there exists a higher-scoring static route that we've not yet discovered ( [#11883](https://github.com/remix-run/react-router/pull/11883))

  - We also now leverage an internal FIFO queue of previous paths we've already called `unstable_patchRoutesOnNavigation` against so that we don't re-call on subsequent navigations to the same path

**Full Changelog**: [`v6.26.0...v6.26.1`](https://github.com/remix-run/react-router/compare/react-router@6.26.0...react-router@6.26.1)

## v6.26.0

Date: 2024-08-01

### Minor Changes

- Add a new `replace(url, init?)` alternative to `redirect(url, init?)` that performs a `history.replaceState` instead of a `history.pushState` on client-side navigation redirects ( [#11811](https://github.com/remix-run/react-router/pull/11811))
- Add a new `unstable_data()` API for usage with Remix Single Fetch ( [#11836](https://github.com/remix-run/react-router/pull/11836))

  - This API is not intended for direct usage in React Router SPA applications
  - It is primarily intended for usage with `createStaticHandler.query()` to allow loaders/actions to return arbitrary data along with custom `status`/ `headers` without forcing the serialization of data into a `Response` instance
  - This allows for more advanced serialization tactics via `unstable_dataStrategy` such as serializing via `turbo-stream` in Remix Single Fetch
  - ⚠️ This removes the `status` field from `HandlerResult`
    - If you need to return a specific `status` from `unstable_dataStrategy` you should instead do so via `unstable_data()`

### Patch Changes

- Fix internal cleanup of interrupted fetchers to avoid invalid revalidations on navigations ( [#11839](https://github.com/remix-run/react-router/pull/11839))
- Fix initial hydration behavior when using `future.v7_partialHydration` along with `unstable_patchRoutesOnMiss` ( [#11838](https://github.com/remix-run/react-router/pull/11838))

  - During initial hydration, `router.state.matches` will now include any partial matches so that we can render ancestor `HydrateFallback` components

**Full Changelog**: [`v6.25.1...v6.26.0`](https://github.com/remix-run/react-router/compare/react-router@6.25.1...react-router@6.26.0)

## v6.25.1

Date: 2024-07-17

### Patch Changes

- Memoize some `RouterProvider` internals to reduce unnecessary re-renders ( [#11803](https://github.com/remix-run/react-router/pull/11803))

**Full Changelog**: [`v6.25.0...v6.25.1`](https://github.com/remix-run/react-router/compare/react-router@6.25.0...react-router@6.25.1)

## v6.25.0

Date: 2024-07-16

### What's Changed

#### Stabilized `v7_skipActionErrorRevalidation`

This release stabilizes the `future.unstable_skipActionErrorRevalidation` flag into [`future.v7_skipActionErrorRevalidation`](https://reactrouter.com/v6/upgrading/future#v7_skipactionstatusrevalidation) in preparation for the upcoming React Router v7 release.

- When this flag is enabled, actions that return/throw a `4xx/5xx` `Response` will not trigger a revalidation by default
- This also stabilizes `shouldRevalidate`'s `unstable_actionStatus` parameter to `actionStatus`

### Minor Changes

- Stabilize `future.unstable_skipActionErrorRevalidation` as `future.v7_skipActionErrorRevalidation` ( [#11769](https://github.com/remix-run/react-router/pull/11769))

### Patch Changes

- Fix regression and properly decode paths inside `useMatch` so matches/params reflect decoded params ( [#11789](https://github.com/remix-run/react-router/pull/11789))
- Fix bubbling of errors thrown from `unstable_patchRoutesOnMiss` ( [#11786](https://github.com/remix-run/react-router/pull/11786))
- Fix hydration in SSR apps using `unstable_patchRoutesOnMiss` that matched a splat route on the server ( [#11790](https://github.com/remix-run/react-router/pull/11790))

**Full Changelog**: [`v6.24.1...v6.25.0`](https://github.com/remix-run/react-router/compare/react-router@6.24.1...react-router@6.25.0)

## v6.24.1

Date: 2024-07-03

### Patch Changes

- Remove `polyfill.io` reference from warning message because the domain was sold and has since been determined to serve malware ( [#11741](https://github.com/remix-run/react-router/pull/11741))

  - See [https://sansec.io/research/polyfill-supply-chain-attack](https://sansec.io/research/polyfill-supply-chain-attack)
- Export `NavLinkRenderProps` type for easier typing of custom `NavLink` callback ( [#11553](https://github.com/remix-run/react-router/pull/11553))
- When using `future.v7_relativeSplatPath`, properly resolve relative paths in splat routes that are children of pathless routes ( [#11633](https://github.com/remix-run/react-router/pull/11633))
- Fog of War (unstable): Trigger a new `router.routes` identity/reflow during route patching ( [#11740](https://github.com/remix-run/react-router/pull/11740))
- Fog of War (unstable): Fix initial matching when a splat route matches ( [#11759](https://github.com/remix-run/react-router/pull/11759))

**Full Changelog**: [`v6.24.0...v6.24.1`](https://github.com/remix-run/react-router/compare/react-router@6.24.0...react-router@6.24.1)

## v6.24.0

Date: 2024-06-24

### What's Changed

#### Lazy Route Discovery (a.k.a. "Fog of War")

We're really excited to release our new API for "Lazy Route Discovery" in `v6.24.0`! For some background information, please check out the original [RFC](https://github.com/remix-run/react-router/discussions/11113). The **tl;dr;** is that ever since we introduced the Data APIs in v6.4 via `<RouterProvider>`, we've been a little bummed that one of the tradeoffs was the lack of a compelling code-splitting story mirroring what we had in the `<BrowserRouter>`/ `<Routes>` apps. We took a baby-step towards improving that story with `route.lazy` in `v6.9.0`, but with `v6.24.0` we've gone the rest of the way.

With "Fog of War", you can now load portions of the route tree lazily via the new `unstable_patchRoutesOnMiss` option passed to `createBrowserRouter` (and it's memory/hash counterparts). This gives you a way to hook into spots where React Router is unable to match a given path and patch new routes into the route tree during the navigation (or fetcher call).

Here's a very small example, but please refer to the [documentation](https://reactrouter.com/v6/routers/create-browser-router#optsunstable_patchroutesonmiss) for more information and use cases:

```
const router = createBrowserRouter(
  [\
    {\
      id: "root",\
      path: "/",\
      Component: RootComponent,\
    },\
  ],
  {
    async unstable_patchRoutesOnMiss({ path, patch }) {
      if (path === "/a") {
        // Load the `a` route (`{ path: 'a', Component: A }`)
        let route = await getARoute();
        // Patch the `a` route in as a new child of the `root` route
        patch("root", [route]);
      }
    },
  }
);

```

Copy code to clipboard

### Minor Changes

- Add support for Lazy Route Discovery (a.k.a. "Fog of War") ( [#11626](https://github.com/remix-run/react-router/pull/11626))

### Patch Changes

- Fix `fetcher.submit` types - remove incorrect `navigate`/ `fetcherKey`/ `unstable_viewTransition` options because they are only relevant for `useSubmit` ( [#11631](https://github.com/remix-run/react-router/pull/11631))
- Allow falsy `location.state` values passed to `<StaticRouter>` ( [#11495](https://github.com/remix-run/react-router/pull/11495))

**Full Changelog**: [`v6.23.1...v6.24.0`](https://github.com/remix-run/react-router/compare/react-router@6.23.1...react-router@6.24.0)

## v6.23.1

Date: 2024-05-10

### Patch Changes

- Allow `undefined` to be resolved through `<Await>` ( [#11513](https://github.com/remix-run/react-router/pull/11513))
- Add defensive `document` check when checking for `document.startViewTransition` availability ( [#11544](https://github.com/remix-run/react-router/pull/11544))
- Change the `react-router-dom/server` import back to `react-router-dom` instead of `index.ts` ( [#11514](https://github.com/remix-run/react-router/pull/11514))
- `@remix-run/router` \- Support `unstable_dataStrategy` on `staticHandler.queryRoute` ( [#11515](https://github.com/remix-run/react-router/pull/11515))

**Full Changelog**: [`v6.23.0...v6.23.1`](https://github.com/remix-run/react-router/compare/react-router@6.23.0...react-router@6.23.1)

## v6.23.0

Date: 2024-04-23

### What's Changed

#### Data Strategy (unstable)

The new `unstable_dataStrategy` API is a low-level API designed for advanced use-cases where you need to take control over the data strategy for your `loader`/ `action` functions. The default implementation is today's behavior, to fetch all loaders in parallel, but this option allows users to implement more advanced data flows including Remix ["Single Fetch"](https://remix.run/docs/guides/single-fetch), user-land middleware/context APIs, automatic loader caching, and more. Please see the [docs](https://reactrouter.com/v6/routers/create-browser-router#unstable_datastrategy) for more information.

**Note:** This is a low-level API intended for advanced use-cases. This overrides React Router's internal handling of `loader`/ `action` execution, and if done incorrectly will break your app code. Please use with caution and perform the appropriate testing.

#### Skip Action Error Revalidation (unstable)

Currently, all active `loader`'s revalidate after any `action` submission, regardless of the `action` result. However, in the majority of cases a `4xx`/ `5xx` response from an `action` means that no data was actually changed and the revalidation is unnecessary. We've introduced a new `future.unstable_skipActionErrorRevalidation` flag that changes the behavior here, and we plan to make this the default in future version of React Router.

With this flag enabled, `action`'s that return/throw a `4xx`/ `5xx` response status will no longer automatically revalidate. If you need to revalidate after a `4xx`/ `5xx` result with this flag enabled, you can still do that via returning `true` from `shouldRevalidate` \- which now also receives a new `unstable_actionStatus` argument alongside `actionResult` so you can make decision based on the status of the `action` response without having to encode it into the action data.

### Minor Changes

- Add a new `unstable_dataStrategy` configuration option ( [#11098](https://github.com/remix-run/react-router/pull/11098), [#11377](https://github.com/remix-run/react-router/pull/11377))
- `@remix-run/router` \- Add a new `future.unstable_skipActionRevalidation` future flag ( [#11098](https://github.com/remix-run/react-router/pull/11098))
- `@remix-run/router` \- SSR: Added a new `skipLoaderErrorBubbling` options to the `staticHandler.query` method to disable error bubbling by the static handler for use in Remix's Single Fetch implementation ( [#11098](https://github.com/remix-run/react-router/pull/11098), ( [#11377](https://github.com/remix-run/react-router/pull/11377)))

**Full Changelog**: [`v6.22.3...v6.23.0`](https://github.com/remix-run/react-router/compare/react-router@6.22.3...react-router@6.23.0)

## v6.22.3

Date: 2024-03-07

### Patch Changes

- Fix a `future.v7_partialHydration` bug that would re-run loaders below the boundary on hydration if SSR loader errors bubbled to a parent boundary ( [#11324](https://github.com/remix-run/react-router/pull/11324))
- Fix a `future.v7_partialHydration` bug that would consider the router uninitialized if a route did not have a loader ( [#11325](https://github.com/remix-run/react-router/pull/11325))

**Full Changelog**: [`v6.22.2...v6.22.3`](https://github.com/remix-run/react-router/compare/react-router@6.22.2...react-router@6.22.3)

## v6.22.2

Date: 2024-02-28

### Patch Changes

- Preserve hydrated errors during partial hydration runs ( [#11305](https://github.com/remix-run/react-router/pull/11305))

**Full Changelog**: [`v6.22.1...v6.22.2`](https://github.com/remix-run/react-router/compare/react-router@6.22.1...react-router@6.22.2)

## v6.22.1

Date: 2024-02-16

### Patch Changes

- Fix encoding/decoding issues with pre-encoded dynamic parameter values ( [#11199](https://github.com/remix-run/react-router/pull/11199))

**Full Changelog**: [`v6.22.0...v6.22.1`](https://github.com/remix-run/react-router/compare/react-router@6.22.0...react-router@6.22.1)

## v6.22.0

Date: 2024-02-01

### What's Changed

#### Core Web Vitals Technology Report Flag

In 2021, the HTTP Archive launched the [Core Web Vitals Technology Report dashboard](https://discuss.httparchive.org/t/new-dashboard-the-core-web-vitals-technology-report/2178):

> By combining the powers of real-user experiences in the Chrome UX Report 26 (CrUX) dataset with web technology detections in HTTP Archive 30, we can get a glimpse into how architectural decisions like choices of CMS platform or JavaScript framework play a role in sites’ CWV performance.

They use a tool called [`wappalyzer`](https://github.com/HTTPArchive/wappalyzer) to identify what technologies a given website is using by looking for certain scripts, global JS variables, or other identifying characteristics. For example, for Remix applications, they [look for the global `__remixContext`](https://github.com/HTTPArchive/wappalyzer/blob/c2a24ee7c2d07bf9c521f02584ae2dcf603ac0b7/src/technologies/r.json#L1328) variable to identify that a website is using Remix.

It was brought to our attention that React Router was unable to be reliably identified because there are no identifying global aspects. They are currently [looking for external scripts with `react-router`](https://github.com/HTTPArchive/wappalyzer/blob/c2a24ee7c2d07bf9c521f02584ae2dcf603ac0b7/src/technologies/r.json#L637) in the name. This will identify sites using React Router from a CDN such as `unpkg` \- but it will miss the **vast** majority of sites that are installing React Router from the npm registry and bundling it into their JS files. This results in [drastically under-reporting](https://lookerstudio.google.com/s/pixHkNmGbN4) the usage of React Router on the web.

Starting with version `6.22.0`, sites using `react-router-dom` will begin adding a `window.__reactRouterVersion` variable that will be set to a string value of the SemVer major version number (i.e., `window.__reactRouterVersion = "6";`) so that they can be properly identified.

### Minor Changes

- Include a `window.__reactRouterVersion` for CWV Report detection ( [#11222](https://github.com/remix-run/react-router/pull/11222))
- Add a `createStaticHandler` `future.v7_throwAbortReason` flag to throw `request.signal.reason` (defaults to a `DOMException`) when a request is aborted instead of an `Error` such as `new Error("query() call aborted: GET /path")` ( [#11104](https://github.com/remix-run/react-router/pull/11104))

  - Please note that `DOMException` was added in Node v17 so you will not get a `DOMException` on Node 16 and below.

### Patch Changes

- Respect the `ErrorResponse` status code if passed to `getStaticContextFormError` ( [#11213](https://github.com/remix-run/react-router/pull/11213))

**Full Changelog**: [`v6.21.3...v6.22.0`](https://github.com/remix-run/react-router/compare/react-router@6.21.3...react-router@6.22.0)

## v6.21.3

Date: 2024-01-18

### Patch Changes

- Fix `NavLink` `isPending` when a `basename` is used ( [#11195](https://github.com/remix-run/react-router/pull/11195))
- Remove leftover `unstable_` prefix from `Blocker`/ `BlockerFunction` types ( [#11187](https://github.com/remix-run/react-router/pull/11187))

**Full Changelog**: [`v6.21.2...v6.21.3`](https://github.com/remix-run/react-router/compare/react-router@6.21.2...react-router@6.21.3)

## v6.21.2

Date: 2024-01-11

### Patch Changes

- Leverage `useId` for internal fetcher keys when available ( [#11166](https://github.com/remix-run/react-router/pull/11166))
- Fix bug where dashes were not picked up in dynamic parameter names ( [#11160](https://github.com/remix-run/react-router/pull/11160))
- Do not attempt to deserialize empty JSON responses ( [#11164](https://github.com/remix-run/react-router/pull/11164))

**Full Changelog**: [`v6.21.1...v6.21.2`](https://github.com/remix-run/react-router/compare/react-router@6.21.1...react-router@6.21.2)

## v6.21.1

Date: 2023-12-21

### Patch Changes

- Fix bug with `route.lazy` not working correctly on initial SPA load when `v7_partialHydration` is specified ( [#11121](https://github.com/remix-run/react-router/pull/11121))
- Fix bug preventing revalidation from occurring for persisted fetchers unmounted during the `submitting` phase ( [#11102](https://github.com/remix-run/react-router/pull/11102))
- De-dup relative path logic in `resolveTo` ( [#11097](https://github.com/remix-run/react-router/pull/11097))

**Full Changelog**: [`v6.21.0...v6.21.1`](https://github.com/remix-run/react-router/compare/react-router@6.21.0...react-router@6.21.1)

## v6.21.0

Date: 2023-12-13

### What's Changed

#### `future.v7_relativeSplatPath`

We fixed a splat route path-resolution bug in `6.19.0`, but later determined a large number of applications were relying on the buggy behavior, so we reverted the fix in `6.20.1` (see [#10983](https://github.com/remix-run/react-router/issues/10983), [#11052](https://github.com/remix-run/react-router/issues/11052), [#11078](https://github.com/remix-run/react-router/issues/11078)).

The buggy behavior is that the default behavior when resolving relative paths inside a splat route would _ignore_ any splat ( `*`) portion of the current route path. When the future flag is enabled, splat portions are included in relative path logic within splat routes.

For more information, please refer to the [`useResolvedPath` docs](https://reactrouter.com/v6/hooks/use-resolved-path#splat-paths) and/or the [detailed changelog entry](https://github.com/remix-run/react-router/blob/main/packages/react-router-dom/CHANGELOG.md#6210).

#### Partial Hydration

We added a new `future.v7_partialHydration` future flag for the `@remix-run/router` that enables partial hydration of a data router when Server-Side Rendering. This allows you to provide `hydrationData.loaderData` that has values for _some_ initially matched route loaders, but not all. When this flag is enabled, the router will call `loader` functions for routes that do not have hydration loader data during `router.initialize()`, and it will render down to the deepest provided `HydrateFallback` (up to the first route without hydration data) while it executes the unhydrated routes. ( [#11033](https://github.com/remix-run/react-router/pull/11033))

### Minor Changes

- Add a new `future.v7_relativeSplatPath` flag to implement a breaking bug fix to relative routing when inside a splat route. ( [#11087](https://github.com/remix-run/react-router/pull/11087))
- Add a new `future.v7_partialHydration` future flag that enables partial hydration of a data router when Server-Side Rendering ( [#11033](https://github.com/remix-run/react-router/pull/11033))

### Patch Changes

- Properly handle falsy error values in `ErrorBoundary`'s ( [#11071](https://github.com/remix-run/react-router/pull/11071))
- Catch and bubble errors thrown when trying to unwrap responses from `loader`/ `action` functions ( [#11061](https://github.com/remix-run/react-router/pull/11061))
- Fix `relative="path"` issue when rendering `Link`/ `NavLink` outside of matched routes ( [#11062](https://github.com/remix-run/react-router/pull/11062))

**Full Changelog**: [`v6.20.1...v6.21.0`](https://github.com/remix-run/react-router/compare/react-router@6.20.1...react-router@6.21.0)

## v6.20.1

Date: 2023-12-01

### Patch Changes

- Revert the `useResolvedPath` fix for splat routes due to a large number of applications that were relying on the buggy behavior (see [#11052](https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329)) ( [#11078](https://github.com/remix-run/react-router/pull/11078))

  - We plan to re-introduce this fix behind a future flag in the next minor version (see [this comment](https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329))
  - This fix was included in versions `6.19.0` and `6.20.0`. If you are upgrading from `6.18.0` or earlier, you would not have been impacted by this fix.

**Full Changelog**: [`v6.20.0...v6.20.1`](https://github.com/remix-run/react-router/compare/react-router@6.20.0...react-router@6.20.1)

## v6.20.0

Date: 2023-11-22

> \[!WARNING\]
> Please use version `6.20.1` or later instead of `6.20.0`. We discovered that a large number of apps were relying on buggy behavior that was fixed in this release ( [#11045](https://github.com/remix-run/react-router/pull/11045)). We reverted the fix in `6.20.1` and will be re-introducing it behind a future flag in a subsequent release. See [#11052](https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329) for more details.

### Minor Changes

- Export the `PathParam` type from the public API ( [#10719](https://github.com/remix-run/react-router/pull/10719))

### Patch Changes

- Do not revalidate unmounted fetchers when `v7_fetcherPersist` is enabled ( [#11044](https://github.com/remix-run/react-router/pull/11044))
- Fix bug with `resolveTo` path resolution in splat routes ( [#11045](https://github.com/remix-run/react-router/pull/11045))

  - This is a follow up to [#10983](https://github.com/remix-run/react-router/pull/10983) to handle the few other code paths using `getPathContributingMatches`
  - This removes the `UNSAFE_getPathContributingMatches` export from `@remix-run/router` since we no longer need this in the `react-router`/ `react-router-dom` layers

**Full Changelog**: [`v6.19.0...v6.20.0`](https://github.com/remix-run/react-router/compare/react-router@6.19.0...react-router@6.20.0)

## v6.19.0

Date: 2023-11-16

> \[!WARNING\]
> Please use version `6.20.1` or later instead of `6.19.0`. We discovered that a large number of apps were relying on buggy behavior that was fixed in this release ( [#10983](https://github.com/remix-run/react-router/pull/10983)). We reverted the fix in `6.20.1` and will be re-introducing it behind a future flag in a subsequent release. See [#11052](https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329) for more details.

### What's Changed

#### `unstable_flushSync` API

This release brings a new `unstable_flushSync` option to the imperative APIs ( `useSubmit`, `useNavigate`, `fetcher.submit`, `fetcher.load`) to let users opt-into synchronous DOM updates for pending/optimistic UI.

```
function handleClick() {
  submit(data, { flushSync: true });
  // Everything is flushed to the DOM so you can focus/scroll to your pending/optimistic UI
  setFocusAndOrScrollToNewlyAddedThing();
}

```

Copy code to clipboard

### Minor Changes

- Add `unstable_flushSync` option to `useNavigate`/ `useSubmit`/ `fetcher.load`/ `fetcher.submit` to opt-out of `React.startTransition` and into `ReactDOM.flushSync` for state updates ( [#11005](https://github.com/remix-run/react-router/pull/11005))
- Remove the `unstable_` prefix from the [`useBlocker`](https://reactrouter.com/v6/hooks/use-blocker) hook as it's been in use for enough time that we are confident in the API ( [#10991](https://github.com/remix-run/react-router/pull/10991))

  - We do not plan to remove the prefix from `unstable_usePrompt` due to differences in how browsers handle `window.confirm` that prevent React Router from guaranteeing consistent/correct behavior

### Patch Changes

- Fix `useActionData` so it returns proper contextual action data and not _any_ action data in the tree ( [#11023](https://github.com/remix-run/react-router/pull/11023))

- Fix bug in `useResolvedPath` that would cause `useResolvedPath(".")` in a splat route to lose the splat portion of the URL path. ( [#10983](https://github.com/remix-run/react-router/pull/10983))
  - ⚠️ This fixes a quite long-standing bug specifically for `"."` paths inside a splat route which incorrectly dropped the splat portion of the URL. If you are relative routing via `"."` inside a splat route in your application you should double check that your logic is not relying on this buggy behavior and update accordingly.
- Fix issue where a changing fetcher `key` in a `useFetcher` that remains mounted wasn't getting picked up ( [#11009](https://github.com/remix-run/react-router/pull/11009))

- Fix `useFormAction` which was incorrectly inheriting the `?index` query param from child route `action` submissions ( [#11025](https://github.com/remix-run/react-router/pull/11025))

- Fix `NavLink` `active` logic when `to` location has a trailing slash ( [#10734](https://github.com/remix-run/react-router/pull/10734))

- Fix types so `unstable_usePrompt` can accept a `BlockerFunction` in addition to a `boolean` ( [#10991](https://github.com/remix-run/react-router/pull/10991))

- Fix `relative="path"` bug where relative path calculations started from the full location pathname, instead of from the current contextual route pathname. ( [#11006](https://github.com/remix-run/react-router/pull/11006))



```
<Route path="/a">
    <Route path="/b" element={<Component />}>
      <Route path="/c" />
    </Route>
</Route>;

function Component() {
    return (
      <>
        {/* This is now correctly relative to /a/b, not /a/b/c */}
        <Link to=".." relative="path" />
        <Outlet />
      </>
    );
}

```

Copy code to clipboard


**Full Changelog**: [`6.18.0...6.19.0`](https://github.com/remix-run/react-router/compare/react-router@6.18.0...react-router@6.19.0)

## v6.18.0

Date: 2023-10-31

### What's Changed

#### New Fetcher APIs

Per this [RFC](https://github.com/remix-run/remix/discussions/7698), we've introduced some new APIs that give you more granular control over your fetcher behaviors.

- You may now specify your own fetcher identifier via `useFetcher({ key: string })`, which allows you to access the same fetcher instance from different components in your application without prop-drilling
- Fetcher keys are now exposed on the fetchers returned from `useFetchers` so that they can be looked up by `key`
- `Form` and `useSubmit` now support optional `navigate`/ `fetcherKey` props/params to allow kicking off a fetcher submission under the hood with an optionally user-specified `key`
  - `<Form method="post" navigate={false} fetcherKey="my-key">`
  - `submit(data, { method: "post", navigate: false, fetcherKey: "my-key" })`
  - Invoking a fetcher in this way is ephemeral and stateless
  - If you need to access the state of one of these fetchers, you will need to leverage `useFetchers()` or `useFetcher({ key })` to look it up elsewhere

#### Persistence Future Flag ( `future.v7_fetcherPersist`)

Per the same [RFC](https://github.com/remix-run/remix/discussions/7698) as above, we've introduced a new `future.v7_fetcherPersist` flag that allows you to opt-into the new fetcher persistence/cleanup behavior. Instead of being immediately cleaned up on unmount, fetchers will persist until they return to an `idle` state. This makes pending/optimistic UI _much_ easier in scenarios where the originating fetcher needs to unmount.

- This is sort of a long-standing bug fix as the `useFetchers()` API was always supposed to only reflect **in-flight** fetcher information for pending/optimistic UI -- it was not intended to reflect fetcher data or hang onto fetchers after they returned to an `idle` state
- Keep an eye out for the following specific behavioral changes when opting into this flag and check your app for compatibility:
  - Fetchers that complete _while still mounted_ will no longer appear in `useFetchers()` after completion - they served no purpose in there since you can access the data via `useFetcher().data`
  - Fetchers that previously unmounted _while in-flight_ will not be immediately aborted and will instead be cleaned up once they return to an `idle` state

    - They will remain exposed via `useFetchers` while in-flight so you can still access pending/optimistic data after unmount
    - If a fetcher is no longer mounted when it completes, then it's result will not be post processed - e.g., redirects will not be followed and errors will not bubble up in the UI
    - However, if a fetcher was re-mounted elsewhere in the tree using the same `key`, then it's result will be processed, even if the originating fetcher was unmounted

### Minor Changes

- Add fetcher `key` APIs and `navigate=false` options ( [#10960](https://github.com/remix-run/react-router/pull/10960))
- Add `future.v7_fetcherPersist` flag ( [#10962](https://github.com/remix-run/react-router/pull/10962))
- Add support for optional path segments in `matchPath` ( [#10768](https://github.com/remix-run/react-router/pull/10768))

### Patch Changes

- Fix the `future` prop on `BrowserRouter`, `HashRouter` and `MemoryRouter` so that it accepts a `Partial<FutureConfig>` instead of requiring all flags to be included ( [#10962](https://github.com/remix-run/react-router/pull/10962))
- Fix `router.getFetcher`/ `router.deleteFetcher` type definitions which incorrectly specified `key` as an optional parameter ( [#10960](https://github.com/remix-run/react-router/pull/10960))

**Full Changelog**: [`6.17.0...6.18.0`](https://github.com/remix-run/react-router/compare/react-router@6.17.0...react-router@6.18.0)

## v6.17.0

Date: 2023-10-16

### What's Changed

#### View Transitions 🚀

We're excited to release experimental support for the [View Transitions API](https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition) in React Router! You can now trigger navigational DOM updates to be wrapped in `document.startViewTransition` to enable CSS animated transitions on SPA navigations in your application.

The simplest approach to enabling a View Transition in your React Router app is via the new [`<Link unstable_viewTransition>`](https://reactrouter.com/v6/components/link#unstable_viewtransition) prop. This will cause the navigation DOM update to be wrapped in `document.startViewTransition` which will enable transitions for the DOM update. Without any additional CSS styles, you'll get a basic cross-fade animation for your page.

If you need to apply more fine-grained styles for your animations, you can leverage the [`unstable_useViewTransitionState`](https://reactrouter.com/v6/hooks/use-view-transition-state) hook which will tell you when a transition is in progress and you can use that to apply classes or styles:

```
function ImageLink(to, src, alt) {
  const isTransitioning = unstable_useViewTransitionState(to);
  return (
    <Link to={to} unstable_viewTransition>
      <img
        src={src}
        alt={alt}
        style={{
          viewTransitionName: isTransitioning ? "image-expand" : "",
        }}
      />
    </Link>
  );
}

```

Copy code to clipboard

You can also use the [`<NavLink unstable_viewTransition>`](https://reactrouter.com/v6/components/nav-link#unstable_viewtransition) shorthand which will manage the hook usage for you and automatically add a `transitioning` class to the `<a>` during the transition:

```
a.transitioning img {
  view-transition-name: "image-expand";
}

```

Copy code to clipboard

```
<NavLink to={to} unstable_viewTransition>
  <img src={src} alt={alt} />
</NavLink>

```

Copy code to clipboard

For an example usage of View Transitions, check out [our fork](https://github.com/brophdawg11/react-router-records) of the awesome [Astro Records](https://github.com/Charca/astro-records) demo.

For more information on using the View Transitions API, please refer to the [Smooth and simple transitions with the View Transitions API](https://developer.chrome.com/docs/web-platform/view-transitions/) guide from the Google Chrome team.

### Minor Changes

- Add support for view transitions ( [#10916](https://github.com/remix-run/react-router/pull/10916))

### Patch Changes

- Log a warning and fail gracefully in `ScrollRestoration` when `sessionStorage` is unavailable ( [#10848](https://github.com/remix-run/react-router/pull/10848))
- Fix `RouterProvider` `future` prop type to be a `Partial<FutureConfig>` so that not all flags must be specified ( [#10900](https://github.com/remix-run/react-router/pull/10900))
- Allow 404 detection to leverage root route error boundary if path contains a URL segment ( [#10852](https://github.com/remix-run/react-router/pull/10852))
- Fix `ErrorResponse` type to avoid leaking internal field ( [#10876](https://github.com/remix-run/react-router/pull/10876))

**Full Changelog**: [`6.16.0...6.17.0`](https://github.com/remix-run/react-router/compare/react-router@6.16.0...react-router@6.17.0)

## v6.16.0

Date: 2023-09-13

### Minor Changes

- In order to move towards stricter TypeScript support in the future, we're aiming to replace current usages of `any` with `unknown` on exposed typings for user-provided data. To do this in Remix v2 without introducing breaking changes in React Router v6, we have added generics to a number of shared types. These continue to default to `any` in React Router and are overridden with `unknown` in Remix. In React Router v7 we plan to move these to `unknown` as a breaking change. ( [#10843](https://github.com/remix-run/react-router/pull/10843))

  - `Location` now accepts a generic for the `location.state` value
  - `ActionFunctionArgs`/ `ActionFunction`/ `LoaderFunctionArgs`/ `LoaderFunction` now accept a generic for the `context` parameter (only used in SSR usages via `createStaticHandler`)
  - The return type of `useMatches` (now exported as `UIMatch`) accepts generics for `match.data` and `match.handle` \- both of which were already set to `unknown`
- Move the `@private` class export `ErrorResponse` to an `UNSAFE_ErrorResponseImpl` export since it is an implementation detail and there should be no construction of `ErrorResponse` instances in userland. This frees us up to export a `type ErrorResponse` which correlates to an instance of the class via `InstanceType`. Userland code should only ever be using `ErrorResponse` as a type and should be type-narrowing via `isRouteErrorResponse`. ( [#10811](https://github.com/remix-run/react-router/pull/10811))
- Export `ShouldRevalidateFunctionArgs` interface ( [#10797](https://github.com/remix-run/react-router/pull/10797))
- Removed private/internal APIs only required for the Remix v1 backwards compatibility layer and no longer needed in Remix v2 ( `_isFetchActionRedirect`, `_hasFetcherDoneAnything`) ( [#10715](https://github.com/remix-run/react-router/pull/10715))

### Patch Changes

- Properly encode rendered URIs in server rendering to avoid hydration errors ( [#10769](https://github.com/remix-run/react-router/pull/10769))
- Add method/url to error message on aborted `query`/ `queryRoute` calls ( [#10793](https://github.com/remix-run/react-router/pull/10793))
- Fix a race-condition with loader/action-thrown errors on `route.lazy` routes ( [#10778](https://github.com/remix-run/react-router/pull/10778))
- Fix type for `actionResult` on the arguments object passed to `shouldRevalidate` ( [#10779](https://github.com/remix-run/react-router/pull/10779))

**Full Changelog**: [`v6.15.0...v6.16.0`](https://github.com/remix-run/react-router/compare/react-router@6.15.0...react-router@6.16.0)

## v6.15.0

Date: 2023-08-10

### Minor Changes

- Add's a new `redirectDocument()` function which allows users to specify that a redirect from a `loader`/ `action` should trigger a document reload (via `window.location`) instead of attempting to navigate to the redirected location via React Router ( [#10705](https://github.com/remix-run/react-router/pull/10705))

### Patch Changes

- Ensure `useRevalidator` is referentially stable across re-renders if revalidations are not actively occurring ( [#10707](https://github.com/remix-run/react-router/pull/10707))
- Ensure hash history always includes a leading slash on hash pathnames ( [#10753](https://github.com/remix-run/react-router/pull/10753))
- Fixes an edge-case affecting web extensions in Firefox that use `URLSearchParams` and the `useSearchParams` hook ( [#10620](https://github.com/remix-run/react-router/pull/10620))
- Reorder effects in `unstable_usePrompt` to avoid throwing an exception if the prompt is unblocked and a navigation is performed synchronously ( [#10687](https://github.com/remix-run/react-router/pull/10687), [#10718](https://github.com/remix-run/react-router/pull/10718))
- SSR: Do not include hash in `useFormAction()` for unspecified actions since it cannot be determined on the server and causes hydration issues ( [#10758](https://github.com/remix-run/react-router/pull/10758))
- SSR: Fix an issue in `queryRoute` that was not always identifying thrown `Response` instances ( [#10717](https://github.com/remix-run/react-router/pull/10717))
- `react-router-native`: Update `@ungap/url-search-params` dependency from `^0.1.4` to `^0.2.2` ( [#10590](https://github.com/remix-run/react-router/pull/10590))

**Full Changelog**: [`v6.14.2...v6.15.0`](https://github.com/remix-run/react-router/compare/react-router@6.14.2...react-router@6.15.0)

## v6.14.2

Date: 2023-07-17

### Patch Changes

- Add missing `<Form state>` prop to populate `history.state` on submission navigations ( [#10630](https://github.com/remix-run/react-router/pull/10630))
- Trigger an error if a `defer` promise resolves/rejects with `undefined` in order to match the behavior of loaders and actions which must return a value or `null` ( [#10690](https://github.com/remix-run/react-router/pull/10690))
- Properly handle fetcher redirects interrupted by normal navigations ( [#10674](https://github.com/remix-run/react-router/pull/10674))
- Initial-load fetchers should not automatically revalidate on GET navigations ( [#10688](https://github.com/remix-run/react-router/pull/10688))
- Properly decode element id when emulating hash scrolling via `<ScrollRestoration>` ( [#10682](https://github.com/remix-run/react-router/pull/10682))
- Typescript: Enhance the return type of `Route.lazy` to prohibit returning an empty object ( [#10634](https://github.com/remix-run/react-router/pull/10634))
- SSR: Support proper hydration of `Error` subclasses such as `ReferenceError`/ `TypeError` ( [#10633](https://github.com/remix-run/react-router/pull/10633))

**Full Changelog**: [`v6.14.1...v6.14.2`](https://github.com/remix-run/react-router/compare/react-router@6.14.1...react-router@6.14.2)

## v6.14.1

Date: 2023-06-30

### Patch Changes

- Fix loop in `unstable_useBlocker` when used with an unstable blocker function ( [#10652](https://github.com/remix-run/react-router/pull/10652))
- Fix issues with reused blockers on subsequent navigations ( [#10656](https://github.com/remix-run/react-router/pull/10656))
- Updated dependencies:
  - `@remix-run/router@1.7.1`

**Full Changelog**: [`v6.14.0...v6.14.1`](https://github.com/remix-run/react-router/compare/react-router@6.14.0...react-router@6.14.1)

## v6.14.0

Date: 2023-06-23

### What's Changed

#### JSON/Text Submissions

`6.14.0` adds support for JSON and Text submissions via `useSubmit`/ `fetcher.submit` since it's not always convenient to have to serialize into `FormData` if you're working in a client-side SPA. To opt-into these encodings you just need to specify the proper `formEncType`:

**Opt-into `application/json` encoding:**

```
function Component() {
  let navigation = useNavigation();
  let submit = useSubmit();
  submit({ key: "value" }, { method: "post", encType: "application/json" });
  // navigation.formEncType => "application/json"
  // navigation.json        => { key: "value" }
}

async function action({ request }) {
  // request.headers.get("Content-Type") => "application/json"
  // await request.json()                => { key: "value" }
}

```

Copy code to clipboard

**Opt-into `text/plain` encoding:**

```
function Component() {
  let navigation = useNavigation();
  let submit = useSubmit();
  submit("Text submission", { method: "post", encType: "text/plain" });
  // navigation.formEncType => "text/plain"
  // navigation.text        => "Text submission"
}

async function action({ request }) {
  // request.headers.get("Content-Type") => "text/plain"
  // await request.text()                => "Text submission"
}

```

Copy code to clipboard

**⚠️ Default Behavior Will Change in v7**

Please note that to avoid a breaking change, the default behavior will still encode a simple key/value JSON object into a `FormData` instance:

```
function Component() {
  let navigation = useNavigation();
  let submit = useSubmit();
  submit({ key: "value" }, { method: "post" });
  // navigation.formEncType => "application/x-www-form-urlencoded"
  // navigation.formData    => FormData instance
}

async function action({ request }) {
  // request.headers.get("Content-Type") => "application/x-www-form-urlencoded"
  // await request.formData()            => FormData instance
}

```

Copy code to clipboard

This behavior will likely change in v7 so it's best to make any JSON object submissions explicit with `formEncType: "application/x-www-form-urlencoded"` or `formEncType: "application/json"` to ease your eventual v7 migration path.

### Minor Changes

- Add support for `application/json` and `text/plain` encodings for `useSubmit`/ `fetcher.submit`. To reflect these additional types, `useNavigation`/ `useFetcher` now also contain `navigation.json`/ `navigation.text` and `fetcher.json`/ `fetcher.text` which include the json/text submission if applicable. ( [#10413](https://github.com/remix-run/react-router/pull/10413))

### Patch Changes

- When submitting a form from a `submitter` element, prefer the built-in `new FormData(form, submitter)` instead of the previous manual approach in modern browsers (those that support the new `submitter` parameter) ( [#9865](https://github.com/remix-run/react-router/pull/9865))

  - For browsers that don't support it, we continue to just append the submit button's entry to the end, and we also add rudimentary support for `type="image"` buttons
  - If developers want full spec-compliant support for legacy browsers, they can use the `formdata-submitter-polyfill`
- Call `window.history.pushState/replaceState` _before_ updating React Router state (instead of after) so that `window.location` matches `useLocation` during synchronous React 17 rendering ( [#10448](https://github.com/remix-run/react-router/pull/10448))

  - ⚠️ Note: generally apps should not be relying on `window.location` and should always reference `useLocation` when possible, as `window.location` will not be in sync 100% of the time (due to `popstate` events, concurrent mode, etc.)
- Avoid calling `shouldRevalidate` for fetchers that have not yet completed a data load ( [#10623](https://github.com/remix-run/react-router/pull/10623))
- Strip `basename` from the `location` provided to `<ScrollRestoration getKey>` to match the `useLocation` behavior ( [#10550](https://github.com/remix-run/react-router/pull/10550))
- Strip `basename` from locations provided to `unstable_useBlocker` functions to match the `useLocation` behavior ( [#10573](https://github.com/remix-run/react-router/pull/10573))
- Fix `unstable_useBlocker` key issues in `StrictMode` ( [#10573](https://github.com/remix-run/react-router/pull/10573))
- Fix `generatePath` when passed a numeric `0` value parameter ( [#10612](https://github.com/remix-run/react-router/pull/10612))
- Fix `tsc --skipLibCheck:false` issues on React 17 ( [#10622](https://github.com/remix-run/react-router/pull/10622))
- Upgrade `typescript` to 5.1 ( [#10581](https://github.com/remix-run/react-router/pull/10581))

**Full Changelog**: [`v6.13.0...v6.14.0`](https://github.com/remix-run/react-router/compare/react-router@6.13.0...react-router@6.14.0)

## v6.13.0

Date: 2023-06-14

### What's Changed

`6.13.0` is really a patch release in spirit but comes with a SemVer minor bump since we added a new future flag.

#### `future.v7_startTransition`

The **tl;dr;** is that `6.13.0` is the same as [`6.12.0`](https://github.com/remix-run/react-router/releases/tag/react-router%406.12.0) bue we've moved the usage of `React.startTransition` behind an opt-in `future.v7_startTransition` [future flag](https://reactrouter.com/v6/guides/api-development-strategy) because we found that there are applications in the wild that are currently using `Suspense` in ways that are incompatible with `React.startTransition`.

Therefore, in `6.13.0` the default behavior will no longer leverage `React.startTransition`:

```
<BrowserRouter>
  <Routes>{/*...*/}</Routes>
</BrowserRouter>

<RouterProvider router={router} />

```

Copy code to clipboard

If you wish to enable `React.startTransition`, pass the future flag to your router component:

```
<BrowserRouter future={{ v7_startTransition: true }}>
  <Routes>{/*...*/}</Routes>
</BrowserRouter>

<RouterProvider router={router} future={{ v7_startTransition: true }}/>

```

Copy code to clipboard

We recommend folks adopt this flag sooner rather than later to be better compatible with React concurrent mode, but if you run into issues you can continue without the use of `React.startTransition` until v7. Issues usually boil down to creating net-new promises during the render cycle, so if you run into issues when opting into `React.startTransition`, you should either lift your promise creation out of the render cycle or put it behind a `useMemo`.

### Minor Changes

- Move `React.startTransition` usage behinds a future flag ( [#10596](https://github.com/remix-run/react-router/pull/10596))

### Patch Changes

- Work around webpack/terser `React.startTransition` minification bug in production mode ( [#10588](https://github.com/remix-run/react-router/pull/10588))

**Full Changelog**: [`v6.12.1...v6.13.0`](https://github.com/remix-run/react-router/compare/react-router@6.12.1...react-router@6.13.0)

## v6.12.1

Date: 2023-06-08

> \[!WARNING\]
> Please use version `6.13.0` or later instead of `6.12.0`/ `6.12.1`. These versions suffered from some Webpack build/minification issues resulting failed builds or invalid minified code in your production bundles. See [#10569](https://github.com/remix-run/react-router/pull/10569) and [#10579](https://github.com/remix-run/react-router/issues/10579) for more details.

### Patch Changes

- Adjust feature detection of `React.startTransition` to fix webpack + react 17 compilation error ( [#10569](https://github.com/remix-run/react-router/pull/10569))

**Full Changelog**: [`v6.12.0...v6.12.1`](https://github.com/remix-run/react-router/compare/react-router@6.12.0...react-router@6.12.1)

## v6.12.0

Date: 2023-06-06

> \[!WARNING\]
> Please use version `6.13.0` or later instead of `6.12.0`/ `6.12.1`. These versions suffered from some Webpack build/minification issues resulting failed builds or invalid minified code in your production bundles. See [#10569](https://github.com/remix-run/react-router/pull/10569) and [#10579](https://github.com/remix-run/react-router/issues/10579) for more details.

### What's Changed

#### `React.startTransition` support

With `6.12.0` we've added better support for suspending components by wrapping the internal router state updates in [`React.startTransition`](https://react.dev/reference/react/startTransition). This means that, for example, if one of your components in a destination route suspends and you have not provided a [`Suspense`](https://react.dev/reference/react/Suspense) boundary to show a fallback, React will delay the rendering of the new UI and show the old UI until that asynchronous operation resolves. This could be useful for waiting for things such as waiting for images or CSS files to load (and technically, yes, you could use it for data loading but we'd still recommend using loaders for that 😀). For a quick overview of this usage, check out [Ryan's demo on Twitter](https://twitter.com/remix_run/status/1658976420767604736).

### Minor Changes

- Wrap internal router state updates with `React.startTransition` ( [#10438](https://github.com/remix-run/react-router/pull/10438))

### Patch Changes

- Allow fetcher revalidations to complete if submitting fetcher is deleted ( [#10535](https://github.com/remix-run/react-router/pull/10535))
- Re-throw `DOMException` ( `DataCloneError`) when attempting to perform a `PUSH` navigation with non-serializable state. ( [#10427](https://github.com/remix-run/react-router/pull/10427))
- Ensure revalidations happen when hash is present ( [#10516](https://github.com/remix-run/react-router/pull/10516))
- Upgrade `jest` and `jsdom` ( [#10453](https://github.com/remix-run/react-router/pull/10453))
- Updated dependencies:
  - `@remix-run/router@1.6.3` ( [Changelog](https://github.com/remix-run/react-router/blob/main/packages/router/CHANGELOG.md#163))

**Full Changelog**: [`v6.11.2...v6.12.0`](https://github.com/remix-run/react-router/compare/react-router@6.11.2...react-router@6.12.0)

## v6.11.2

Date: 2023-05-17

### Patch Changes

- Fix `basename` duplication in descendant `<Routes>` inside a `<RouterProvider>` ( [#10492](https://github.com/remix-run/react-router/pull/10492))
- Fix bug where initial data load would not kick off when hash is present ( [#10493](https://github.com/remix-run/react-router/pull/10493))
- Export `SetURLSearchParams` type ( [#10444](https://github.com/remix-run/react-router/pull/10444))
- Fix Remix HMR-driven error boundaries by properly reconstructing new routes and `manifest` in `_internalSetRoutes` ( [#10437](https://github.com/remix-run/react-router/pull/10437))

**Full Changelog**: [`v6.11.1...v6.11.2`](https://github.com/remix-run/react-router/compare/react-router@6.11.1...react-router@6.11.2)

## v6.11.1

Date: 2023-05-03

### Patch Changes

- Fix usage of `Component` API within descendant `<Routes>` ( [#10434](https://github.com/remix-run/react-router/pull/10434))
- Fix bug when calling `useNavigate` from `<Routes>` inside a `<RouterProvider>` ( [#10432](https://github.com/remix-run/react-router/pull/10432))
- Fix usage of `<Navigate>` in strict mode when using a data router ( [#10435](https://github.com/remix-run/react-router/pull/10435))
- Fix `basename` handling when navigating without a path ( [#10433](https://github.com/remix-run/react-router/pull/10433))
- "Same hash" navigations no longer re-run loaders to match browser behavior (i.e. `/path#hash -> /path#hash`) ( [#10408](https://github.com/remix-run/react-router/pull/10408))

**Full Changelog**: [`v6.11.0...v6.11.1`](https://github.com/remix-run/react-router/compare/react-router@6.11.0...react-router@6.11.1)

## v6.11.0

Date: 2023-04-28

### Minor Changes

- Enable `basename` support in `useFetcher` ( [#10336](https://github.com/remix-run/react-router/pull/10336))

  - If you were previously working around this issue by manually prepending the `basename` then you will need to remove the manually prepended `basename` from your `fetcher` calls ( `fetcher.load('/basename/route') -> fetcher.load('/route')`)
- Updated dependencies:
  - `@remix-run/router@1.6.0` ( [Changelog](https://github.com/remix-run/react-router/blob/main/packages/router/CHANGELOG.md#160))

### Patch Changes

- When using a `RouterProvider`, `useNavigate`/ `useSubmit`/ `fetcher.submit` are now stable across location changes, since we can handle relative routing via the `@remix-run/router` instance and get rid of our dependence on `useLocation()` ( [#10336](https://github.com/remix-run/react-router/pull/10336))

  - When using `BrowserRouter`, these hooks remain unstable across location changes because they still rely on `useLocation()`
- Fetchers should no longer revalidate on search params changes or routing to the same URL, and will only revalidate on `action` submissions or `router.revalidate` calls ( [#10344](https://github.com/remix-run/react-router/pull/10344))
- Fix inadvertent re-renders when using `Component` instead of `element` on a route definition ( [#10287](https://github.com/remix-run/react-router/pull/10287))
- Fail gracefully on `<Link to="//">` and other invalid URL values ( [#10367](https://github.com/remix-run/react-router/pull/10367))
- Switched from `useSyncExternalStore` to `useState` for internal `@remix-run/router` router state syncing in `<RouterProvider>`. We found some [subtle bugs](https://codesandbox.io/s/use-sync-external-store-loop-9g7b81) where router state updates got propagated _before_ other normal `useState` updates, which could lead to foot guns in `useEffect` calls. ( [#10377](https://github.com/remix-run/react-router/pull/10377), [#10409](https://github.com/remix-run/react-router/pull/10409))
- Log loader/action errors caught by the default error boundary to the console in dev for easier stack trace evaluation ( [#10286](https://github.com/remix-run/react-router/pull/10286))
- Fix bug preventing rendering of descendant `<Routes>` when `RouterProvider` errors existed ( [#10374](https://github.com/remix-run/react-router/pull/10374))
- Fix detection of `useNavigate` in the render cycle by setting the `activeRef` in a layout effect, allowing the `navigate` function to be passed to child components and called in a `useEffect` there ( [#10394](https://github.com/remix-run/react-router/pull/10394))
- Allow `useRevalidator()` to resolve a loader-driven error boundary scenario ( [#10369](https://github.com/remix-run/react-router/pull/10369))
- Enhance `LoaderFunction`/ `ActionFunction` return type to prevent `undefined` from being a valid return value ( [#10267](https://github.com/remix-run/react-router/pull/10267))
- Ensure proper 404 error on `fetcher.load` call to a route without a `loader` ( [#10345](https://github.com/remix-run/react-router/pull/10345))
- Decouple `AbortController` usage between revalidating fetchers and the thing that triggered them such that the unmount/deletion of a revalidating fetcher doesn't impact the ongoing triggering navigation/revalidation ( [#10271](https://github.com/remix-run/react-router/pull/10271))

**Full Changelog**: [`v6.10.0...v6.11.0`](https://github.com/remix-run/react-router/compare/react-router@6.10.0...react-router@6.11.0)

## v6.10.0

Date: 2023-03-29

### What's Changed

We recently published a post over on the Remix Blog titled ["Future Proofing Your Remix App"](https://remix.run/blog/future-flags) that goes through our strategy to ensure smooth upgrades for your Remix and React Router apps going forward. React Router `6.10.0` adds support for these flags (for data routers) which you can specify when you create your router:

```
const router = createBrowserRouter(routes, {
  future: {
    // specify future flags here
  },
});

```

Copy code to clipboard

You can also check out the docs [here](https://reactrouter.com/en/dev/guides/api-development-strategy) and [here](https://reactrouter.com/en/dev/routers/create-browser-router#future).

### Minor Changes

#### `future.v7_normalizeFormMethod`

The first future flag being introduced is `future.v7_normalizeFormMethod` which will normalize the exposed `useNavigation()/useFetcher()` `formMethod` fields as uppercase HTTP methods to align with the `fetch()` (and some Remix) behavior. ( [#10207](https://github.com/remix-run/react-router/pull/10207))

- When `future.v7_normalizeFormMethod` is unspecified or set to `false` (default v6 behavior),

  - `useNavigation().formMethod` is lowercase
  - `useFetcher().formMethod` is lowercase
- When `future.v7_normalizeFormMethod === true`:

  - `useNavigation().formMethod` is UPPERCASE
  - `useFetcher().formMethod` is UPPERCASE

### Patch Changes

- Fix `createStaticHandler` to also check for `ErrorBoundary` on routes in addition to `errorElement` ( [#10190](https://github.com/remix-run/react-router/pull/10190))
- Fix route ID generation when using Fragments in `createRoutesFromElements` ( [#10193](https://github.com/remix-run/react-router/pull/10193))
- Provide fetcher submission to `shouldRevalidate` if the fetcher action redirects ( [#10208](https://github.com/remix-run/react-router/pull/10208))
- Properly handle `lazy()` errors during router initialization ( [#10201](https://github.com/remix-run/react-router/pull/10201))
- Remove `instanceof` check for `DeferredData` to be resilient to ESM/CJS boundaries in SSR bundling scenarios ( [#10247](https://github.com/remix-run/react-router/pull/10247))
- Update to latest `@remix-run/web-fetch@4.3.3` ( [#10216](https://github.com/remix-run/react-router/pull/10216))

**Full Changelog**: [`v6.9.0...v6.10.0`](https://github.com/remix-run/react-router/compare/react-router@6.9.0...react-router@6.10.0)

## v6.9.0

Date: 2023-03-10

### What's Changed

#### `Component`/ `ErrorBoundary` route properties

React Router now supports an alternative way to define your route `element` and `errorElement` fields as React Components instead of React Elements. You can instead pass a React Component to the new `Component` and `ErrorBoundary` fields if you choose. There is no functional difference between the two, so use whichever approach you prefer 😀. You shouldn't be defining both, but if you do `Component`/ `ErrorBoundary` will "win"

**Example JSON Syntax**

```
// Both of these work the same:
const elementRoutes = [{\
  path: '/',\
  element: <Home />,\
  errorElement: <HomeError />,\
}]

const componentRoutes = [{\
  path: '/',\
  Component: Home,\
  ErrorBoundary: HomeError,\
}]

function Home() { ... }
function HomeError() { ... }

```

Copy code to clipboard

**Example JSX Syntax**

```
// Both of these work the same:
const elementRoutes = createRoutesFromElements(
  <Route path='/' element={<Home />} errorElement={<HomeError /> } />
);

const componentRoutes = createRoutesFromElements(
  <Route path='/' Component={Home} ErrorBoundary={HomeError} />
);

function Home() { ... }
function HomeError() { ... }

```

Copy code to clipboard

#### Introducing Lazy Route Modules

In order to keep your application bundles small and support code-splitting of your routes, we've introduced a new `lazy()` route property. This is an async function that resolves the non-route-matching portions of your route definition ( `loader`, `action`, `element`/ `Component`, `errorElement`/ `ErrorBoundary`, `shouldRevalidate`, `handle`).

Lazy routes are resolved on initial load and during the `loading` or `submitting` phase of a navigation or fetcher call. You cannot lazily define route-matching properties ( `path`, `index`, `children`) since we only execute your lazy route functions after we've matched known routes.

Your `lazy` functions will typically return the result of a dynamic import.

```
// In this example, we assume most folks land on the homepage so we include that
// in our critical-path bundle, but then we lazily load modules for /a and /b so
// they don't load until the user navigates to those routes
let routes = createRoutesFromElements(
  <Route path="/" element={<Layout />}>
    <Route index element={<Home />} />
    <Route path="a" lazy={() => import("./a")} />
    <Route path="b" lazy={() => import("./b")} />
  </Route>
);

```

Copy code to clipboard

Then in your lazy route modules, export the properties you want defined for the route:

```
export async function loader({ request }) {
  let data = await fetchData(request);
  return json(data);
}

// Export a `Component` directly instead of needing to create a React Element from it
export function Component() {
  let data = useLoaderData();

  return (
    <>
      <h1>You made it!</h1>
      <p>{data}</p>
    </>
  );
}

// Export an `ErrorBoundary` directly instead of needing to create a React Element from it
export function ErrorBoundary() {
  let error = useRouteError();
  return isRouteErrorResponse(error) ? (
    <h1>
      {error.status} {error.statusText}
    </h1>
  ) : (
    <h1>{error.message || error}</h1>
  );
}

```

Copy code to clipboard

An example of this in action can be found in the [`examples/lazy-loading-router-provider`](https://github.com/remix-run/react-router/tree/main/examples/lazy-loading-router-provider) directory of the repository. For more info, check out the [`lazy` docs](https://reactrouter.com/v6/route/lazy).

🙌 Huge thanks to @rossipedia for the [Initial Proposal](https://github.com/remix-run/react-router/discussions/9826) and [POC Implementation](https://github.com/remix-run/react-router/pull/9830).

### Minor Changes

- Add support for `route.Component`/ `route.ErrorBoundary` properties ( [#10045](https://github.com/remix-run/react-router/pull/10045))
- Add support for `route.lazy` ( [#10045](https://github.com/remix-run/react-router/pull/10045))

### Patch Changes

- Improve memoization for context providers to avoid unnecessary re-renders ( [#9983](https://github.com/remix-run/react-router/pull/9983))
- Fix `generatePath` incorrectly applying parameters in some cases ( [#10078](https://github.com/remix-run/react-router/pull/10078))
- `[react-router-dom-v5-compat]` Add missed data router API re-exports ( [#10171](https://github.com/remix-run/react-router/pull/10171))

**Full Changelog**: [`v6.8.2...v6.9.0`](https://github.com/remix-run/react-router/compare/react-router@6.8.2...react-router@6.9.0)

## v6.8.2

Date: 2023-02-27

### Patch Changes

- Treat same-origin absolute URLs in `<Link to>` as external if they are outside of the router `basename` ( [#10135](https://github.com/remix-run/react-router/pull/10135))
- Correctly perform a hard redirect for same-origin absolute URLs outside of the router `basename` ( [#10076](https://github.com/remix-run/react-router/pull/10076))
- Fix SSR of absolute `<Link to>` urls ( [#10112](https://github.com/remix-run/react-router/pull/10112))
- Properly escape HTML characters in `StaticRouterProvider` serialized hydration data ( [#10068](https://github.com/remix-run/react-router/pull/10068))
- Fix `useBlocker` to return `IDLE_BLOCKER` during SSR ( [#10046](https://github.com/remix-run/react-router/pull/10046))
- Ensure status code and headers are maintained for `defer` loader responses in `createStaticHandler`'s `query()` method ( [#10077](https://github.com/remix-run/react-router/pull/10077))
- Change `invariant` to an `UNSAFE_invariant` export since it's only intended for internal use ( [#10066](https://github.com/remix-run/react-router/pull/10066))

**Full Changelog**: [`v6.8.1...v6.8.2`](https://github.com/remix-run/react-router/compare/react-router@6.8.1...react-router@6.8.2)

## v6.8.1

Date: 2023-02-06

### Patch Changes

- Remove inaccurate console warning for POP navigations and update active blocker logic ( [#10030](https://github.com/remix-run/react-router/pull/10030))
- Only check for differing origin on absolute URL redirects ( [#10033](https://github.com/remix-run/react-router/pull/10033))
- Improved absolute url detection in `Link` component (now also supports `mailto:` urls) ( [#9994](https://github.com/remix-run/react-router/pull/9994))
- Fix partial object (search or hash only) pathnames losing current path value ( [#10029](https://github.com/remix-run/react-router/pull/10029))

**Full Changelog**: [`v6.8.0...v6.8.1`](https://github.com/remix-run/react-router/compare/react-router@6.8.0...react-router@6.8.1)

## v6.8.0

Date: 2023-01-26

### Minor Changes

Support absolute URLs in `<Link to>`. If the URL is for the current origin, it will still do a client-side navigation. If the URL is for a different origin then it will do a fresh document request for the new origin. ( [#9900](https://github.com/remix-run/react-router/pull/9900))

```
<Link to="https://neworigin.com/some/path">    {/* Document request */}
<Link to="//neworigin.com/some/path">          {/* Document request */}
<Link to="https://www.currentorigin.com/path"> {/* Client-side navigation */}

```

Copy code to clipboard

### Patch Changes

- Fixes 2 separate issues for revalidating fetcher `shouldRevalidate` calls ( [#9948](https://github.com/remix-run/react-router/pull/9948))

  - The `shouldRevalidate` function was only being called for _explicit_ revalidation scenarios (after a mutation, manual `useRevalidator` call, or an `X-Remix-Revalidate` header used for cookie setting in Remix). It was not properly being called on _implicit_ revalidation scenarios that also apply to navigation `loader` revalidation, such as a change in search params or clicking a link for the page we're already on. It's now correctly called in those additional scenarios.
  - The parameters being passed were incorrect and inconsistent with one another since the `current*`/ `next*` parameters reflected the static `fetcher.load` URL (and thus were identical). Instead, they should have reflected the navigation that triggered the revalidation (as the `form*` parameters did). These parameters now correctly reflect the triggering navigation.
- Fix bug with search params removal via `useSearchParams` ( [#9969](https://github.com/remix-run/react-router/pull/9969))
- Respect `preventScrollReset` on `<fetcher.Form>` ( [#9963](https://github.com/remix-run/react-router/pull/9963))
- Fix navigation for hash routers on manual URL changes ( [#9980](https://github.com/remix-run/react-router/pull/9980))
- Use `pagehide` instead of `beforeunload` for `<ScrollRestoration>`. This has better cross-browser support, specifically on Mobile Safari. ( [#9945](https://github.com/remix-run/react-router/pull/9945))
- Do not short circuit on hash change only mutation submissions ( [#9944](https://github.com/remix-run/react-router/pull/9944))
- Remove `instanceof` check from `isRouteErrorResponse` to avoid bundling issues on the server ( [#9930](https://github.com/remix-run/react-router/pull/9930))
- Detect when a `defer` call only contains critical data and remove the `AbortController` ( [#9965](https://github.com/remix-run/react-router/pull/9965))
- Send the name as the value when url-encoding `File` `FormData` entries ( [#9867](https://github.com/remix-run/react-router/pull/9867))
- `react-router-dom-v5-compat` \- Fix SSR `useLayoutEffect` `console.error` when using `CompatRouter` ( [#9820](https://github.com/remix-run/react-router/pull/9820))

**Full Changelog**: [`v6.7.0...v6.8.0`](https://github.com/remix-run/react-router/compare/react-router@6.7.0...react-router@6.8.0)

## v6.7.0

Date: 2023-01-18

### Minor Changes

- Add `unstable_useBlocker`/ `unstable_usePrompt` hooks for blocking navigations within the app's location origin ( [#9709](https://github.com/remix-run/react-router/pull/9709), [#9932](https://github.com/remix-run/react-router/pull/9932))
- Add `preventScrollReset` prop to `<Form>` ( [#9886](https://github.com/remix-run/react-router/pull/9886))

### Patch Changes

- Added pass-through event listener options argument to `useBeforeUnload` ( [#9709](https://github.com/remix-run/react-router/pull/9709))
- Fix `generatePath` when optional params are present ( [#9764](https://github.com/remix-run/react-router/pull/9764))
- Update `<Await>` to accept `ReactNode` as children function return result ( [#9896](https://github.com/remix-run/react-router/pull/9896))
- Improved absolute redirect url detection in actions/loaders ( [#9829](https://github.com/remix-run/react-router/pull/9829))
- Fix URL creation with memory histories ( [#9814](https://github.com/remix-run/react-router/pull/9814))
- Fix scroll reset if a submission redirects ( [#9886](https://github.com/remix-run/react-router/pull/9886))
- Fix 404 bug with same-origin absolute redirects ( [#9913](https://github.com/remix-run/react-router/pull/9913))
- Streamline `jsdom` bug workaround in tests ( [#9824](https://github.com/remix-run/react-router/pull/9824))

**Full Changelog**: [`v6.6.2...v6.7.0`](https://github.com/remix-run/react-router/compare/react-router@6.6.2...react-router@6.7.0)

## v6.6.2

Date: 2023-01-09

### Patch Changes

- Ensure `useId` consistency during SSR ( [#9805](https://github.com/remix-run/react-router/pull/9805))

**Full Changelog**: [`v6.6.1...v6.6.2`](https://github.com/remix-run/react-router/compare/react-router@6.6.1...react-router@6.6.2)

## v6.6.1

Date: 2022-12-23

### Patch Changes

- Include submission info in `shouldRevalidate` on action redirects ( [#9777](https://github.com/remix-run/react-router/pull/9777), [#9782](https://github.com/remix-run/react-router/pull/9782))
- Reset `actionData` on action redirect to current location ( [#9772](https://github.com/remix-run/react-router/pull/9772))

**Full Changelog**: [`v6.6.0...v6.6.1`](https://github.com/remix-run/react-router/compare/react-router@6.6.0...react-router@6.6.1)

## v6.6.0

Date: 2022-12-21

### What's Changed

This minor release is primarily to stabilize our SSR APIs for Data Routers now that we've wired up the new `RouterProvider` in Remix as part of the [React Router-ing Remix](https://remix.run/blog/react-routering-remix) work.

### Minor Changes

- Remove `unstable_` prefix from `createStaticHandler`/ `createStaticRouter`/ `StaticRouterProvider` ( [#9738](https://github.com/remix-run/react-router/pull/9738))
- Add `useBeforeUnload()` hook ( [#9664](https://github.com/remix-run/react-router/pull/9664))

### Patch Changes

- Support uppercase `<Form method>` and `useSubmit` method values ( [#9664](https://github.com/remix-run/react-router/pull/9664))
- Fix `<button formmethod>` form submission overriddes ( [#9664](https://github.com/remix-run/react-router/pull/9664))
- Fix explicit `replace` on submissions and `PUSH` on submission to new paths ( [#9734](https://github.com/remix-run/react-router/pull/9734))
- Prevent `useLoaderData` usage in `errorElement` ( [#9735](https://github.com/remix-run/react-router/pull/9735))
- Proper hydration of `Error` objects from `StaticRouterProvider` ( [#9664](https://github.com/remix-run/react-router/pull/9664))
- Skip initial scroll restoration for SSR apps with `hydrationData` ( [#9664](https://github.com/remix-run/react-router/pull/9664))
- Fix a few bugs where loader/action data wasn't properly cleared on errors ( [#9735](https://github.com/remix-run/react-router/pull/9735))

**Full Changelog**: [`v6.5.0...v6.6.0`](https://github.com/remix-run/react-router/compare/react-router@6.5.0...react-router@6.6.0)

## v6.5.0

Date: 2022-12-16

### What's Changed

This release introduces support for [Optional Route Segments](https://github.com/remix-run/react-router/issues/9546). Now, adding a `?` to the end of any path segment will make that entire segment optional. This works for both static segments and dynamic parameters.

**Optional Params Examples**

- `<Route path=":lang?/about>` will match:

  - `/:lang/about`
  - `/about`
- `<Route path="/multistep/:widget1?/widget2?/widget3?">` will match:

  - `/multistep`
  - `/multistep/:widget1`
  - `/multistep/:widget1/:widget2`
  - `/multistep/:widget1/:widget2/:widget3`

**Optional Static Segment Example**

- `<Route path="/home?">` will match:

  - `/`
  - `/home`
- `<Route path="/fr?/about">` will match:

  - `/about`
  - `/fr/about`

### Minor Changes

- Allows optional routes and optional static segments ( [#9650](https://github.com/remix-run/react-router/pull/9650))

### Patch Changes

- Stop incorrectly matching on partial named parameters, i.e. `<Route path="prefix-:param">`, to align with how splat parameters work. If you were previously relying on this behavior then it's recommended to extract the static portion of the path at the `useParams` call site: ( [#9506](https://github.com/remix-run/react-router/pull/9506))

```
// Old behavior at URL /prefix-123
<Route path="prefix-:id" element={<Comp /> }>

function Comp() {
  let params = useParams(); // { id: '123' }
  let id = params.id; // "123"
  ...
}

// New behavior at URL /prefix-123
<Route path=":id" element={<Comp /> }>

function Comp() {
  let params = useParams(); // { id: 'prefix-123' }
  let id = params.id.replace(/^prefix-/, ''); // "123"
  ...
}

```

Copy code to clipboard

- Persist `headers` on `loader` `request`'s after SSR document `action` request ( [#9721](https://github.com/remix-run/react-router/pull/9721))
- Fix requests sent to revalidating loaders so they reflect a GET request ( [#9660](https://github.com/remix-run/react-router/pull/9660))
- Fix issue with deeply nested optional segments ( [#9727](https://github.com/remix-run/react-router/pull/9727))
- GET forms now expose a submission on the loading navigation ( [#9695](https://github.com/remix-run/react-router/pull/9695))
- Fix error boundary tracking for multiple errors bubbling to the same boundary ( [#9702](https://github.com/remix-run/react-router/pull/9702))

**Full Changelog**: [`v6.4.5...v6.5.0`](https://github.com/remix-run/react-router/compare/react-router@6.4.5...react-router@6.5.0)

## v6.4.5

Date: 2022-12-07

### Patch Changes

- Fix requests sent to revalidating loaders so they reflect a `GET` request ( [#9680](https://github.com/remix-run/react-router/pull/9680))
- Remove `instanceof Response` checks in favor of `isResponse` ( [#9690](https://github.com/remix-run/react-router/pull/9690))
- Fix `URL` creation in Cloudflare Pages or other non-browser-environments ( [#9682](https://github.com/remix-run/react-router/pull/9682), [#9689](https://github.com/remix-run/react-router/pull/9689))
- Add `requestContext` support to static handler `query`/ `queryRoute` ( [#9696](https://github.com/remix-run/react-router/pull/9696))

  - Note that the unstable API of `queryRoute(path, routeId)` has been changed to `queryRoute(path, { routeId, requestContext })`

**Full Changelog**: [`v6.4.4...v6.4.5`](https://github.com/remix-run/react-router/compare/react-router@6.4.4...react-router@6.4.5)

## v6.4.4

Date: 2022-11-30

### Patch Changes

- Throw an error if an `action`/ `loader` function returns `undefined` as revalidations need to know whether the loader has previously been executed. `undefined` also causes issues during SSR stringification for hydration. You should always ensure your `loader`/ `action` returns a value, and you may return `null` if you don't wish to return anything. ( [#9511](https://github.com/remix-run/react-router/pull/9511))
- Properly handle redirects to external domains ( [#9590](https://github.com/remix-run/react-router/pull/9590), [#9654](https://github.com/remix-run/react-router/pull/9654))
- Preserve the HTTP method on 307/308 redirects ( [#9597](https://github.com/remix-run/react-router/pull/9597))
- Support `basename` in static data routers ( [#9591](https://github.com/remix-run/react-router/pull/9591))
- Enhanced `ErrorResponse` bodies to contain more descriptive text in internal 403/404/405 scenarios
- Fix issues with encoded characters in `NavLink` and descendant `<Routes>` ( [#9589](https://github.com/remix-run/react-router/pull/9589), [#9647](https://github.com/remix-run/react-router/pull/9647))
- Properly serialize/deserialize `ErrorResponse` instances when using built-in hydration ( [#9593](https://github.com/remix-run/react-router/pull/9593))
- Support `basename` in static data routers ( [#9591](https://github.com/remix-run/react-router/pull/9591))
- Updated dependencies:
  - `@remix-run/router@1.0.4`
  - `react-router@6.4.4`

**Full Changelog**: [`v6.4.3...v6.4.4`](https://github.com/remix-run/react-router/compare/react-router-dom@6.4.3...react-router-dom@6.4.4)

## v6.4.3

Date: 2022-11-01

### Patch Changes

- Generate correct `<a href>` values when using `createHashRouter` ( [#9409](https://github.com/remix-run/react-router/pull/9409))
- Better handle encoding/matching with special characters in URLs and route paths ( [#9477](https://github.com/remix-run/react-router/pull/9477), [#9496](https://github.com/remix-run/react-router/pull/9496))
- Generate correct `formAction` pathnames when an `index` route also has a `path` ( [#9486](https://github.com/remix-run/react-router/pull/9486))
- Respect `relative=path` prop on `NavLink` ( [#9453](https://github.com/remix-run/react-router/pull/9453))
- Fix `NavLink` behavior for root urls ( [#9497](https://github.com/remix-run/react-router/pull/9497))
- `useRoutes` should be able to return `null` when passing `locationArg` ( [#9485](https://github.com/remix-run/react-router/pull/9485))
- Fix `initialEntries` type in `createMemoryRouter` ( [#9498](https://github.com/remix-run/react-router/pull/9498))
- Support `basename` and relative routing in `loader`/ `action` redirects ( [#9447](https://github.com/remix-run/react-router/pull/9447))
- Ignore pathless layout routes when looking for proper submission `action` function ( [#9455](https://github.com/remix-run/react-router/pull/9455))
- Add UMD build for `@remix-run/router` ( [#9446](https://github.com/remix-run/react-router/pull/9446))
- Fix `createURL` in local file execution in Firefox ( [#9464](https://github.com/remix-run/react-router/pull/9464))

**Full Changelog**: [`v6.4.2...v6.4.3`](https://github.com/remix-run/react-router/compare/react-router@6.4.2...react-router@6.4.3)

## v6.4.2

Date: 2022-10-06

### Patch Changes

- Respect `basename` in `useFormAction` ( [#9352](https://github.com/remix-run/react-router/pull/9352))
- Fix `IndexRouteObject` and `NonIndexRouteObject` types to make `hasErrorElement` optional ( [#9394](https://github.com/remix-run/react-router/pull/9394))
- Enhance console error messages for invalid usage of data router hooks ( [#9311](https://github.com/remix-run/react-router/pull/9311))
- If an index route has children, it will result in a runtime error. We have strengthened our `RouteObject`/ `RouteProps` types to surface the error in TypeScript. ( [#9366](https://github.com/remix-run/react-router/pull/9366))

**Full Changelog**: [`v6.4.1...v6.4.2`](https://github.com/remix-run/react-router/compare/react-router@6.4.1...react-router@6.4.2)

## v6.4.1

Date: 2022-09-22

### Patch Changes

- Preserve state from `initialEntries` ( [#9288](https://github.com/remix-run/react-router/pull/9288))
- Preserve `?index` for fetcher get submissions to index routes ( [#9312](https://github.com/remix-run/react-router/pull/9312))

**Full Changelog**: [`v6.4.0...v6.4.1`](https://github.com/remix-run/react-router/compare/react-router@6.4.0...react-router@6.4.1)

## v6.4.0

Date: 2022-09-13

### What's Changed

#### Remix Data APIs

Whoa this is a big one! `6.4.0` brings all the data loading and mutation APIs over from Remix. Here's a quick high level overview, but it's recommended you go check out the [docs](https://reactrouter.com/), especially the [feature overview](https://reactrouter.com/en/6.4.0/start/overview) and the [tutorial](https://reactrouter.com/en/6.4.0/start/tutorial).

**New `react-router` APIs**

- Create your router with `createMemoryRouter`
- Render your router with `<RouterProvider>`
- Load data with a Route `loader` and mutate with a Route `action`
- Handle errors with Route `errorElement`
- Defer non-critical data with `defer` and `Await`

**New `react-router-dom` APIs**

- Create your router with `createBrowserRouter`/ `createHashRouter`
- Submit data with the new `<Form>` component
- Perform in-page data loads and mutations with `useFetcher()`
- Defer non-critical data with `defer` and `Await`
- Manage scroll position with `<ScrollRestoration>`
- Perform path-relative navigations with `<Link relative="path">` ( [#9160](https://github.com/remix-run/react-router/pull/9160))

### Patch Changes

- Path resolution is now trailing slash agnostic ( [#8861](https://github.com/remix-run/react-router/pull/8861))
- `useLocation` returns the scoped location inside a `<Routes location>` component ( [#9094](https://github.com/remix-run/react-router/pull/9094))
- Respect the `<Link replace>` prop if it is defined ( [#8779](https://github.com/remix-run/react-router/pull/8779))

**Full Changelog**: [`v6.3.0...v6.4.0`](https://github.com/remix-run/react-router/compare/v6.3.0...react-router%406.4.0)

## v6.3.0

Date: 2022-03-31

### Minor Changes

- Added the v5 to v6 backwards compatibility package 💜 ( [#8752](https://github.com/remix-run/react-router/pull/8752)). The official guide can be found [in this discussion](https://github.com/remix-run/react-router/discussions/8753)

**Full Changelog**: [`v6.2.2...v6.3.0`](https://github.com/remix-run/react-router/compare/v6.2.2...v6.3.0)

## v6.2.2

Date: 2022-02-28

### Patch Changes

- Fixed nested splat routes that begin with special URL-safe characters ( [#8563](https://github.com/remix-run/react-router/pull/8563))
- Fixed a bug where index routes were missing route context in some cases ( [#8497](https://github.com/remix-run/react-router/pull/8497))

**Full Changelog**: [`v6.2.1...v6.2.2`](https://github.com/remix-run/react-router/compare/v6.2.1...v6.2.2)

## v6.2.1

Date: 2021-12-17

### Patch Changes

- This release updates the internal `history` dependency to `5.2.0`.

**Full Changelog**: [`v6.2.0...v6.2.1`](https://github.com/remix-run/react-router/compare/v6.2.0...v6.2.1)

## v6.2.0

Date: 2021-12-17

### Minor Changes

- We now use statically analyzable CJS exports. This enables named imports in Node ESM scripts ( [See the commit](https://github.com/remix-run/react-router/commit/29c7fc8b5f853b0b06ecd0f5682a9bbe6eca0715)).

### Patch Changes

- Fixed the `RouteProps` `element` type, which should be a `ReactNode` ( [#8473](https://github.com/remix-run/react-router/pull/8473))
- Fixed a bug with `useOutlet` for top-level routes ( [#8483](https://github.com/remix-run/react-router/pull/8483))

**Full Changelog**: [`v6.1.1...v6.2.0`](https://github.com/remix-run/react-router/compare/v6.1.1...v6.2.0)

## v6.1.1

Date: 2021-12-11

### Patch Changes

- In v6.1.0 we inadvertently shipped a new, undocumented API that will likely introduce bugs ( [#7586](https://github.com/remix-run/react-router/pull/7586)). We have flagged `HistoryRouter` as `unstable_HistoryRouter`, as this API will likely need to change before a new major release.

**Full Changelog**: [`v6.1.0...v6.1.1`](https://github.com/remix-run/react-router/compare/v6.1.0...v6.1.1)

## v6.1.0

Date: 2021-12-10

### Minor Changes

- `<Outlet>` can now receive a `context` prop. This value is passed to child routes and is accessible via the new `useOutletContext` hook. See [the API docs](https://reactrouter.com/docs/en/v6/api#useoutletcontext) for details. ( [#8461](https://github.com/remix-run/react-router/pull/8461))
- `<NavLink>` can now receive a child function for access to its props. ( [#8164](https://github.com/remix-run/react-router/pull/8164))
- Improved TypeScript signature for `useMatch` and `matchPath`. For example, when you call `useMatch("foo/:bar/:baz")`, the path is parsed and the return type will be `PathMatch<"bar" | "baz">`. ( [#8030](https://github.com/remix-run/react-router/pull/8030))

### Patch Changes

- Fixed a bug that broke support for base64 encoded IDs on nested routes ( [#8291](https://github.com/remix-run/react-router/pull/8291))
- A few error message improvements ( [#8202](https://github.com/remix-run/react-router/pull/8202))

**Full Changelog**: [`v6.0.2...v6.1.0`](https://github.com/remix-run/react-router/compare/v6.0.2...v6.1.0)

## v6.0.2

Date: 2021-11-09

### Patch Changes

- Added the `reloadDocument` prop to `<Link>`. This allows `<Link>` to function like a normal anchor tag by reloading the document after navigation while maintaining the relative `to` resolution ( [#8283](https://github.com/remix-run/react-router/pull/8283))

**Full Changelog**: [`v6.0.1...v6.0.2`](https://github.com/remix-run/react-router/compare/v6.0.1...v6.0.2)

## v6.0.1

Date: 2021-11-05

### Patch Changes

- Add a default `<StaticRouter location>` value ( [#8243](https://github.com/remix-run/react-router/pull/8243))
- Add invariant for using `<Route>` inside `<Routes>` to help people make the change ( [#8238](https://github.com/remix-run/react-router/pull/8238))

**Full Changelog**: [`v6.0.0...v6.0.1`](https://github.com/remix-run/react-router/compare/v6.0.0...v6.0.1)

## v6.0.0

Date: 2021-11-03

React Router v6 is here!

Please go read [our blog post for more information on all the great stuff in v6](https://remix.run/blog/react-router-v6) including [notes about how to upgrade from React Router v5](https://remix.run/blog/react-router-v6#upgrading-to-react-router-v6) and Reach Router.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/CHANGELOG.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Feature Overview

On this page

- [Client Side Routing](https://reactrouter.com/6.30.0/start/overview#client-side-routing)
- [Nested Routes](https://reactrouter.com/6.30.0/start/overview#nested-routes)
- [Dynamic Segments](https://reactrouter.com/6.30.0/start/overview#dynamic-segments)
- [Ranked Route Matching](https://reactrouter.com/6.30.0/start/overview#ranked-route-matching)
- [Active Links](https://reactrouter.com/6.30.0/start/overview#active-links)
- [Relative Links](https://reactrouter.com/6.30.0/start/overview#relative-links)
- [Data Loading](https://reactrouter.com/6.30.0/start/overview#data-loading)
- [Redirects](https://reactrouter.com/6.30.0/start/overview#redirects)
- [Pending Navigation UI](https://reactrouter.com/6.30.0/start/overview#pending-navigation-ui)
- [Skeleton UI with `<Suspense>`](https://reactrouter.com/6.30.0/start/overview#skeleton-ui-with-suspense)
- [Data Mutations](https://reactrouter.com/6.30.0/start/overview#data-mutations)
- [Data Revalidation](https://reactrouter.com/6.30.0/start/overview#data-revalidation)
- [Busy Indicators](https://reactrouter.com/6.30.0/start/overview#busy-indicators)
- [Optimistic UI](https://reactrouter.com/6.30.0/start/overview#optimistic-ui)
- [Data Fetchers](https://reactrouter.com/6.30.0/start/overview#data-fetchers)
- [Race Condition Handling](https://reactrouter.com/6.30.0/start/overview#race-condition-handling)
- [Error Handling](https://reactrouter.com/6.30.0/start/overview#error-handling)
- [Scroll Restoration](https://reactrouter.com/6.30.0/start/overview#scroll-restoration)
- [Web Standard APIs](https://reactrouter.com/6.30.0/start/overview#web-standard-apis)
- [Search Params](https://reactrouter.com/6.30.0/start/overview#search-params)
- [Location State](https://reactrouter.com/6.30.0/start/overview#location-state)

- [Client Side Routing](https://reactrouter.com/6.30.0/start/overview#client-side-routing)
- [Nested Routes](https://reactrouter.com/6.30.0/start/overview#nested-routes)
- [Dynamic Segments](https://reactrouter.com/6.30.0/start/overview#dynamic-segments)
- [Ranked Route Matching](https://reactrouter.com/6.30.0/start/overview#ranked-route-matching)
- [Active Links](https://reactrouter.com/6.30.0/start/overview#active-links)
- [Relative Links](https://reactrouter.com/6.30.0/start/overview#relative-links)
- [Data Loading](https://reactrouter.com/6.30.0/start/overview#data-loading)
- [Redirects](https://reactrouter.com/6.30.0/start/overview#redirects)
- [Pending Navigation UI](https://reactrouter.com/6.30.0/start/overview#pending-navigation-ui)
- [Skeleton UI with `<Suspense>`](https://reactrouter.com/6.30.0/start/overview#skeleton-ui-with-suspense)
- [Data Mutations](https://reactrouter.com/6.30.0/start/overview#data-mutations)
- [Data Revalidation](https://reactrouter.com/6.30.0/start/overview#data-revalidation)
- [Busy Indicators](https://reactrouter.com/6.30.0/start/overview#busy-indicators)
- [Optimistic UI](https://reactrouter.com/6.30.0/start/overview#optimistic-ui)
- [Data Fetchers](https://reactrouter.com/6.30.0/start/overview#data-fetchers)
- [Race Condition Handling](https://reactrouter.com/6.30.0/start/overview#race-condition-handling)
- [Error Handling](https://reactrouter.com/6.30.0/start/overview#error-handling)
- [Scroll Restoration](https://reactrouter.com/6.30.0/start/overview#scroll-restoration)
- [Web Standard APIs](https://reactrouter.com/6.30.0/start/overview#web-standard-apis)
- [Search Params](https://reactrouter.com/6.30.0/start/overview#search-params)
- [Location State](https://reactrouter.com/6.30.0/start/overview#location-state)

# Feature Overview

## Client Side Routing

React Router enables "client side routing".

In traditional websites, the browser requests a document from a web server, downloads and evaluates CSS and JavaScript assets, and renders the HTML sent from the server. When the user clicks a link, it starts the process all over again for a new page.

Client side routing allows your app to update the URL from a link click without making another request for another document from the server. Instead, your app can immediately render some new UI and make data requests with `fetch` to update the page with new information.

This enables faster user experiences because the browser doesn't need to request an entirely new document or re-evaluate CSS and JavaScript assets for the next page. It also enables more dynamic user experiences with things like animation.

Client side routing is enabled by creating a `Router` and linking/submitting to pages with `Link` and `<Form>`:

```
import * as React from "react";
import { createRoot } from "react-dom/client";
import {
  createBrowserRouter,
  RouterProvider,
  Route,
  Link,
} from "react-router-dom";

const router = createBrowserRouter([\
  {\
    path: "/",\
    element: (\
      <div>\
        <h1>Hello World</h1>\
        <Link to="about">About Us</Link>\
      </div>\
    ),\
  },\
  {\
    path: "about",\
    element: <div>About</div>,\
  },\
]);

createRoot(document.getElementById("root")).render(
  <RouterProvider router={router} />
);

```

Copy code to clipboard

## Nested Routes

Nested Routing is the general idea of coupling segments of the URL to component hierarchy and data. React Router's nested routes were inspired by the routing system in Ember.js circa 2014. The Ember team realized that in nearly every case, segments of the URL determine:

- The layouts to render on the page
- The data dependencies of those layouts

React Router embraces this convention with APIs for creating nested layouts coupled to URL segments and data.

```
// Configure nested routes with JSX
createBrowserRouter(
  createRoutesFromElements(
    <Route path="/" element={<Root />}>
      <Route path="contact" element={<Contact />} />
      <Route
        path="dashboard"
        element={<Dashboard />}
        loader={({ request }) =>
          fetch("/api/dashboard.json", {
            signal: request.signal,
          })
        }
      />
      <Route element={<AuthLayout />}>
        <Route
          path="login"
          element={<Login />}
          loader={redirectIfUser}
        />
        <Route path="logout" action={logoutUser} />
      </Route>
    </Route>
  )
);

// Or use plain objects
createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    children: [\
      {\
        path: "contact",\
        element: <Contact />,\
      },\
      {\
        path: "dashboard",\
        element: <Dashboard />,\
        loader: ({ request }) =>\
          fetch("/api/dashboard.json", {\
            signal: request.signal,\
          }),\
      },\
      {\
        element: <AuthLayout />,\
        children: [\
          {\
            path: "login",\
            element: <Login />,\
            loader: redirectIfUser,\
          },\
          {\
            path: "logout",\
            action: logoutUser,\
          },\
        ],\
      },\
    ],\
  },\
]);

```

Copy code to clipboard

This [visualization](https://remix.run/_docs/routing) might be helpful.

## Dynamic Segments

Segments of the URL can be dynamic placeholders that are parsed and provided to various apis.

```
<Route path="projects/:projectId/tasks/:taskId" />

```

Copy code to clipboard

The two segments with `:` are dynamic, and provided to the following APIs:

```
// If the current location is /projects/abc/tasks/3
<Route
  // sent to loaders
  loader={({ params }) => {
    params.projectId; // abc
    params.taskId; // 3
  }}
  // and actions
  action={({ params }) => {
    params.projectId; // abc
    params.taskId; // 3
  }}
  element={<Task />}
/>;

function Task() {
  // returned from `useParams`
  const params = useParams();
  params.projectId; // abc
  params.taskId; // 3
}

function Random() {
  const match = useMatch(
    "/projects/:projectId/tasks/:taskId"
  );
  match.params.projectId; // abc
  match.params.taskId; // 3
}

```

Copy code to clipboard

See:

- [`<Route path>`](https://reactrouter.com/6.30.0/route/route#path)
- [`<Route loader>`](https://reactrouter.com/6.30.0/route/loader)
- [`<Route action>`](https://reactrouter.com/6.30.0/route/action)
- [`useParams`](https://reactrouter.com/6.30.0/hooks/use-params)
- [`useMatch`](https://reactrouter.com/6.30.0/hooks/use-match)

## Ranked Route Matching

When matching URLs to routes, React Router will rank the routes according to the number of segments, static segments, dynamic segments, splats, etc. and pick the _most specific_ match.

For example, consider these two routes:

```
<Route path="/teams/:teamId" />
<Route path="/teams/new" />

```

Copy code to clipboard

Now consider the URL is [http://example.com/teams/new](http://example.com/teams/new).

Even though both routes technically match the URL ( `new` could be the `:teamId`), you intuitively know that we want the second route ( `/teams/new`) to be picked. React Router's matching algorithm knows that, too.

With ranked routes, you don't have to worry about route ordering.

## Active Links

Most web apps have persistent navigation sections at the top of the UI, the sidebar, and often multiple levels. Styling the active navigation items so the user knows where they are ( `isActive`) or where they're going ( `isPending`) in the app is done easily with `<NavLink>`.

```
<NavLink
  style={({ isActive, isPending }) => {
    return {
      color: isActive ? "red" : "inherit",
    };
  }}
  className={({ isActive, isPending }) => {
    return isActive ? "active" : isPending ? "pending" : "";
  }}
/>

```

Copy code to clipboard

You can also [`useMatch`](https://reactrouter.com/6.30.0/hooks/use-match) for any other "active" indication outside of links.

```
function SomeComp() {
  const match = useMatch("/messages");
  return <li className={Boolean(match) ? "active" : ""} />;
}

```

Copy code to clipboard

See:

- [`NavLink`](https://reactrouter.com/6.30.0/components/nav-link)
- [`useMatch`](https://reactrouter.com/6.30.0/hooks/use-match)

## Relative Links

Like HTML `<a href>`, `<Link to>` and `<NavLink to>` can take relative paths, with enhanced behavior with nested routes.

Given the following route config:

```
<Route path="home" element={<Home />}>
  <Route path="project/:projectId" element={<Project />}>
    <Route path=":taskId" element={<Task />} />
  </Route>
</Route>

```

Copy code to clipboard

Consider the url [https://example.com/home/project/123](https://example.com/home/project/123), which renders the following route component hierarchy:

```
<Home>
  <Project />
</Home>

```

Copy code to clipboard

If `<Project />` renders the following links, the hrefs of the links will resolve like so:

| In `<Project>` @ `/home/project/123` | Resolved `<a href>` |
| --- | --- |
| `<Link to="abc">` | `/home/project/123/abc` |
| `<Link to=".">` | `/home/project/123` |
| `<Link to="..">` | `/home` |
| `<Link to=".." relative="path">` | `/home/project` |

Note that the first `..` removes both segments of the `project/:projectId` route. By default, the `..` in relative links traverse the route hierarchy, not the URL segments. Adding `relative="path"` in the next example allows you to traverse the path segments instead.

Relative links are always relative to the route path they are _rendered in_, not to the full URL. That means if the user navigates deeper with `<Link to="abc">` to `<Task />` at the URL `/home/project/123/abc`, the hrefs in `<Project>` will not change (contrary to plain `<a href>`, a common problem with client side routers).

## Data Loading

Because URL segments usually map to your app's persistent data, React Router provides conventional data loading hooks to initiate data loading during a navigation. Combined with nested routes, all of the data for multiple layouts at a specific URL can be loaded in parallel.

```
<Route
  path="/"
  loader={async ({ request }) => {
    // loaders can be async functions
    const res = await fetch("/api/user.json", {
      signal: request.signal,
    });
    const user = await res.json();
    return user;
  }}
  element={<Root />}
>
  <Route
    path=":teamId"
    // loaders understand Fetch Responses and will automatically
    // unwrap the res.json(), so you can simply return a fetch
    loader={({ params }) => {
      return fetch(`/api/teams/${params.teamId}`);
    }}
    element={<Team />}
  >
    <Route
      path=":gameId"
      loader={({ params }) => {
        // of course you can use any data store
        return fakeSdk.getTeam(params.gameId);
      }}
      element={<Game />}
    />
  </Route>
</Route>

```

Copy code to clipboard

Data is made available to your components through `useLoaderData`.

```
function Root() {
  const user = useLoaderData();
  // data from <Route path="/">
}

function Team() {
  const team = useLoaderData();
  // data from <Route path=":teamId">
}

function Game() {
  const game = useLoaderData();
  // data from <Route path=":gameId">
}

```

Copy code to clipboard

When the user visits or clicks links to [https://example.com/real-salt-lake/45face3](https://example.com/real-salt-lake/45face3), all three route loaders will be called and loaded in parallel, before the UI for that URL renders.

## Redirects

While loading or changing data, it's common to [redirect](https://reactrouter.com/6.30.0/fetch/redirect) the user to a different route.

```
<Route
  path="dashboard"
  loader={async () => {
    const user = await fake.getUser();
    if (!user) {
      // if you know you can't render the route, you can
      // throw a redirect to stop executing code here,
      // sending the user to a new route
      throw redirect("/login");
    }

    // otherwise continue
    const stats = await fake.getDashboardStats();
    return { user, stats };
  }}
/>

```

Copy code to clipboard

```
<Route
  path="project/new"
  action={async ({ request }) => {
    const data = await request.formData();
    const newProject = await createProject(data);
    // it's common to redirect after actions complete,
    // sending the user to the new record
    return redirect(`/projects/${newProject.id}`);
  }}
/>

```

Copy code to clipboard

See:

- [`redirect`](https://reactrouter.com/6.30.0/fetch/redirect)
- [Throwing in Loaders](https://reactrouter.com/6.30.0/route/loader#throwing-in-loaders)
- [`useNavigate`](https://reactrouter.com/6.30.0/hooks/use-navigate)

## Pending Navigation UI

When users navigate around the app, the data for the next page is loaded before the page is rendered. It's important to provide user feedback during this time so the app doesn't feel like it's unresponsive.

```
function Root() {
  const navigation = useNavigation();
  return (
    <div>
      {navigation.state === "loading" && <GlobalSpinner />}
      <FakeSidebar />
      <Outlet />
      <FakeFooter />
    </div>
  );
}

```

Copy code to clipboard

See:

- [`useNavigation`](https://reactrouter.com/6.30.0/hooks/use-navigation)

## Skeleton UI with `<Suspense>`

Instead of waiting for the data for the next page, you can [`defer`](https://reactrouter.com/6.30.0/utils/defer) data so the UI flips over to the next screen with placeholder UI immediately while the data loads.

```
<Route
  path="issue/:issueId"
  element={<Issue />}
  loader={async ({ params }) => {
    // these are promises, but *not* awaited
    const comments = fake.getIssueComments(params.issueId);
    const history = fake.getIssueHistory(params.issueId);
    // the issue, however, *is* awaited
    const issue = await fake.getIssue(params.issueId);

    // defer enables suspense for the un-awaited promises
    return defer({ issue, comments, history });
  }}
/>;

function Issue() {
  const { issue, history, comments } = useLoaderData();
  return (
    <div>
      <IssueDescription issue={issue} />

      {/* Suspense provides the placeholder fallback */}
      <Suspense fallback={<IssueHistorySkeleton />}>
        {/* Await manages the deferred data (promise) */}
        <Await resolve={history}>
          {/* this calls back when the data is resolved */}
          {(resolvedHistory) => (
            <IssueHistory history={resolvedHistory} />
          )}
        </Await>
      </Suspense>

      <Suspense fallback={<IssueCommentsSkeleton />}>
        <Await resolve={comments}>
          {/* ... or you can use hooks to access the data */}
          <IssueComments />
        </Await>
      </Suspense>
    </div>
  );
}

function IssueComments() {
  const comments = useAsyncValue();
  return <div>{/* ... */}</div>;
}

```

Copy code to clipboard

See

- [Deferred Data Guide](https://reactrouter.com/6.30.0/guides/deferred)
- [`defer`](https://reactrouter.com/6.30.0/utils/defer)
- [`Await`](https://reactrouter.com/6.30.0/components/await)
- [`useAsyncValue`](https://reactrouter.com/6.30.0/hooks/use-async-value)

## Data Mutations

HTML forms are navigation events, just like links. React Router supports HTML form workflows with client side routing.

When a form is submitted, the normal browser navigation event is prevented and a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request), with a body containing the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) of the submission, is created. This request is sent to the `<Route action>` that matches the form's `<Form action>`.

Form elements's `name` prop are submitted to the action:

```
<Form action="/project/new">
  <label>
    Project title
    <br />
    <input type="text" name="title" />
  </label>

  <label>
    Target Finish Date
    <br />
    <input type="date" name="due" />
  </label>
</Form>

```

Copy code to clipboard

The normal HTML document request is prevented and sent to the matching route's action ( `<Route path>` that matches the `<form action>`), including the `request.formData`.

```
<Route
  path="project/new"
  action={async ({ request }) => {
    const formData = await request.formData();
    const newProject = await createProject({
      title: formData.get("title"),
      due: formData.get("due"),
    });
    return redirect(`/projects/${newProject.id}`);
  }}
/>

```

Copy code to clipboard

## Data Revalidation

Decades old web conventions indicate that when a form is posted to the server, data is changing and a new page is rendered. That convention is followed in React Router's HTML-based data mutation APIs.

After route actions are called, the loaders for all of the data on the page is called again to ensure the UI stays up-to-date with the data automatically. No cache keys to expire, no context providers to reload.

See:

- [Tutorial "Creating Contacts"](https://reactrouter.com/6.30.0/start/tutorial#creating-contacts)

## Busy Indicators

When forms are being submitted to route actions, you have access to the navigation state to display busy indicators, disable fieldsets, etc.

```
function NewProjectForm() {
  const navigation = useNavigation();
  const busy = navigation.state === "submitting";
  return (
    <Form action="/project/new">
      <fieldset disabled={busy}>
        <label>
          Project title
          <br />
          <input type="text" name="title" />
        </label>

        <label>
          Target Finish Date
          <br />
          <input type="date" name="due" />
        </label>
      </fieldset>
      <button type="submit" disabled={busy}>
        {busy ? "Creating..." : "Create"}
      </button>
    </Form>
  );
}

```

Copy code to clipboard

See:

- [`useNavigation`](https://reactrouter.com/6.30.0/hooks/use-navigation)

## Optimistic UI

Knowing the [`formData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) being sent to an [action](https://reactrouter.com/6.30.0/route/action) is often enough to skip the busy indicators and render the UI in the next state immediately, even if your asynchronous work is still pending. This is called "optimistic UI".

```
function LikeButton({ tweet }) {
  const fetcher = useFetcher();

  // if there is `formData` then it is posting to the action
  const liked = fetcher.formData
    ? // check the formData to be optimistic
      fetcher.formData.get("liked") === "yes"
    : // if its not posting to the action, use the record's value
      tweet.liked;

  return (
    <fetcher.Form method="post" action="toggle-liked">
      <button
        type="submit"
        name="liked"
        value={liked ? "yes" : "no"}
      />
    </fetcher.Form>
  );
}

```

Copy code to clipboard

(Yes, HTML buttons can have a `name` and a `value`).

While it is more common to do optimistic UI with a [`fetcher`](https://reactrouter.com/6.30.0/hooks/use-fetcher), you can do the same with a normal form using [`navigation.formData`](https://reactrouter.com/6.30.0/hooks/use-navigation#navigationformdata).

## Data Fetchers

HTML Forms are the model for mutations but they have one major limitation: you can have only one at a time because a form submission is a navigation.

Most web apps need to allow for multiple mutations to be happening at the same time, like a list of records where each can be independently deleted, marked complete, liked, etc.

[Fetchers](https://reactrouter.com/6.30.0/hooks/use-fetcher) allow you to interact with the route [actions](https://reactrouter.com/6.30.0/route/action) and [loaders](https://reactrouter.com/6.30.0/route/loader) without causing a navigation in the browser, but still getting all the conventional benefits like error handling, revalidation, interruption handling, and race condition handling.

Imagine a list of tasks:

```
function Tasks() {
  const tasks = useLoaderData();
  return tasks.map((task) => (
    <div>
      <p>{task.name}</p>
      <ToggleCompleteButton task={task} />
    </div>
  ));
}

```

Copy code to clipboard

Each task can be marked complete independently of the rest, with its own pending state and without causing a navigation with a [fetcher](https://reactrouter.com/6.30.0/hooks/use-fetcher):

```
function ToggleCompleteButton({ task }) {
  const fetcher = useFetcher();

  return (
    <fetcher.Form method="post" action="/toggle-complete">
      <fieldset disabled={fetcher.state !== "idle"}>
        <input type="hidden" name="id" value={task.id} />
        <input
          type="hidden"
          name="status"
          value={task.complete ? "incomplete" : "complete"}
        />
        <button type="submit">
          {task.status === "complete"
            ? "Mark Incomplete"
            : "Mark Complete"}
        </button>
      </fieldset>
    </fetcher.Form>
  );
}

```

Copy code to clipboard

See:

- [`useFetcher`](https://reactrouter.com/6.30.0/hooks/use-fetcher)

## Race Condition Handling

React Router will cancel stale operations and only commit fresh data automatically.

Any time you have asynchronous UI you have the risk of race conditions: when an async operation starts after but completes before an earlier operation. The result is a user interface that shows the wrong state.

Consider a search field that updates a list as the user types:

```
?q=ry    |---------------|
                         ^ commit wrong state
?q=ryan     |--------|
                     ^ lose correct state

```

Even though the query for `q?=ryan` went out later, it completed earlier. If not handled correctly, the results will briefly be the correct values for `?q=ryan` but then flip over the incorrect results for `?q=ry`. Throttling and debouncing are not enough (you can still interrupt the requests that get through). You need cancellation.

If you're using React Router's data conventions you avoid this problem completely and automatically.

```
?q=ry    |-----------X
                     ^ cancel wrong state when
                       correct state completes earlier
?q=ryan     |--------|
                     ^ commit correct state

```

Not only does React Router handle race conditions for a navigation like this, it also handles it for many other cases like loading results for an autocomplete or performing multiple concurrent mutations with [`fetcher`](https://reactrouter.com/6.30.0/hooks/use-fetcher) (and its automatic, concurrent revalidations).

## Error Handling

The vast majority of your application errors are handled automatically by React Router. It will catch any errors that are thrown while:

- rendering
- loading data
- updating data

In practice, this is pretty much every error in your app except those thrown in event handlers ( `<button onClick>`) or `useEffect`. React Router apps tend to have very few of either.

When an error is thrown, instead of rendering the route's [`element`](https://reactrouter.com/6.30.0/route/route#element), the [`errorElement`](https://reactrouter.com/6.30.0/route/error-element) is rendered.

```
<Route
  path="/"
  loader={() => {
    something.that.throws.an.error();
  }}
  // this will not be rendered
  element={<HappyPath />}
  // but this will instead
  errorElement={<ErrorBoundary />}
/>

```

Copy code to clipboard

If a route doesn't have an `errorElement`, the error will bubble to the nearest parent route with an `errorElement`:

```
<Route
  path="/"
  element={<HappyPath />}
  errorElement={<ErrorBoundary />}
>
  {/* Errors here bubble up to the parent route */}
  <Route path="login" element={<Login />} />
</Route>

```

Copy code to clipboard

See:

- [`<Route errorElement>`](https://reactrouter.com/6.30.0/route/error-element)
- [`useRouteError`](https://reactrouter.com/6.30.0/hooks/use-route-error)

## Scroll Restoration

React Router will emulate the browser's scroll restoration on navigation, waiting for data to load before scrolling. This ensures the scroll position is restored to the right spot.

You can also customize the behavior by restoring based on something other than locations (like a url pathname) and preventing the scroll from happening on certain links (like tabs in the middle of a page).

See:

- [`<ScrollRestoration>`](https://reactrouter.com/6.30.0/components/scroll-restoration)

## Web Standard APIs

React Router is built on web standard APIs. [Loaders](https://reactrouter.com/6.30.0/route/loader) and [actions](https://reactrouter.com/6.30.0/route/action) receive standard Web Fetch API [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) objects and can return [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) objects, too. Cancellation is done with [Abort Signals](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal), search params are handled with [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams), and data mutations are handled with [HTML Forms](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form).

When you get better at React Router, you get better at the web platform.

## Search Params

TODO:

## Location State

TODO:

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/framework/data-loading) [dev](https://reactrouter.com/dev/start/framework/data-loading)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Data Loading

On this page

- [Client Data Loading](https://reactrouter.com/start/framework/data-loading#client-data-loading)
- [Server Data Loading](https://reactrouter.com/start/framework/data-loading#server-data-loading)
- [Static Data Loading](https://reactrouter.com/start/framework/data-loading#static-data-loading)
- [Using Both Loaders](https://reactrouter.com/start/framework/data-loading#using-both-loaders)

- [Client Data Loading](https://reactrouter.com/start/framework/data-loading#client-data-loading)
- [Server Data Loading](https://reactrouter.com/start/framework/data-loading#server-data-loading)
- [Static Data Loading](https://reactrouter.com/start/framework/data-loading#static-data-loading)
- [Using Both Loaders](https://reactrouter.com/start/framework/data-loading#using-both-loaders)

# Data Loading

Data is provided to the route component from `loader` and `clientLoader`.

Loader data is automatically serialized from loaders and deserialized in components. In addition to primitive values like strings and numbers, loaders can return promises, maps, sets, dates and more.

The type for the `loaderData` prop is [automatically generated](https://reactrouter.com/explanation/type-safety).

## Client Data Loading

`clientLoader` is used to fetch data on the client. This is useful for pages or full projects that you'd prefer to fetch data from the browser only.

```
// route("products/:pid", "./product.tsx");
import type { Route } from "./+types/product";

export async function clientLoader({
  params,
}: Route.ClientLoaderArgs) {
  const res = await fetch(`/api/products/${params.pid}`);
  const product = await res.json();
  return product;
}

// HydrateFallback is rendered while the client loader is running
export function HydrateFallback() {
  return <div>Loading...</div>;
}

export default function Product({
  loaderData,
}: Route.ComponentProps) {
  const { name, description } = loaderData;
  return (
    <div>
      <h1>{name}</h1>
      <p>{description}</p>
    </div>
  );
}

```

Copy code to clipboard

## Server Data Loading

When server rendering, `loader` is used for both initial page loads and client navigations. Client navigations call the loader through an automatic `fetch` by React Router from the browser to your server.

```
// route("products/:pid", "./product.tsx");
import type { Route } from "./+types/product";
import { fakeDb } from "../db";

export async function loader({ params }: Route.LoaderArgs) {
  const product = await fakeDb.getProduct(params.pid);
  return product;
}

export default function Product({
  loaderData,
}: Route.ComponentProps) {
  const { name, description } = loaderData;
  return (
    <div>
      <h1>{name}</h1>
      <p>{description}</p>
    </div>
  );
}

```

Copy code to clipboard

Note that the `loader` function is removed from client bundles so you can use server only APIs without worrying about them being included in the browser.

## Static Data Loading

When pre-rendering, loaders are used to fetch data during the production build.

```
// route("products/:pid", "./product.tsx");
import type { Route } from "./+types/product";

export async function loader({ params }: Route.LoaderArgs) {
  let product = await getProductFromCSVFile(params.pid);
  return product;
}

export default function Product({
  loaderData,
}: Route.ComponentProps) {
  const { name, description } = loaderData;
  return (
    <div>
      <h1>{name}</h1>
      <p>{description}</p>
    </div>
  );
}

```

Copy code to clipboard

The URLs to pre-render are specified in react-router.config.ts:

```
import type { Config } from "@react-router/dev/config";

export default {
  async prerender() {
    let products = await readProductsFromCSVFile();
    return products.map(
      (product) => `/products/${product.id}`
    );
  },
} satisfies Config;

```

Copy code to clipboard

Note that when server rendering, any URLs that aren't pre-rendered will be server rendered as usual, allowing you to pre-render some data at a single route while still server rendering the rest.

## Using Both Loaders

`loader` and `clientLoader` can be used together. The `loader` will be used on the server for initial SSR (or pre-rendering) and the `clientLoader` will be used on subsequent client-side navigations.

```
// route("products/:pid", "./product.tsx");
import type { Route } from "./+types/product";
import { fakeDb } from "../db";

export async function loader({ params }: Route.LoaderArgs) {
  return fakeDb.getProduct(params.pid);
}

export async function clientLoader({
  serverLoader,
  params,
}: Route.ClientLoaderArgs) {
  const res = await fetch(`/api/products/${params.pid}`);
  const serverData = await serverLoader();
  return { ...serverData, ...res.json() };
}

export default function Product({
  loaderData,
}: Route.ComponentProps) {
  const { name, description } = loaderData;

  return (
    <div>
      <h1>{name}</h1>
      <p>{description}</p>
    </div>
  );
}

```

Copy code to clipboard

You can also force the client loader to run during hydration and before the page renders by setting the `hydrate` property on the function. In this situation you will want to render a `HydrateFallback` component to show a fallback UI while the client loader runs.

```
export async function loader() {
  /* ... */
}

export async function clientLoader() {
  /* ... */
}

// force the client loader to run during hydration
clientLoader.hydrate = true as const; // `as const` for type inference

export function HydrateFallback() {
  return <div>Loading...</div>;
}

export default function Product() {
  /* ... */
}

```

Copy code to clipboard

* * *

Next: [Actions](https://reactrouter.com/start/framework/actions)

See also:

- [Streaming with Suspense](https://reactrouter.com/how-to/suspense)
- [Client Data](https://reactrouter.com/how-to/client-data)
- [Using Fetchers](https://reactrouter.com/how-to/fetchers#loading-data)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/framework/data-loading.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/explanation/special-files) [dev](https://reactrouter.com/dev/explanation/special-files)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Special Files

On this page

- [react-router.config.ts](https://reactrouter.com/explanation/special-files#react-routerconfigts)
- [root.tsx](https://reactrouter.com/explanation/special-files#roottsx)
- [Layout export](https://reactrouter.com/explanation/special-files#layout-export)
- [routes.ts](https://reactrouter.com/explanation/special-files#routests)
- [entry.client.tsx](https://reactrouter.com/explanation/special-files#entryclienttsx)
- [entry.server.tsx](https://reactrouter.com/explanation/special-files#entryservertsx)
- [`streamTimeout`](https://reactrouter.com/explanation/special-files#streamtimeout)
- [`handleDataRequest`](https://reactrouter.com/explanation/special-files#handledatarequest)
- [`handleError`](https://reactrouter.com/explanation/special-files#handleerror)
- [Streaming Rendering Errors](https://reactrouter.com/explanation/special-files#streaming-rendering-errors)
- [`.server` modules](https://reactrouter.com/explanation/special-files#server-modules)
- [`.client` modules](https://reactrouter.com/explanation/special-files#client-modules)

- [react-router.config.ts](https://reactrouter.com/explanation/special-files#react-routerconfigts)
- [root.tsx](https://reactrouter.com/explanation/special-files#roottsx)
- [Layout export](https://reactrouter.com/explanation/special-files#layout-export)
- [routes.ts](https://reactrouter.com/explanation/special-files#routests)
- [entry.client.tsx](https://reactrouter.com/explanation/special-files#entryclienttsx)
- [entry.server.tsx](https://reactrouter.com/explanation/special-files#entryservertsx)
- [`streamTimeout`](https://reactrouter.com/explanation/special-files#streamtimeout)
- [`handleDataRequest`](https://reactrouter.com/explanation/special-files#handledatarequest)
- [`handleError`](https://reactrouter.com/explanation/special-files#handleerror)
- [Streaming Rendering Errors](https://reactrouter.com/explanation/special-files#streaming-rendering-errors)
- [`.server` modules](https://reactrouter.com/explanation/special-files#server-modules)
- [`.client` modules](https://reactrouter.com/explanation/special-files#client-modules)

# Special Files

There are a few special files that React Router looks for in your project. Not all of these files are required

## react-router.config.ts

**This file is optional**

The config file is used to configure certain aspects of your app, such as whether you are using server-side rendering, where certain directories are located, and more.

```
import type { Config } from "@react-router/dev/config";

export default {
  // Config options...
} satisfies Config;

```

Copy code to clipboard

See the details on [react-router config API](https://api.reactrouter.com/v7/types/_react_router_dev.config.Config.html) for more information.

## root.tsx

**This file is required**

The "root" route ( `app/root.tsx`) is the only _required_ route in your React Router application because it is the parent to all routes in your `routes/` directory and is in charge of rendering the root `<html>` document.

Because the root route manages your document, it is the proper place to render a handful of "document-level" components React Router provides. These components are to be used once inside your root route and they include everything React Router figured out or built in order for your page to render properly.

```
import type { LinksFunction } from "react-router";
import {
  Links,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from "react-router";

import "./global-styles.css";

export default function App() {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />

        {/* All `meta` exports on all routes will render here */}
        <Meta />

        {/* All `link` exports on all routes will render here */}
        <Links />
      </head>
      <body>
        {/* Child routes render here */}
        <Outlet />

        {/* Manages scroll position for client-side transitions */}
        {/* If you use a nonce-based content security policy for scripts, you must provide the `nonce` prop. Otherwise, omit the nonce prop as shown here. */}
        <ScrollRestoration />

        {/* Script tags go here */}
        {/* If you use a nonce-based content security policy for scripts, you must provide the `nonce` prop. Otherwise, omit the nonce prop as shown here. */}
        <Scripts />
      </body>
    </html>
  );
}

```

Copy code to clipboard

### Layout export

The root route supports all [route module exports](https://reactrouter.com/start/framework/route-module).

The root route also supports an additional optional `Layout` export. The `Layout` component serves 2 purposes:

1. Avoid duplicating your document's "app shell" across your root component, `HydrateFallback`, and `ErrorBoundary`
2. Prevent React from re-mounting your app shell elements when switching between the root component/ `HydrateFallback`/ `ErrorBoundary` which can cause a FOUC if React removes and re-adds `<link rel="stylesheet">` tags from your `<Links>` component.

```
export function Layout({ children }) {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <Meta />
        <Links />
      </head>
      <body>
        {/* children will be the root Component, ErrorBoundary, or HydrateFallback */}
        {children}
        <Scripts />
        <ScrollRestoration />
      </body>
    </html>
  );
}

export default function App() {
  return <Outlet />;
}

export function ErrorBoundary() {}

```

Copy code to clipboard

**A note on `useLoaderData` in the `Layout` Component**

`useLoaderData` is not permitted to be used in `ErrorBoundary` components because it is intended for the happy-path route rendering, and its typings have a built-in assumption that the `loader` ran successfully and returned something. That assumption doesn't hold in an `ErrorBoundary` because it could have been the `loader` that threw and triggered the boundary! In order to access loader data in `ErrorBoundary`'s, you can use `useRouteLoaderData` which accounts for the loader data potentially being `undefined`.

Because your `Layout` component is used in both success and error flows, this same restriction holds. If you need to fork logic in your `Layout` depending on if it was a successful request or not, you can use `useRouteLoaderData("root")` and `useRouteError()`.

Because your `<Layout>` component is used for rendering the `ErrorBoundary`, you should be _very defensive_ to ensure that you can render your `ErrorBoundary` without encountering any render errors. If your `Layout` throws another error trying to render the boundary, then it can't be used and your UI will fall back to the very minimal built-in default `ErrorBoundary`.

```
export function Layout({
  children,
}: {
  children: React.ReactNode;
}) {
  const data = useRouteLoaderData("root");
  const error = useRouteError();

  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <Meta />
        <Links />
        <style
          dangerouslySetInnerHTML={{
            __html: `
              :root {
                --themeVar: ${
                  data?.themeVar || defaultThemeVar
                }
              }
            `,
          }}
        />
      </head>
      <body>
        {data ? (
          <Analytics token={data.analyticsToken} />
        ) : null}
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

```

Copy code to clipboard

## routes.ts

**This file is required**

The `routes.ts` file is used to configure which url patterns are matched to which route modules.

```
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [\
  route("some/path", "./some/file.tsx"),\
  // pattern ^           ^ module file\
] satisfies RouteConfig;

```

Copy code to clipboard

See the [routing guide](https://reactrouter.com/start/framework/routing) for more information.

## entry.client.tsx

**This file is optional**

By default, React Router will handle hydrating your app on the client for you. You can reveal the default entry client file with the following:

```
react-router reveal

```

Copy code to clipboard

This file is the entry point for the browser and is responsible for hydrating the markup generated by the server in your [server entry module](https://reactrouter.com/explanation/special-files#entryservertsx), however you can also initialize any other client-side code here.

```
import { startTransition, StrictMode } from "react";
import { hydrateRoot } from "react-dom/client";
import { HydratedRouter } from "react-router/dom";

startTransition(() => {
  hydrateRoot(
    document,
    <StrictMode>
      <HydratedRouter />
    </StrictMode>
  );
});

```

Copy code to clipboard

This is the first piece of code that runs in the browser. You can initialize client side libraries, add client only providers, etc.

## entry.server.tsx

**This file is optional**

By default, React Router will handle generating the HTTP Response for you. You can reveal the default entry server file with the following:

```
react-router reveal

```

Copy code to clipboard

The `default` export of this module is a function that lets you create the response, including HTTP status, headers, and HTML, giving you full control over the way the markup is generated and sent to the client.

This module should render the markup for the current page using a `<ServerRouter>` element with the `context` and `url` for the current request. This markup will (optionally) be re-hydrated once JavaScript loads in the browser using the [client entry module](https://reactrouter.com/explanation/special-files#entryclienttsx).

### `streamTimeout`

If you are [streaming](https://reactrouter.com/how-to/suspense) responses, you can export an optional `streamTimeout` value (in milliseconds) that will control the amount of time the server will wait for streamed promises to settle before rejecting outstanding promises them and closing the stream.

It's recommended to decouple this value from the timeout in which you abort the React renderer. You should always set the React rendering timeout to a higher value so it has time to stream down the underlying rejections from your `streamTimeout`.

```
// Reject all pending promises from handler functions after 10 seconds
export const streamTimeout = 10000;

export default function handleRequest(...) {
  return new Promise((resolve, reject) => {
    // ...

    const { pipe, abort } = renderToPipeableStream(
      <ServerRouter context={routerContext} url={request.url} />,
      { /* ... */ }
    );

    // Abort the streaming render pass after 11 seconds to allow the rejected
    // boundaries to be flushed
    setTimeout(abort, streamTimeout + 1000);
  });
}

```

Copy code to clipboard

### `handleDataRequest`

You can export an optional `handleDataRequest` function that will allow you to modify the response of a data request. These are the requests that do not render HTML, but rather return the loader and action data to the browser once client-side hydration has occurred.

```
export function handleDataRequest(
  response: Response,
  {
    request,
    params,
    context,
  }: LoaderFunctionArgs | ActionFunctionArgs
) {
  response.headers.set("X-Custom-Header", "value");
  return response;
}

```

Copy code to clipboard

### `handleError`

By default, React Router will log encountered server-side errors to the console. If you'd like more control over the logging, or would like to also report these errors to an external service, then you can export an optional `handleError` function which will give you control (and will disable the built-in error logging).

```
export function handleError(
  error: unknown,
  {
    request,
    params,
    context,
  }: LoaderFunctionArgs | ActionFunctionArgs
) {
  if (!request.signal.aborted) {
    sendErrorToErrorReportingService(error);
    console.error(formatErrorForJsonLogging(error));
  }
}

```

Copy code to clipboard

_Note that you generally want to avoid logging when the request was aborted, since React Router's cancellation and race-condition handling can cause a lot of requests to be aborted._

### Streaming Rendering Errors

When you are streaming your HTML responses via [`renderToPipeableStream`](https://react.dev/reference/react-dom/server/renderToPipeableStream) or [`renderToReadableStream`](https://react.dev/reference/react-dom/server/renderToReadableStream), your own `handleError` implementation will only handle errors encountered during the initial shell render. If you encounter a rendering error during subsequent streamed rendering you will need to handle these errors manually since the React Router server has already sent the Response by that point.

For `renderToPipeableStream`, you can handle these errors in the `onError` callback function. You will need to toggle a boolean in `onShellReady` so you know if the error was a shell rendering error (and can be ignored) or an async

For an example, please refer to the default [`entry.server.tsx`](https://github.com/remix-run/react-router/blob/dev/packages/react-router-dev/config/defaults/entry.server.node.tsx) for Node.

**Thrown Responses**

Note that this does not handle thrown `Response` instances from your `loader`/ `action` functions. The intention of this handler is to find bugs in your code which result in unexpected thrown errors. If you are detecting a scenario and throwing a 401/404/etc. `Response` in your `loader`/ `action` then it's an expected flow that is handled by your code. If you also wish to log, or send those to an external service, that should be done at the time you throw the response.

## `.server` modules

While not strictly necessary, `.server` modules are a good way to explicitly mark entire modules as server-only.
The build will fail if any code in a `.server` file or `.server` directory accidentally ends up in the client module graph.

```txt
app
├── .server 👈 marks all files in this directory as server-only
│   ├── auth.ts
│   └── db.ts
├── cms.server.ts 👈 marks this file as server-only
├── root.tsx
└── routes.ts

```

`.server` modules must be within your app directory.

Refer to the Route Module section in the sidebar for more information.

## `.client` modules

While uncommon, you may have a file or dependency that uses module side effects in the browser. You can use `*.client.ts` on file names or nest files within `.client` directories to force them out of server bundles.

```
// this would break the server
export const supportsVibrationAPI =
  "vibrate" in window.navigator;

```

Copy code to clipboard

Note that values exported from this module will all be `undefined` on the server, so the only places to use them are in [`useEffect`](https://react.dev/reference/react/useEffect) and user events like click handlers.

```
import { supportsVibrationAPI } from "./feature-check.client.ts";

console.log(supportsVibrationAPI);
// server: undefined
// client: true | false

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/explanation/special-files.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Outlet

# `<Outlet>`

Type declaration

```
interface OutletProps {
  context?: unknown;
}
declare function Outlet(
  props: OutletProps
): React.ReactElement | null;

```

Copy code to clipboard

An `<Outlet>` should be used in parent route elements to render their child route elements. This allows nested UI to show up when child routes are rendered. If the parent route matched exactly, it will render a child index route or nothing if there is no index route.

```
function Dashboard() {
  return (
    <div>
      <h1>Dashboard</h1>

      {/* This element will render either <DashboardMessages> when the URL is
          "/messages", <DashboardTasks> at "/tasks", or null if it is "/"
      */}
      <Outlet />
    </div>
  );
}

function App() {
  return (
    <Routes>
      <Route path="/" element={<Dashboard />}>
        <Route
          path="messages"
          element={<DashboardMessages />}
        />
        <Route path="tasks" element={<DashboardTasks />} />
      </Route>
    </Routes>
  );
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)

# React Router API Reference

### Index

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR[Remix](https://remix.run/)

/

[React Router](https://github.com/remix-run/react-router)

[Github](https://github.com/remix-run/react-router) [NPM](https://www.npmjs.com/package/react-router) [Get Training](https://reacttraining.com/)

![React Router logo](<Base64-Image-Removed>)

Learn once, Route anywhere

## React Router

Components are the heart of React's powerful, declarative programming model. React Router is a collection of **navigational components** that compose declaratively with your application. Whether you want to have **bookmarkable URLs** for your web app or a composable way to navigate in **React Native**, React Router works wherever React is rendering--so take your pick!

[Web](https://v5.reactrouter.com/web) [Native](https://v5.reactrouter.com/native)

React Router Introduction - YouTube

React Training

4.69K subscribers

[React Router Introduction](https://www.youtube.com/watch?v=cKnc8gXn80Q)

React Training

Search

Watch later

Share

Copy link

Info

Shopping

Tap to unmute

If playback doesn't begin shortly, try restarting your device.

More videos

## More videos

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

[Watch on](https://www.youtube.com/watch?v=cKnc8gXn80Q&embeds_referring_euri=https%3A%2F%2Fv5.reactrouter.com%2F)

0:00

0:00 / 9:03•Live

•

[Watch on YouTube](https://www.youtube.com/watch?v=cKnc8gXn80Q "Watch on YouTube")

Sign up to receive updates about React Router, [our React workshops](https://reacttraining.com/), and more:

Subscribe

React Router is built and maintained by [Remix Software](https://remix.run/) and hundreds of [contributors](https://github.com/remix-run/react-router/graphs/contributors).

© 2025 Remix Software

Code examples and documentation [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/how-to/error-boundary) [dev](https://reactrouter.com/dev/how-to/error-boundary)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Error Boundaries

On this page

- [1\. Add a root error boundary](https://reactrouter.com/how-to/error-boundary#1-add-a-root-error-boundary)
- [2\. Write a bug](https://reactrouter.com/how-to/error-boundary#2-write-a-bug)
- [3\. Throw data in loaders/actions](https://reactrouter.com/how-to/error-boundary#3-throw-data-in-loadersactions)
- [4\. Nested error boundaries](https://reactrouter.com/how-to/error-boundary#4-nested-error-boundaries)
- [Error Sanitization](https://reactrouter.com/how-to/error-boundary#error-sanitization)

- [1\. Add a root error boundary](https://reactrouter.com/how-to/error-boundary#1-add-a-root-error-boundary)
- [2\. Write a bug](https://reactrouter.com/how-to/error-boundary#2-write-a-bug)
- [3\. Throw data in loaders/actions](https://reactrouter.com/how-to/error-boundary#3-throw-data-in-loadersactions)
- [4\. Nested error boundaries](https://reactrouter.com/how-to/error-boundary#4-nested-error-boundaries)
- [Error Sanitization](https://reactrouter.com/how-to/error-boundary#error-sanitization)

# Error Boundaries

To avoid rendering an empty page to users, route modules will automatically catch errors in your code and render the closest `ErrorBoundary`.

Error boundaries are not intended for error reporting or rendering form validation errors. Please see [Form Validation](https://reactrouter.com/how-to/form-validation) and [Error Reporting](https://reactrouter.com/how-to/error-reporting) instead.

## 1\. Add a root error boundary

All applications should at a minimum export a root error boundary. This one handles the three main cases:

- Thrown `data` with a status code and text
- Instances of errors with a stack trace
- Randomly thrown values

```
import { Route } from "./+types/root";

export function ErrorBoundary({
  error,
}: Route.ErrorBoundaryProps) {
  if (isRouteErrorResponse(error)) {
    return (
      <>
        <h1>
          {error.status} {error.statusText}
        </h1>
        <p>{error.data}</p>
      </>
    );
  } else if (error instanceof Error) {
    return (
      <div>
        <h1>Error</h1>
        <p>{error.message}</p>
        <p>The stack trace is:</p>
        <pre>{error.stack}</pre>
      </div>
    );
  } else {
    return <h1>Unknown Error</h1>;
  }
}

```

Copy code to clipboard

## 2\. Write a bug

It's not recommended to intentionally throw errors to force the error boundary to render as a means of control flow. Error Boundaries are primarily for catching unintentional errors in your code.

```
export async function loader() {
  return undefined();
}

```

Copy code to clipboard

This will render the `instanceof Error` branch of the UI from step 1.

This is not just for loaders, but for all route module APIs: loaders, actions, components, headers, links, and meta.

## 3\. Throw data in loaders/actions

There are exceptions to the rule in #2, especially 404s. You can intentionally `throw data()` (with a proper status code) to the closest error boundary when your loader can't find what it needs to render the page. Throw a 404 and move on.

```
import { data } from "react-router";

export async function loader({ params }) {
  let record = await fakeDb.getRecord(params.id);
  if (!record) {
    throw data("Record Not Found", { status: 404 });
  }
  return record;
}

```

Copy code to clipboard

This will render the `isRouteErrorResponse` branch of the UI from step 1.

## 4\. Nested error boundaries

When an error is thrown, the "closest error boundary" will be rendered. Consider these nested routes:

```
// ✅ has error boundary
route("/app", "app.tsx", [\
  // ❌ no error boundary\
  route("invoices", "invoices.tsx", [\
    // ✅ has error boundary\
    route("invoices/:id", "invoice-page.tsx", [\
      // ❌ no error boundary\
      route("payments", "payments.tsx"),\
    ]),\
  ]),\
]);

```

Copy code to clipboard

The following table shows which error boundary will render given the origin of the error:

| error origin | rendered boundary |
| --- | --- |
| app.tsx | app.tsx |
| invoices.tsx | app.tsx |
| invoice-page.tsx | invoice-page.tsx |
| payments.tsx | invoice-page.tsx |

## Error Sanitization

In production mode, any errors that happen on the server are automatically sanitized before being sent to the browser to prevent leaking any sensitive server information (like stack traces).

This means that a thrown `Error` will have a generic message and no stack trace in production in the browser. The original error is untouched on the server.

Also note that data sent with `throw data(yourData)` is not sanitized as the data there is intended to be rendered.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/how-to/error-boundary.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/how-to/fetchers) [dev](https://reactrouter.com/dev/how-to/fetchers)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Using Fetchers

On this page

- [Calling Actions](https://reactrouter.com/how-to/fetchers#calling-actions)
- [1\. Add an action](https://reactrouter.com/how-to/fetchers#1-add-an-action)
- [2\. Create a fetcher](https://reactrouter.com/how-to/fetchers#2-create-a-fetcher)
- [3\. Submit the form](https://reactrouter.com/how-to/fetchers#3-submit-the-form)
- [4\. Render pending state](https://reactrouter.com/how-to/fetchers#4-render-pending-state)
- [5\. Optimistic UI](https://reactrouter.com/how-to/fetchers#5-optimistic-ui)
- [6\. Fetcher Data and Validation](https://reactrouter.com/how-to/fetchers#6-fetcher-data-and-validation)
- [Loading Data](https://reactrouter.com/how-to/fetchers#loading-data)
- [1\. Create a search route](https://reactrouter.com/how-to/fetchers#1-create-a-search-route)
- [2\. Render a fetcher in a combobox component](https://reactrouter.com/how-to/fetchers#2-render-a-fetcher-in-a-combobox-component)
- [3\. Add type inference](https://reactrouter.com/how-to/fetchers#3-add-type-inference)
- [4\. Render the data](https://reactrouter.com/how-to/fetchers#4-render-the-data)
- [5\. Render a pending state](https://reactrouter.com/how-to/fetchers#5-render-a-pending-state)
- [6\. Search on user input](https://reactrouter.com/how-to/fetchers#6-search-on-user-input)

- [Calling Actions](https://reactrouter.com/how-to/fetchers#calling-actions)
- [1\. Add an action](https://reactrouter.com/how-to/fetchers#1-add-an-action)
- [2\. Create a fetcher](https://reactrouter.com/how-to/fetchers#2-create-a-fetcher)
- [3\. Submit the form](https://reactrouter.com/how-to/fetchers#3-submit-the-form)
- [4\. Render pending state](https://reactrouter.com/how-to/fetchers#4-render-pending-state)
- [5\. Optimistic UI](https://reactrouter.com/how-to/fetchers#5-optimistic-ui)
- [6\. Fetcher Data and Validation](https://reactrouter.com/how-to/fetchers#6-fetcher-data-and-validation)
- [Loading Data](https://reactrouter.com/how-to/fetchers#loading-data)
- [1\. Create a search route](https://reactrouter.com/how-to/fetchers#1-create-a-search-route)
- [2\. Render a fetcher in a combobox component](https://reactrouter.com/how-to/fetchers#2-render-a-fetcher-in-a-combobox-component)
- [3\. Add type inference](https://reactrouter.com/how-to/fetchers#3-add-type-inference)
- [4\. Render the data](https://reactrouter.com/how-to/fetchers#4-render-the-data)
- [5\. Render a pending state](https://reactrouter.com/how-to/fetchers#5-render-a-pending-state)
- [6\. Search on user input](https://reactrouter.com/how-to/fetchers#6-search-on-user-input)

# Using Fetchers

Fetchers are useful for creating complex, dynamic user interfaces that require multiple, concurrent data interactions without causing a navigation.

Fetchers track their own, independent state and can be used to load data, mutate data, submit forms, and generally interact with loaders and actions.

## Calling Actions

The most common case for a fetcher is to submit data to an action, triggering a revalidation of route data. Consider the following route module:

```
import { useLoaderData } from "react-router";

export async function clientLoader({ request }) {
  let title = localStorage.getItem("title") || "No Title";
  return { title };
}

export default function Component() {
  let data = useLoaderData();
  return (
    <div>
      <h1>{data.title}</h1>
    </div>
  );
}

```

Copy code to clipboard

### 1\. Add an action

First we'll add an action to the route for the fetcher to call:

```
import { useLoaderData } from "react-router";

export async function clientLoader({ request }) {
  // ...
}

export async function clientAction({ request }) {
  await new Promise((res) => setTimeout(res, 1000));
  let data = await request.formData();
  localStorage.setItem("title", data.get("title"));
  return { ok: true };
}

export default function Component() {
  let data = useLoaderData();
  // ...
}

```

Copy code to clipboard

### 2\. Create a fetcher

Next create a fetcher and render a form with it:

```
import { useLoaderData, useFetcher } from "react-router";

// ...

export default function Component() {
  let data = useLoaderData();
  let fetcher = useFetcher();
  return (
    <div>
      <h1>{data.title}</h1>

      <fetcher.Form method="post">
        <input type="text" name="title" />
      </fetcher.Form>
    </div>
  );
}

```

Copy code to clipboard

### 3\. Submit the form

If you submit the form now, the fetcher will call the action and revalidate the route data automatically.

### 4\. Render pending state

Fetchers make their state available during the async work so you can render pending UI the moment the user interacts:

```
export default function Component() {
  let data = useLoaderData();
  let fetcher = useFetcher();
  return (
    <div>
      <h1>{data.title}</h1>

      <fetcher.Form method="post">
        <input type="text" name="title" />
        {fetcher.state !== "idle" && <p>Saving...</p>}
      </fetcher.Form>
    </div>
  );
}

```

Copy code to clipboard

### 5\. Optimistic UI

Sometimes there's enough information in the form to render the next state immediately. You can access the form data with `fetcher.formData`:

```
export default function Component() {
  let data = useLoaderData();
  let fetcher = useFetcher();
  let title = fetcher.formData?.get("title") || data.title;

  return (
    <div>
      <h1>{title}</h1>

      <fetcher.Form method="post">
        <input type="text" name="title" />
        {fetcher.state !== "idle" && <p>Saving...</p>}
      </fetcher.Form>
    </div>
  );
}

```

Copy code to clipboard

### 6\. Fetcher Data and Validation

Data returned from an action is available in the fetcher's `data` property. This is primarily useful for returning error messages to the user for a failed mutation:

```
// ...

export async function clientAction({ request }) {
  await new Promise((res) => setTimeout(res, 1000));
  let data = await request.formData();

  let title = data.get("title") as string;
  if (title.trim() === "") {
    return { ok: false, error: "Title cannot be empty" };
  }

  localStorage.setItem("title", title);
  return { ok: true, error: null };
}

export default function Component() {
  let data = useLoaderData();
  let fetcher = useFetcher();
  let title = fetcher.formData?.get("title") || data.title;

  return (
    <div>
      <h1>{title}</h1>

      <fetcher.Form method="post">
        <input type="text" name="title" />
        {fetcher.state !== "idle" && <p>Saving...</p>}
        {fetcher.data?.error && (
          <p style={{ color: "red" }}>
            {fetcher.data.error}
          </p>
        )}
      </fetcher.Form>
    </div>
  );
}

```

Copy code to clipboard

## Loading Data

Another common use case for fetchers is to load data from a route for something like a combobox.

### 1\. Create a search route

Consider the following route with a very basic search:

```
// { path: '/search-users', filename: './search-users.tsx' }
const users = [\
  { id: 1, name: "Ryan" },\
  { id: 2, name: "Michael" },\
  // ...\
];

export async function loader({ request }) {
  await new Promise((res) => setTimeout(res, 300));
  let url = new URL(request.url);
  let query = url.searchParams.get("q");
  return users.filter((user) =>
    user.name.toLowerCase().includes(query.toLowerCase())
  );
}

```

Copy code to clipboard

### 2\. Render a fetcher in a combobox component

```
import { useFetcher } from "react-router";

export function UserSearchCombobox() {
  let fetcher = useFetcher();
  return (
    <div>
      <fetcher.Form method="get" action="/search-users">
        <input type="text" name="q" />
      </fetcher.Form>
    </div>
  );
}

```

Copy code to clipboard

- The action points to the route we created above: "/search-users"
- The name of the input is "q" to match the query parameter

### 3\. Add type inference

```
import { useFetcher } from "react-router";
import type { Search } from "./search-users";

export function UserSearchCombobox() {
  let fetcher = useFetcher<typeof Search.action>();
  // ...
}

```

Copy code to clipboard

Ensure you use `import type` so you only import the types.

### 4\. Render the data

```
import { useFetcher } from "react-router";

export function UserSearchCombobox() {
  let fetcher = useFetcher<typeof Search.action>();
  return (
    <div>
      <fetcher.Form method="get" action="/search-users">
        <input type="text" name="q" />
      </fetcher.Form>
      {fetcher.data && (
        <ul>
          {fetcher.data.map((user) => (
            <li key={user.id}>{user.name}</li>
          ))}
        </ul>
      )}
    </div>
  );
}

```

Copy code to clipboard

Note you will need to hit "enter" to submit the form and see the results.

### 5\. Render a pending state

```
import { useFetcher } from "react-router";

export function UserSearchCombobox() {
  let fetcher = useFetcher<typeof Search.action>();
  return (
    <div>
      <fetcher.Form method="get" action="/search-users">
        <input type="text" name="q" />
      </fetcher.Form>
      {fetcher.data && (
        <ul
          style={{
            opacity: fetcher.state === "idle" ? 1 : 0.25,
          }}
        >
          {fetcher.data.map((user) => (
            <li key={user.id}>{user.name}</li>
          ))}
        </ul>
      )}
    </div>
  );
}

```

Copy code to clipboard

### 6\. Search on user input

Fetchers can be submitted programmatically with `fetcher.submit`:

```
<fetcher.Form method="get" action="/search-users">
  <input
    type="text"
    name="q"
    onChange={(event) => {
      fetcher.submit(event.currentTarget.form);
    }}
  />
</fetcher.Form>

```

Copy code to clipboard

Note the input event's form is passed as the first argument to `fetcher.submit`. The fetcher will use that form to submit the request, reading its attributes and serializing the data from its elements.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/how-to/fetchers.md)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [@react-router/architect](https://api.reactrouter.com/v7/modules/_react_router_architect.html)
- [createArcTableSessionStorage](https://api.reactrouter.com/v7/functions/_react_router_architect.createArcTableSessionStorage.html)

# Function createArcTableSessionStorage

- createArcTableSessionStorage< [Data](https://api.reactrouter.com/v7/functions/_react_router_architect.createArcTableSessionStorage.html#createArcTableSessionStorage.Data), [FlashData](https://api.reactrouter.com/v7/functions/_react_router_architect.createArcTableSessionStorage.html#createArcTableSessionStorage.FlashData) >(\_\_namedParameters): SessionStorage< [Data](https://api.reactrouter.com/v7/functions/_react_router_architect.createArcTableSessionStorage.html#createArcTableSessionStorage.Data), [FlashData](https://api.reactrouter.com/v7/functions/_react_router_architect.createArcTableSessionStorage.html#createArcTableSessionStorage.FlashData) > [Permalink](https://api.reactrouter.com/v7/functions/_react_router_architect.createArcTableSessionStorage#createArcTableSessionStorage)
- Session storage using a DynamoDB table managed by Architect.



Add the following lines to your project's `app.arc` file:




#### Type Parameters



- Data = SessionData
- FlashData = [Data](https://api.reactrouter.com/v7/functions/_react_router_architect.createArcTableSessionStorage.html#createArcTableSessionStorage.Data)

#### Parameters

- \_\_namedParameters: ArcTableSessionStorageOptions

#### Returns SessionStorage< [Data](https://api.reactrouter.com/v7/functions/_react_router_architect.createArcTableSessionStorage.html\#createArcTableSessionStorage.Data), [FlashData](https://api.reactrouter.com/v7/functions/_react_router_architect.createArcTableSessionStorage.html\#createArcTableSessionStorage.FlashData) >

#### Tables [Permalink](https://api.reactrouter.com/v7/functions/_react_router_architect.createArcTableSessionStorage\#Tables)

arc-sessions
\_idx \*String
\_ttl TTL

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.29.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Contributing

On this page

- [Setup](https://reactrouter.com/6.29.0/guides/contributing#setup)
- [Think You Found a Bug?](https://reactrouter.com/6.29.0/guides/contributing#think-you-found-a-bug)
- [Adding an Example?](https://reactrouter.com/6.29.0/guides/contributing#adding-an-example)
- [Proposing New or Changed API?](https://reactrouter.com/6.29.0/guides/contributing#proposing-new-or-changed-api)
- [Issue Not Getting Attention?](https://reactrouter.com/6.29.0/guides/contributing#issue-not-getting-attention)
- [Making a Pull Request?](https://reactrouter.com/6.29.0/guides/contributing#making-a-pull-request)
- [Tests](https://reactrouter.com/6.29.0/guides/contributing#tests)
- [Docs + Examples](https://reactrouter.com/6.29.0/guides/contributing#docs--examples)
- [Development](https://reactrouter.com/6.29.0/guides/contributing#development)
- [Packages](https://reactrouter.com/6.29.0/guides/contributing#packages)
- [Building](https://reactrouter.com/6.29.0/guides/contributing#building)
- [Testing](https://reactrouter.com/6.29.0/guides/contributing#testing)
- [Repository Branching](https://reactrouter.com/6.29.0/guides/contributing#repository-branching)
- [New Releases](https://reactrouter.com/6.29.0/guides/contributing#new-releases)
- [`react-router@next` Releases](https://reactrouter.com/6.29.0/guides/contributing#react-routernext-releases)
- [Latest Major Releases](https://reactrouter.com/6.29.0/guides/contributing#latest-major-releases)
- [Hot-fix Releases](https://reactrouter.com/6.29.0/guides/contributing#hot-fix-releases)

- [Setup](https://reactrouter.com/6.29.0/guides/contributing#setup)
- [Think You Found a Bug?](https://reactrouter.com/6.29.0/guides/contributing#think-you-found-a-bug)
- [Adding an Example?](https://reactrouter.com/6.29.0/guides/contributing#adding-an-example)
- [Proposing New or Changed API?](https://reactrouter.com/6.29.0/guides/contributing#proposing-new-or-changed-api)
- [Issue Not Getting Attention?](https://reactrouter.com/6.29.0/guides/contributing#issue-not-getting-attention)
- [Making a Pull Request?](https://reactrouter.com/6.29.0/guides/contributing#making-a-pull-request)
- [Tests](https://reactrouter.com/6.29.0/guides/contributing#tests)
- [Docs + Examples](https://reactrouter.com/6.29.0/guides/contributing#docs--examples)
- [Development](https://reactrouter.com/6.29.0/guides/contributing#development)
- [Packages](https://reactrouter.com/6.29.0/guides/contributing#packages)
- [Building](https://reactrouter.com/6.29.0/guides/contributing#building)
- [Testing](https://reactrouter.com/6.29.0/guides/contributing#testing)
- [Repository Branching](https://reactrouter.com/6.29.0/guides/contributing#repository-branching)
- [New Releases](https://reactrouter.com/6.29.0/guides/contributing#new-releases)
- [`react-router@next` Releases](https://reactrouter.com/6.29.0/guides/contributing#react-routernext-releases)
- [Latest Major Releases](https://reactrouter.com/6.29.0/guides/contributing#latest-major-releases)
- [Hot-fix Releases](https://reactrouter.com/6.29.0/guides/contributing#hot-fix-releases)

# Contributing to React Router

Thanks for contributing, you rock!

When it comes to open source, there are many different kinds of contributions that can be made, all of which are valuable. Here are a few guidelines that should help you as you prepare your contribution.

## Setup

Before you can contribute to the codebase, you will need to fork the repo. This will look a bit different depending on what type of contribution you are making:

- All new features, bug-fixes, or **anything that touches `react-router` code** should be branched off of and merged into the `dev` branch
- Changes that only touch documentation can be branched off of and merged into the `main` branch

The following steps will get you set up to contribute changes to this repo:

1. Fork the repo (click the `Fork` button at the top right of [this page](https://github.com/remix-run/react-router))
2. Clone your fork locally

```bash
# in a terminal, cd to parent directory where you want your clone to be, then
git clone https://github.com/<your_github_username>/react-router.git
cd react-router

# if you are making *any* code changes, make sure to checkout the dev branch
git checkout dev

```

3. Install dependencies and build. React Router uses [pnpm](https://pnpm.io/), so you should too. If you install using `npm`, unnecessary `package-lock.json` files will be generated.

## Think You Found a Bug?

Please conform to the issue template and provide a clear path to reproduction with a code example. Best is a pull request with a failing test. Next best is a link to CodeSandbox or repository that illustrates the bug.

## Adding an Example?

Examples can be added directly to the main branch. Create a branch off of your local clone of main. Once you've finished, create a pull request and outline your example.

## Proposing New or Changed API?

Please provide thoughtful comments and some sample code that show what you'd like to do with React Router in your app. It helps the conversation if you can show us how you're limited by the current API first before jumping to a conclusion about what needs to be changed and/or added.

We have learned by experience that small APIs are usually better, so we may be a little reluctant to add something new unless there's an obvious limitation with the current API. That being said, we are always anxious to hear about cases that we just haven't considered before, so please don't be shy! :)

## Issue Not Getting Attention?

If you need a bug fixed and nobody is fixing it, your best bet is to provide a fix for it and make a [pull request](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request). Open source code belongs to all of us, and it's all of our responsibility to push it forward.

## Making a Pull Request?

Pull requests need only the approval of two or more collaborators to be merged; when the PR author is a collaborator, that counts as one.

When creating the PR in GitHub, make sure that you set the base to the correct branch. If you are submitting a PR that touches any code, this should be the `dev` branch. You set the base in GitHub when authoring the PR with the dropdown below the "Compare changes" heading: ![](https://raw.githubusercontent.com/remix-run/react-router/main/static/base-branch.png)

### Tests

All commits that fix bugs or add features need a test.

`<blink>` Do not merge code without tests! `</blink>`

### Docs + Examples

All commits that change or add to the API must be done in a pull request that also updates all relevant examples and docs.

## Development

### Packages

React Router uses a monorepo to host code for multiple packages. These packages live in the `packages` directory.

We use [pnpm workspaces](https://pnpm.io/workspaces/) to manage installation of dependencies and running various scripts. To get everything installed, make sure you have [pnpm installed](https://pnpm.io/installation), and then run `pnpm install` from the repo root.

### Building

Calling `pnpm build` from the root directory will run the build, which should take only a few seconds. It's important to build all the packages together because `react-router-dom` and `react-router-native` both use `react-router` as a dependency.

### Testing

Before running the tests, you need to run a build. After you build, running `pnpm test` from the root directory will run **every** package's tests. If you want to run tests for a specific package, use `pnpm test --projects packages/<package-name>`:

```bash
# Test all packages
pnpm test

# Test only react-router-dom
pnpm test --projects packages/react-router-dom

```

## Repository Branching

This repo maintains separate branches for different purposes. They will look something like this:

```
- main   > the most recent release and current docs
- dev    > code under active development between stable releases
- v5     > the most recent code for a specific major release

```

There may be other branches for various features and experimentation, but all of the magic happens from these branches.

## New Releases

When it's time to cut a new release, we follow a process based on our branching strategy depending on the type of release.

### `react-router@next` Releases

We create experimental releases from the current state of the `dev` branch. They can be installed by using the `@next` tag:

```bash
pnpm add react-router-dom@next
# or
npm install react-router-dom@next

```

These releases will be automated as PRs are merged into the `dev` branch.

### Latest Major Releases

```bash
# Start from the dev branch.
git checkout dev

# Merge the main branch into dev to ensure that any hotfixes and
# docs updates are available in the release.
git merge main

# Create a new release branch from dev.
git checkout -b release/v6.1.0

# Create a new tag and update version references throughout the
# codebase.
pnpm run version minor # | "patch" | "major"

# Push the release branch along with the new release tag.
git push origin release/v6.1.0 --follow-tags

# Wait for GitHub actions to run all tests. If the tests pass, the
# release is ready to go! Merge the release branch into main and dev.
git checkout main
git merge release/v6.1.0
git checkout dev
git merge release/v6.1.0

# The release branch can now be deleted.
git branch -D release/v6.1.0
git push origin --delete release/v6.1.0

# Now go to GitHub and create the release from the new tag. Let
# GitHub Actions take care of the rest!

```

### Hot-fix Releases

Sometimes we have a crucial bug that needs to be patched right away. If the bug affects the latest release, we can create a new version directly from `main` (or the relevant major release branch where the bug exists):

```bash
# From the main branch, make sure to run the build and all tests
# before creating a new release.
pnpm install && pnpm build && pnpm test

# Assuming the tests pass, create the release tag and update
# version references throughout the codebase.
pnpm run version patch

# Push changes along with the new release tag.
git push origin main --follow-tags

# In GitHub, create the release from the new tag and it will be
# published via GitHub actions

# When the hot-fix is done, merge the changes into dev and clean
# up conflicts as needed.
git checkout dev
git merge main
git push origin dev

```

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Examples

# Examples

You can find many examples, including running version of them on StackBlitz in the GitHub repository:

[https://github.com/remix-run/react-router/tree/dev/examples](https://github.com/remix-run/react-router/tree/dev/examples)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [react-router-dom](https://api.reactrouter.com/v7/modules/react_router_dom.html)

# Module react-router-dom

This package simply re-exports everything from `react-router` to smooth the upgrade path for v6 applications. Once upgraded you can change all of your imports and remove it from your dependencies:

```diff
-import { Routes } from "react-router-dom"
+import { Routes } from "react-router"
Copy
```

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [react-router](https://api.reactrouter.com/v7/modules/react_router.html)
- [Await](https://api.reactrouter.com/v7/functions/react_router.Await.html)

# Function Await

- Await< [Resolve](https://api.reactrouter.com/v7/functions/react_router.Await.html#Await.Resolve) >(\_\_namedParameters): Element [Permalink](https://api.reactrouter.com/v7/functions/react_router.Await.html#Await)
- Used to render promise values with automatic error handling.



```tsx
import { Await, useLoaderData } from "react-router";

export function loader() {
    // not awaited
    const reviews = getReviews()
    // awaited (blocks the transition)
    const book = await fetch("/api/book").then((res) => res.json())
    return { book, reviews }
}

function Book() {
    const { book, reviews } = useLoaderData();
    return (
      <div>
        <h1>{book.title}</h1>
        <p>{book.description}</p>
        <React.Suspense fallback={<ReviewsSkeleton />}>
          <Await
            resolve={reviews}
            errorElement={
              <div>Could not load reviews 😬</div>
            }
            children={(resolvedReviews) => (
              <Reviews items={resolvedReviews} />
            )}
          />
        </React.Suspense>
      </div>
    );
}
Copy
```



**Note:** `<Await>` expects to be rendered inside of a `<React.Suspense>`




#### Type Parameters



- Resolve

#### Parameters

- \_\_namedParameters: [AwaitProps](https://api.reactrouter.com/v7/interfaces/react_router.AwaitProps.html) < [Resolve](https://api.reactrouter.com/v7/functions/react_router.Await.html#Await.Resolve) >

#### Returns Element

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/explanation/code-splitting) [dev](https://reactrouter.com/dev/explanation/code-splitting)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Automatic Code Splitting

# Automatic Code Splitting

When using React Router's framework features, your application is automatically code split to improve the performance of initial load times when users visit your application.

## Code Splitting by Route

Consider this simple route config:

```
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [\
  route("/contact", "./contact.tsx"),\
  route("/about", "./about.tsx"),\
] satisfies RouteConfig;

```

Copy code to clipboard

Instead of bundling all routes into a single giant build, the modules referenced ( `contact.tsx` and `about.tsx`) become entry points to the bundler.

Because these entry points are coupled to URL segments, React Router knows just from a URL which bundles are needed in the browser, and more importantly, which are not.

If the user visits `"/about"` then the bundles for `about.tsx` will be loaded but not `contact.tsx`. This ensures drastically reduces the JavaScript footprint for initial page loads and speeds up your application.

## Removal of Server Code

Any server-only [Route Module APIs](https://reactrouter.com/start/framework/route-module) will be removed from the bundles. Consider this route module:

```
export async function loader() {
  return { message: "hello" };
}

export async function action() {
  console.log(Date.now());
  return { ok: true };
}

export async function headers() {
  return { "Cache-Control": "max-age=300" };
}

export default function Component({ loaderData }) {
  return <div>{loaderData.message}</div>;
}

```

Copy code to clipboard

After building for the browser, only the `Component` will still be in the bundle, so you can use server-only code in the other module exports.

## Splitting Route Modules

This feature is only enabled when setting the `unstable_splitRouteModules` future flag:

```
export default {
  future: {
    unstable_splitRouteModules: true,
  },
};

```

Copy code to clipboard

One of the conveniences of the [Route Module API](https://reactrouter.com/start/framework/route-module) is that everything a route needs is in a single file. Unfortunately this comes with a performance cost in some cases when using the `clientLoader`, `clientAction`, and `HydrateFallback` APIs.

As a basic example, consider this route module:

```
import { MassiveComponent } from "~/components";

export async function clientLoader() {
  return await fetch("https://example.com/api").then(
    (response) => response.json()
  );
}

export default function Component({ loaderData }) {
  return <MassiveComponent data={loaderData} />;
}

```

Copy code to clipboard

In this example we have a minimal `clientLoader` export that makes a basic fetch call, whereas the default component export is much larger. This is a problem for performance because it means that if we want to navigate to this route client-side, the entire route module must be downloaded before the client loader can start running.

To visualize this as a timeline:

In the following timeline diagrams, different characters are used within the Route Module bars to denote the different Route Module APIs being exported.

```
Get Route Module:  |--=======|
Run clientLoader:            |-----|
Render:                            |-|

```

Instead, we want to optimize this to the following:

```
Get clientLoader:  |--|
Get Component:     |=======|
Run clientLoader:     |-----|
Render:                     |-|

```

To achieve this optimization, React Router will split the route module into multiple smaller modules during the production build process. In this case, we'll end up with two separate [virtual modules](https://vite.dev/guide/api-plugin#virtual-modules-convention) — one for the client loader and one for the component and its dependencies.

```
export async function clientLoader() {
  return await fetch("https://example.com/api").then(
    (response) => response.json()
  );
}

```

Copy code to clipboard

```
import { MassiveComponent } from "~/components";

export default function Component({ loaderData }) {
  return <MassiveComponent data={loaderData} />;
}

```

Copy code to clipboard

This optimization is automatically applied in framework mode, but you can also implement it in library mode via `route.lazy` and authoring your route in multiple files as covered in our blog post on [lazy loading route modules.](https://remix.run/blog/lazy-loading-routes#advanced-usage-and-optimizations)

Now that these are available as separate modules, the client loader and the component can be downloaded in parallel. This means that the client loader can be executed as soon as it's ready without having to wait for the component.

This optimization is even more pronounced when more Route Module APIs are used. For example, when using `clientLoader`, `clientAction` and `HydrateFallback`, the timeline for a single route module during a client-side navigation might look like this:

```
Get Route Module:     |--~~++++=======|
Run clientLoader:                     |-----|
Render:                                     |-|

```

This would instead be optimized to the following:

```
Get clientLoader:     |--|
Get clientAction:     |~~|
Get HydrateFallback:  SKIPPED
Get Component:        |=======|
Run clientLoader:        |-----|
Render:                        |-|

```

Note that this optimization only works when the Route Module APIs being split don't share code within the same file. For example, the following route module can't be split:

```
import { MassiveComponent } from "~/components";

const shared = () => console.log("hello");

export async function clientLoader() {
  shared();
  return await fetch("https://example.com/api").then(
    (response) => response.json()
  );
}

export default function Component({ loaderData }) {
  shared();
  return <MassiveComponent data={loaderData} />;
}

```

Copy code to clipboard

This route will still work, but since both the client loader and the component depend on the `shared` function defined within the same file, it will be de-optimized into a single route module.

To avoid this, you can extract any code shared between exports into a separate file. For example:

```
export const shared = () => console.log("hello");

```

Copy code to clipboard

You can then import this shared code in your route module without triggering the de-optimization:

```
import { MassiveComponent } from "~/components";
import { shared } from "./shared";

export async function clientLoader() {
  shared();
  return await fetch("https://example.com/api").then(
    (response) => response.json()
  );
}

export default function Component({ loaderData }) {
  shared();
  return <MassiveComponent data={loaderData} />;
}

```

Copy code to clipboard

Since the shared code is in its own module, React Router is now able to split this route module into two separate virtual modules:

```
import { shared } from "./shared";

export async function clientLoader() {
  shared();
  return await fetch("https://example.com/api").then(
    (response) => response.json()
  );
}

```

Copy code to clipboard

```
import { MassiveComponent } from "~/components";
import { shared } from "./shared";

export default function Component({ loaderData }) {
  shared();
  return <MassiveComponent data={loaderData} />;
}

```

Copy code to clipboard

If your project is particularly performance sensitive, you can set the `unstable_splitRouteModules` future flag to `"enforce"`:

```
export default {
  future: {
    unstable_splitRouteModules: "enforce",
  },
};

```

Copy code to clipboard

This setting will raise an error if any route modules can't be split:

```
Error splitting route module: routes/example/route.tsx

- clientLoader

This export could not be split into its own chunk because it shares code with other exports. You should extract any shared code into its own module and then import it within the route module.

```

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/explanation/code-splitting.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/framework/testing) [dev](https://reactrouter.com/dev/start/framework/testing)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Testing

# Testing

When components use things like `useLoaderData`, `<Link>`, etc, they are required to be rendered in context of a React Router app. The `createRoutesStub` function creates that context to test components in isolation.

Consider a login form component that relies on `useActionData`

```
import { useActionData } from "react-router";

export function LoginForm() {
  const errors = useActionData();
  return (
    <Form method="post">
      <label>
        <input type="text" name="username" />
        {errors?.username && <div>{errors.username}</div>}
      </label>

      <label>
        <input type="password" name="password" />
        {errors?.password && <div>{errors.password}</div>}
      </label>

      <button type="submit">Login</button>
    </Form>
  );
}

```

Copy code to clipboard

We can test this component with `createRoutesStub`. It takes an array of objects that resemble route modules with loaders, actions, and components.

```
import { createRoutesStub } from "react-router";
import {
  render,
  screen,
  waitFor,
} from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { LoginForm } from "./LoginForm";

test("LoginForm renders error messages", async () => {
  const USER_MESSAGE = "Username is required";
  const PASSWORD_MESSAGE = "Password is required";

  const Stub = createRoutesStub([\
    {\
      path: "/login",\
      Component: LoginForm,\
      action() {\
        return {\
          errors: {\
            username: USER_MESSAGE,\
            password: PASSWORD_MESSAGE,\
          },\
        };\
      },\
    },\
  ]);

  // render the app stub at "/login"
  render(<Stub initialEntries={["/login"]} />);

  // simulate interactions
  userEvent.click(screen.getByText("Login"));
  await waitFor(() => screen.findByText(USER_MESSAGE));
  await waitFor(() => screen.findByText(PASSWORD_MESSAGE));
});

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/framework/testing.md)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [react-router](https://api.reactrouter.com/v7/modules/react_router.html)
- [MetaArgs](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html)

# Interface MetaArgs<Loader, MatchLoaders>

interface MetaArgs< [Loader](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#Loader), [MatchLoaders](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#MatchLoaders) >{

[data](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#data): undefined \| ( [Loader](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#Loader) extends [LoaderFunction](https://api.reactrouter.com/v7/types/react_router.LoaderFunction.html) \| [ClientLoaderFunction](https://api.reactrouter.com/v7/types/react_router.ClientLoaderFunction.html)

? SerializeFrom< [Loader](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#Loader) < [Loader](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#Loader) >>

: unknown);

[error](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#error)?: unknown;

[location](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#location): [Location](https://api.reactrouter.com/v7/interfaces/react_router.Location.html) <any>;

[matches](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#matches): MetaMatches< [MatchLoaders](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#MatchLoaders) >;

[params](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#params): [Params](https://api.reactrouter.com/v7/types/react_router.Params.html);

}

#### Type Parameters

- Loader extends [LoaderFunction](https://api.reactrouter.com/v7/types/react_router.LoaderFunction.html) \| [ClientLoaderFunction](https://api.reactrouter.com/v7/types/react_router.ClientLoaderFunction.html) \| unknown = unknown
- MatchLoaders extends Record<string, [LoaderFunction](https://api.reactrouter.com/v7/types/react_router.LoaderFunction.html) \| [ClientLoaderFunction](https://api.reactrouter.com/v7/types/react_router.ClientLoaderFunction.html) \| unknown> = Record<string, unknown>

##### Index

### Properties

[data](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#data) [error?](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#error) [location](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#location) [matches](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#matches) [params](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#params)

## Properties

### data [Permalink](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs\#data)

data:undefined \| ( [Loader](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#Loader) extends [LoaderFunction](https://api.reactrouter.com/v7/types/react_router.LoaderFunction.html) \| [ClientLoaderFunction](https://api.reactrouter.com/v7/types/react_router.ClientLoaderFunction.html)

? SerializeFrom< [Loader](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#Loader) < [Loader](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#Loader) >>

: unknown)

### `Optional` error [Permalink](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs\#error)

error?:unknown

### location [Permalink](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs\#location)

location: [Location](https://api.reactrouter.com/v7/interfaces/react_router.Location.html) <any>

### matches [Permalink](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs\#matches)

matches:MetaMatches< [MatchLoaders](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html#MatchLoaders) >

### params [Permalink](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs\#params)

params: [Params](https://api.reactrouter.com/v7/types/react_router.Params.html)

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

### On This Page

Properties

[data](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs#data) [error](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs#error) [location](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs#location) [matches](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs#matches) [params](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs#params)

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/how-to/status) [dev](https://reactrouter.com/dev/how-to/status)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Status Codes

# Status Codes

Set status codes from loaders and actions with `data`.

```
// route('/projects/:projectId', './project.tsx')
import type { Route } from "./+types/project";
import { data } from "react-router";
import { fakeDb } from "../db";

export async function action({
  request,
}: Route.ActionArgs) {
  let formData = await request.formData();
  let title = formData.get("title");
  if (!title) {
    return data(
      { message: "Invalid title" },
      { status: 400 }
    );
  }

  if (!projectExists(title)) {
    let project = await fakeDb.createProject({ title });
    return data(project, { status: 201 });
  } else {
    let project = await fakeDb.updateProject({ title });
    // the default status code is 200, no need for `data`
    return project;
  }
}

```

Copy code to clipboard

See [Form Validation](https://reactrouter.com/how-to/form-validation) for more information on rendering form errors like this.

Another common status code is 404:

```
// route('/projects/:projectId', './project.tsx')
import type { Route } from "./+types/project";
import { data } from "react-router";
import { fakeDb } from "../db";

export async function loader({ params }: Route.ActionArgs) {
  let project = await fakeDb.getProject(params.id);
  if (!project) {
    // throw to ErrorBoundary
    throw data(null, { status: 404 });
  }
  return project;
}

```

Copy code to clipboard

See the [Error Boundaries](https://reactrouter.com/how-to/error-boundary) for more information on thrown `data`.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/how-to/status.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.29.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

redirectDocument

# `redirectDocument`

This is a small wrapper around [`redirect`](https://reactrouter.com/6.29.0/fetch/redirect) that will trigger a document-level redirect to the new location instead of a client-side navigation.

This is most useful when you have a React Router app living next to a separate app on the same domain and need to redirect from the React Router app to the other app via `window.location` instead of a React Router navigation:

```
import { redirectDocument } from "react-router-dom";

const loader = async () => {
  const user = await getUser();
  if (!user) {
    return redirectDocument("/otherapp/login");
  }
  return null;
};

```

Copy code to clipboard

## Type Declaration

```
type RedirectFunction = (
  url: string,
  init?: number | ResponseInit
) => Response;

```

Copy code to clipboard

## `url`

The URL to redirect to.

```
redirectDocument("/otherapp/login");

```

Copy code to clipboard

## `init`

The [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response/Response) options to be used in the response.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/framework/pending-ui) [dev](https://reactrouter.com/dev/start/framework/pending-ui)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Pending UI

On this page

- [Global Pending Navigation](https://reactrouter.com/start/framework/pending-ui#global-pending-navigation)
- [Local Pending Navigation](https://reactrouter.com/start/framework/pending-ui#local-pending-navigation)
- [Pending Form Submission](https://reactrouter.com/start/framework/pending-ui#pending-form-submission)
- [Optimistic UI](https://reactrouter.com/start/framework/pending-ui#optimistic-ui)

- [Global Pending Navigation](https://reactrouter.com/start/framework/pending-ui#global-pending-navigation)
- [Local Pending Navigation](https://reactrouter.com/start/framework/pending-ui#local-pending-navigation)
- [Pending Form Submission](https://reactrouter.com/start/framework/pending-ui#pending-form-submission)
- [Optimistic UI](https://reactrouter.com/start/framework/pending-ui#optimistic-ui)

# Pending UI

When the user navigates to a new route, or submits data to an action, the UI should immediately respond to the user's actions with a pending or optimistic state. Application code is responsible for this.

## Global Pending Navigation

When the user navigates to a new url, the loaders for the next page are awaited before the next page renders. You can get the pending state from `useNavigation`.

```
import { useNavigation } from "react-router";

export default function Root() {
  const navigation = useNavigation();
  const isNavigating = Boolean(navigation.location);

  return (
    <html>
      <body>
        {isNavigating && <GlobalSpinner />}
        <Outlet />
      </body>
    </html>
  );
}

```

Copy code to clipboard

## Local Pending Navigation

Pending indicators can also be localized to the link. NavLink's children, className, and style props can be functions that receive the pending state.

```
import { NavLink } from "react-router";

function Navbar() {
  return (
    <nav>
      <NavLink to="/home">
        {({ isPending }) => (
          <span>Home {isPending && <Spinner />}</span>
        )}
      </NavLink>
      <NavLink
        to="/about"
        style={({ isPending }) => ({
          color: isPending ? "gray" : "black",
        })}
      >
        About
      </NavLink>
    </nav>
  );
}

```

Copy code to clipboard

## Pending Form Submission

When a form is submitted, the UI should immediately respond to the user's actions with a pending state. This is easiest to do with a [fetcher](https://api.reactrouter.com/v7/functions/react_router.useFetcher.html) form because it has it's own independent state (whereas normal forms cause a global navigation).

```
import { useFetcher } from "react-router";

function NewProjectForm() {
  const fetcher = useFetcher();

  return (
    <fetcher.Form method="post">
      <input type="text" name="title" />
      <button type="submit">
        {fetcher.state !== "idle"
          ? "Submitting..."
          : "Submit"}
      </button>
    </fetcher.Form>
  );
}

```

Copy code to clipboard

For non-fetcher form submissions, pending states are available on `useNavigation`.

```
import { useNavigation, Form } from "react-router";

function NewProjectForm() {
  const navigation = useNavigation();

  return (
    <Form method="post" action="/projects/new">
      <input type="text" name="title" />
      <button type="submit">
        {navigation.formAction === "/projects/new"
          ? "Submitting..."
          : "Submit"}
      </button>
    </Form>
  );
}

```

Copy code to clipboard

## Optimistic UI

When the future state of the UI is known by the form submission data, an optimistic UI can be implemented for instant UX.

```
function Task({ task }) {
  const fetcher = useFetcher();

  let isComplete = task.status === "complete";
  if (fetcher.formData) {
    isComplete =
      fetcher.formData.get("status") === "complete";
  }

  return (
    <div>
      <div>{task.title}</div>
      <fetcher.Form method="post">
        <button
          name="status"
          value={isComplete ? "incomplete" : "complete"}
        >
          {isComplete ? "Mark Incomplete" : "Mark Complete"}
        </button>
      </fetcher.Form>
    </div>
  );
}

```

Copy code to clipboard

* * *

Next: [Testing](https://reactrouter.com/start/framework/testing)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/framework/pending-ui.md)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [react-router](https://api.reactrouter.com/v7/modules/react_router.html)
- [ClientLoaderFunctionArgs](https://api.reactrouter.com/v7/types/react_router.ClientLoaderFunctionArgs.html)

# Type Alias ClientLoaderFunctionArgs

ClientLoaderFunctionArgs: [LoaderFunctionArgs](https://api.reactrouter.com/v7/interfaces/react_router.LoaderFunctionArgs.html) <undefined> & {

serverLoader: (< [T](https://api.reactrouter.com/v7/types/react_router.ClientLoaderFunctionArgs) >() =\> Promise<SerializeFrom< [T](https://api.reactrouter.com/v7/types/react_router.ClientLoaderFunctionArgs) >>);

}

Arguments passed to a route `clientLoader` function

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/how-to/error-reporting) [dev](https://reactrouter.com/dev/how-to/error-reporting)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Error Reporting

# Error Reporting

React Router catches errors in your route modules and sends them to [error boundaries](https://reactrouter.com/how-to/error-boundary) to prevent blank pages when errors occur. However, ErrorBoundary isn't sufficient for logging and reporting errors. To access these caught errors, use the handleError export of the server entry module.

## 1\. Reveal the server entry

If you don't see `entry.server.tsx` in your app directory, you're using a default entry. Reveal it with this cli command:

```
react-router reveal

```

Copy code to clipboard

## 2\. Export your error handler

This function is called whenever React Router catches an error in your application on the server.

```
import { type HandleErrorFunction } from "react-router";

export const handleError: HandleErrorFunction = (
  error,
  { request }
) => {
  // React Router may abort some interrupted requests, don't log those
  if (!request.signal.aborted) {
    myReportError(error);

    // make sure to still log the error so you can see it
    console.error(error);
  }
};

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/how-to/error-reporting.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Tutorial

On this page

- [Setup](https://reactrouter.com/6.30.0/start/tutorial#setup)
- [Adding a Router](https://reactrouter.com/6.30.0/start/tutorial#adding-a-router)
- [The Root Route](https://reactrouter.com/6.30.0/start/tutorial#the-root-route)
- [Handling Not Found Errors](https://reactrouter.com/6.30.0/start/tutorial#handling-not-found-errors)
- [The Contact Route UI](https://reactrouter.com/6.30.0/start/tutorial#the-contact-route-ui)
- [Nested Routes](https://reactrouter.com/6.30.0/start/tutorial#nested-routes)
- [Client Side Routing](https://reactrouter.com/6.30.0/start/tutorial#client-side-routing)
- [Loading Data](https://reactrouter.com/6.30.0/start/tutorial#loading-data)
- [Data Writes + HTML Forms](https://reactrouter.com/6.30.0/start/tutorial#data-writes--html-forms)
- [Creating Contacts](https://reactrouter.com/6.30.0/start/tutorial#creating-contacts)
- [URL Params in Loaders](https://reactrouter.com/6.30.0/start/tutorial#url-params-in-loaders)
- [Updating Data](https://reactrouter.com/6.30.0/start/tutorial#updating-data)
- [Updating Contacts with FormData](https://reactrouter.com/6.30.0/start/tutorial#updating-contacts-with-formdata)
- [Mutation Discussion](https://reactrouter.com/6.30.0/start/tutorial#mutation-discussion)
- [Redirecting new records to the edit page](https://reactrouter.com/6.30.0/start/tutorial#redirecting-new-records-to-the-edit-page)
- [Active Link Styling](https://reactrouter.com/6.30.0/start/tutorial#active-link-styling)
- [Global Pending UI](https://reactrouter.com/6.30.0/start/tutorial#global-pending-ui)
- [Deleting Records](https://reactrouter.com/6.30.0/start/tutorial#deleting-records)
- [Contextual Errors](https://reactrouter.com/6.30.0/start/tutorial#contextual-errors)
- [Index Routes](https://reactrouter.com/6.30.0/start/tutorial#index-routes)
- [Cancel Button](https://reactrouter.com/6.30.0/start/tutorial#cancel-button)
- [URL Search Params and GET Submissions](https://reactrouter.com/6.30.0/start/tutorial#url-search-params-and-get-submissions)
- [GET Submissions with Client Side Routing](https://reactrouter.com/6.30.0/start/tutorial#get-submissions-with-client-side-routing)
- [Synchronizing URLs to Form State](https://reactrouter.com/6.30.0/start/tutorial#synchronizing-urls-to-form-state)
- [Submitting Forms `onChange`](https://reactrouter.com/6.30.0/start/tutorial#submitting-forms-onchange)
- [Adding Search Spinner](https://reactrouter.com/6.30.0/start/tutorial#adding-search-spinner)
- [Managing the History Stack](https://reactrouter.com/6.30.0/start/tutorial#managing-the-history-stack)
- [Mutations Without Navigation](https://reactrouter.com/6.30.0/start/tutorial#mutations-without-navigation)
- [Optimistic UI](https://reactrouter.com/6.30.0/start/tutorial#optimistic-ui)
- [Not Found Data](https://reactrouter.com/6.30.0/start/tutorial#not-found-data)
- [Pathless Routes](https://reactrouter.com/6.30.0/start/tutorial#pathless-routes)
- [JSX Routes](https://reactrouter.com/6.30.0/start/tutorial#jsx-routes)

- [Setup](https://reactrouter.com/6.30.0/start/tutorial#setup)
- [Adding a Router](https://reactrouter.com/6.30.0/start/tutorial#adding-a-router)
- [The Root Route](https://reactrouter.com/6.30.0/start/tutorial#the-root-route)
- [Handling Not Found Errors](https://reactrouter.com/6.30.0/start/tutorial#handling-not-found-errors)
- [The Contact Route UI](https://reactrouter.com/6.30.0/start/tutorial#the-contact-route-ui)
- [Nested Routes](https://reactrouter.com/6.30.0/start/tutorial#nested-routes)
- [Client Side Routing](https://reactrouter.com/6.30.0/start/tutorial#client-side-routing)
- [Loading Data](https://reactrouter.com/6.30.0/start/tutorial#loading-data)
- [Data Writes + HTML Forms](https://reactrouter.com/6.30.0/start/tutorial#data-writes--html-forms)
- [Creating Contacts](https://reactrouter.com/6.30.0/start/tutorial#creating-contacts)
- [URL Params in Loaders](https://reactrouter.com/6.30.0/start/tutorial#url-params-in-loaders)
- [Updating Data](https://reactrouter.com/6.30.0/start/tutorial#updating-data)
- [Updating Contacts with FormData](https://reactrouter.com/6.30.0/start/tutorial#updating-contacts-with-formdata)
- [Mutation Discussion](https://reactrouter.com/6.30.0/start/tutorial#mutation-discussion)
- [Redirecting new records to the edit page](https://reactrouter.com/6.30.0/start/tutorial#redirecting-new-records-to-the-edit-page)
- [Active Link Styling](https://reactrouter.com/6.30.0/start/tutorial#active-link-styling)
- [Global Pending UI](https://reactrouter.com/6.30.0/start/tutorial#global-pending-ui)
- [Deleting Records](https://reactrouter.com/6.30.0/start/tutorial#deleting-records)
- [Contextual Errors](https://reactrouter.com/6.30.0/start/tutorial#contextual-errors)
- [Index Routes](https://reactrouter.com/6.30.0/start/tutorial#index-routes)
- [Cancel Button](https://reactrouter.com/6.30.0/start/tutorial#cancel-button)
- [URL Search Params and GET Submissions](https://reactrouter.com/6.30.0/start/tutorial#url-search-params-and-get-submissions)
- [GET Submissions with Client Side Routing](https://reactrouter.com/6.30.0/start/tutorial#get-submissions-with-client-side-routing)
- [Synchronizing URLs to Form State](https://reactrouter.com/6.30.0/start/tutorial#synchronizing-urls-to-form-state)
- [Submitting Forms `onChange`](https://reactrouter.com/6.30.0/start/tutorial#submitting-forms-onchange)
- [Adding Search Spinner](https://reactrouter.com/6.30.0/start/tutorial#adding-search-spinner)
- [Managing the History Stack](https://reactrouter.com/6.30.0/start/tutorial#managing-the-history-stack)
- [Mutations Without Navigation](https://reactrouter.com/6.30.0/start/tutorial#mutations-without-navigation)
- [Optimistic UI](https://reactrouter.com/6.30.0/start/tutorial#optimistic-ui)
- [Not Found Data](https://reactrouter.com/6.30.0/start/tutorial#not-found-data)
- [Pathless Routes](https://reactrouter.com/6.30.0/start/tutorial#pathless-routes)
- [JSX Routes](https://reactrouter.com/6.30.0/start/tutorial#jsx-routes)

# Tutorial

Welcome to the tutorial! We'll be building a small, but feature-rich app that lets you keep track of your contacts. We expect it to take between 30-60m if you're following along.

![](https://reactrouter.com/_docs/tutorial/15.webp)

👉 **Every time you see this it means you need to do something in the app!**

The rest is just there for your information and deeper understanding. Let's get to it.

## Setup

If you're not going to follow along in your own app, you can skip this section

We'll be using [Vite](https://vitejs.dev/guide/) for our bundler and dev server for this tutorial. You'll need [Node.js](https://nodejs.org/) installed for the `npm` command line tool.

👉️ **Open up your terminal and bootstrap a new React app with Vite:**

```sh
npm create vite@latest name-of-your-project -- --template react
# follow prompts
cd <your new project directory>
npm install react-router-dom # always need this!
npm install localforage match-sorter sort-by # only for this tutorial.
npm run dev

```

You should be able to visit the URL printed in the terminal:

```
 VITE v3.0.7  ready in 175 ms

  ➜  Local:   http://127.0.0.1:5173/
  ➜  Network: use --host to expose

```

We've got some pre-written CSS for this tutorial so we can stay focused on React Router. Feel free to judge it harshly or write your own 😅 (We did things we normally wouldn't in CSS so that the markup in this tutorial could stay as minimal as possible.)

👉 **Copy/Paste the tutorial CSS [found here](https://gist.githubusercontent.com/ryanflorence/ba20d473ef59e1965543fa013ae4163f/raw/499707f25a5690d490c7b3d54c65c65eb895930c/react-router-6.4-tutorial-css.css) into `src/index.css`**

This tutorial will be creating, reading, searching, updating, and deleting data. A typical web app would probably be talking to an API on your web server, but we're going to use browser storage and fake some network latency to keep this focused. None of this code is relevant to React Router, so just go ahead and copy/paste it all.

👉 **Copy/Paste the tutorial data module [found here](https://gist.githubusercontent.com/ryanflorence/1e7f5d3344c0db4a8394292c157cd305/raw/f7ff21e9ae7ffd55bfaaaf320e09c6a08a8a6611/contacts.js) into `src/contacts.js`**

All you need in the src folder are `contacts.js`, `main.jsx`, and `index.css`. You can delete anything else (like `App.js` and `assets`, etc.).

👉 **Delete unused files in `src/` so all you have left are these:**

```
src
├── contacts.js
├── index.css
└── main.jsx

```

If your app is running, it might blow up momentarily, just keep going 😋. And with that, we're ready to get started!

## Adding a Router

First thing to do is create a [Browser Router](https://reactrouter.com/6.30.0/routers/create-browser-router) and configure our first route. This will enable client side routing for our web app.

The `main.jsx` file is the entry point. Open it up and we'll put React Router on the page.

👉 **Create and render a [browser router](https://reactrouter.com/6.30.0/routers/create-browser-router) in `main.jsx`**

```
import * as React from "react";
import * as ReactDOM from "react-dom/client";
import {
  createBrowserRouter,
  RouterProvider,
} from "react-router-dom";
import "./index.css";

const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <div>Hello world!</div>,\
  },\
]);

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
);

```

This first route is what we often call the "root route" since the rest of our routes will render inside of it. It will serve as the root layout of the UI, we'll have nested layouts as we get farther along.

## The Root Route

Let's add the global layout for this app.

👉 **Create `src/routes` and `src/routes/root.jsx`**

```sh
mkdir src/routes
touch src/routes/root.jsx

```

(If you don't want to be a command line nerd, use your editor instead of those commands 🤓)

👉 **Create the root layout component**

```
export default function Root() {
  return (
    <>
      <div id="sidebar">
        <h1>React Router Contacts</h1>
        <div>
          <form id="search-form" role="search">
            <input
              id="q"
              aria-label="Search contacts"
              placeholder="Search"
              type="search"
              name="q"
            />
            <div
              id="search-spinner"
              aria-hidden
              hidden={true}
            />
            <div
              className="sr-only"
              aria-live="polite"
            ></div>
          </form>
          <form method="post">
            <button type="submit">New</button>
          </form>
        </div>
        <nav>
          <ul>
            <li>
              <a href={`/contacts/1`}>Your Name</a>
            </li>
            <li>
              <a href={`/contacts/2`}>Your Friend</a>
            </li>
          </ul>
        </nav>
      </div>
      <div id="detail"></div>
    </>
  );
}

```

Nothing React Router specific yet, so feel free to copy/paste all of that.

👉 **Set `<Root>` as the root route's [`element`](https://reactrouter.com/6.30.0/route/route#element)**

```
/* existing imports */
import Root from "./routes/root";

const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
  },\
]);

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
);

```

The app should look something like this now. It sure is nice having a designer who can also write the CSS, isn't it? (Thank you [Jim](https://blog.jim-nielsen.com/) 🙏).

![](https://reactrouter.com/_docs/tutorial/01.webp)

## Handling Not Found Errors

It's always a good idea to know how your app responds to errors early in the project because we all write far more bugs than features when building a new app! Not only will your users get a good experience when this happens, but it helps you during development as well.

We added some links to this app, let's see what happens when we click them?

👉 **Click one of the sidebar names**

![screenshot of default React Router error element](https://reactrouter.com/_docs/tutorial/02.webp)

Gross! This is the default error screen in React Router, made worse by our flex box styles on the root element in this app 😂.

Anytime your app throws an error while rendering, loading data, or performing data mutations, React Router will catch it and render an error screen. Let's make our own error page.

👉 **Create an error page component**

```sh
touch src/error-page.jsx

```

```
import { useRouteError } from "react-router-dom";

export default function ErrorPage() {
  const error = useRouteError();
  console.error(error);

  return (
    <div id="error-page">
      <h1>Oops!</h1>
      <p>Sorry, an unexpected error has occurred.</p>
      <p>
        <i>{error.statusText || error.message}</i>
      </p>
    </div>
  );
}

```

👉 **Set the `<ErrorPage>` as the [`errorElement`](https://reactrouter.com/6.30.0/route/error-element) on the root route**

```
/* previous imports */
import ErrorPage from "./error-page";

const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    errorElement: <ErrorPage />,\
  },\
]);

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
);

```

The error page should now look like this:

![new error page, but still ugly](https://reactrouter.com/_docs/tutorial/03.webp)

(Well, that's not much better. Maybe somebody forgot to ask the designer to make an error page. Maybe everybody forgets to ask the designer to make an error page and then blames the designer for not thinking of it 😆)

Note that [`useRouteError`](https://reactrouter.com/6.30.0/hooks/use-route-error) provides the error that was thrown. When the user navigates to routes that don't exist you'll get an [error response](https://reactrouter.com/6.30.0/utils/is-route-error-response) with a "Not Found" `statusText`. We'll see some other errors later in the tutorial and discuss them more.

For now, it's enough to know that pretty much all of your errors will now be handled by this page instead of infinite spinners, unresponsive pages, or blank screens 🙌

## The Contact Route UI

Instead of a 404 "Not Found" page, we want to actually render something at the URLs we've linked to. For that, we need to make a new route.

👉 **Create the contact route module**

```sh
touch src/routes/contact.jsx

```

👉 **Add the contact component UI**

It's just a bunch of elements, feel free to copy/paste.

```
import { Form } from "react-router-dom";

export default function Contact() {
  const contact = {
    first: "Your",
    last: "Name",
    avatar: "https://robohash.org/you.png?size=200x200",
    twitter: "your_handle",
    notes: "Some notes",
    favorite: true,
  };

  return (
    <div id="contact">
      <div>
        <img
          key={contact.avatar}
          src={
            contact.avatar ||
            `https://robohash.org/${contact.id}.png?size=200x200`
          }
        />
      </div>

      <div>
        <h1>
          {contact.first || contact.last ? (
            <>
              {contact.first} {contact.last}
            </>
          ) : (
            <i>No Name</i>
          )}{" "}
          <Favorite contact={contact} />
        </h1>

        {contact.twitter && (
          <p>
            <a
              target="_blank"
              href={`https://twitter.com/${contact.twitter}`}
            >
              {contact.twitter}
            </a>
          </p>
        )}

        {contact.notes && <p>{contact.notes}</p>}

        <div>
          <Form action="edit">
            <button type="submit">Edit</button>
          </Form>
          <Form
            method="post"
            action="destroy"
            onSubmit={(event) => {
              if (
                !confirm(
                  "Please confirm you want to delete this record."
                )
              ) {
                event.preventDefault();
              }
            }}
          >
            <button type="submit">Delete</button>
          </Form>
        </div>
      </div>
    </div>
  );
}

function Favorite({ contact }) {
  const favorite = contact.favorite;
  return (
    <Form method="post">
      <button
        name="favorite"
        value={favorite ? "false" : "true"}
        aria-label={
          favorite
            ? "Remove from favorites"
            : "Add to favorites"
        }
      >
        {favorite ? "★" : "☆"}
      </button>
    </Form>
  );
}

```

Now that we've got a component, let's hook it up to a new route.

👉 **Import the contact component and create a new route**

```
/* existing imports */
import Contact from "./routes/contact";

const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    errorElement: <ErrorPage />,\
  },\
  {\
    path: "contacts/:contactId",\
    element: <Contact />,\
  },\
]);

/* existing code */

```

Now if we click one of the links or visit `/contacts/1` we get our new component!

![contact route rendering without the parent layout](https://reactrouter.com/_docs/tutorial/04.webp)

However, it's not inside of our root layout 😠

## Nested Routes

We want the contact component to render _inside_ of the `<Root>` layout like this.

![](https://reactrouter.com/_docs/tutorial/05.webp)

We do it by making the contact route a _child_ of the root route.

👉 **Move the contacts route to be a child of the root route**

```
const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    errorElement: <ErrorPage />,\
    children: [\
      {\
        path: "contacts/:contactId",\
        element: <Contact />,\
      },\
    ],\
  },\
]);

```

You'll now see the root layout again but a blank page on the right. We need to tell the root route _where_ we want it to render its child routes. We do that with [`<Outlet>`](https://reactrouter.com/6.30.0/components/outlet).

Find the `<div id="detail">` and put an outlet inside

👉 **Render an [`<Outlet>`](https://reactrouter.com/6.30.0/components/outlet)**

```
import { Outlet } from "react-router-dom";

export default function Root() {
  return (
    <>
      {/* all the other elements */}
      <div id="detail">
        <Outlet />
      </div>
    </>
  );
}

```

## Client Side Routing

You may or may not have noticed, but when we click the links in the sidebar, the browser is doing a full document request for the next URL instead of using React Router.

Client side routing allows our app to update the URL without requesting another document from the server. Instead, the app can immediately render new UI. Let's make it happen with [`<Link>`](https://reactrouter.com/6.30.0/components/link).

👉 **Change the sidebar `<a href>` to `<Link to>`**

```
import { Outlet, Link } from "react-router-dom";

export default function Root() {
  return (
    <>
      <div id="sidebar">
        {/* other elements */}

        <nav>
          <ul>
            <li>
              <Link to={`contacts/1`}>Your Name</Link>
            </li>
            <li>
              <Link to={`contacts/2`}>Your Friend</Link>
            </li>
          </ul>
        </nav>

        {/* other elements */}
      </div>
    </>
  );
}

```

You can open the network tab in the browser devtools to see that it's not requesting documents anymore.

## Loading Data

URL segments, layouts, and data are more often than not coupled (tripled?) together. We can see it in this app already:

| URL Segment | Component | Data |
| --- | --- | --- |
| / | `<Root>` | list of contacts |
| contacts/:id | `<Contact>` | individual contact |

Because of this natural coupling, React Router has data conventions to get data into your route components easily.

There are two APIs we'll be using to load data, [`loader`](https://reactrouter.com/6.30.0/route/loader) and [`useLoaderData`](https://reactrouter.com/6.30.0/hooks/use-loader-data). First we'll create and export a loader function in the root module, then we'll hook it up to the route. Finally, we'll access and render the data.

👉 **Export a loader from `root.jsx`**

```
import { Outlet, Link } from "react-router-dom";
import { getContacts } from "../contacts";

export async function loader() {
  const contacts = await getContacts();
  return { contacts };
}

```

👉 **Configure the loader on the route**

```
/* other imports */
import Root, { loader as rootLoader } from "./routes/root";

const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    errorElement: <ErrorPage />,\
    loader: rootLoader,\
    children: [\
      {\
        path: "contacts/:contactId",\
        element: <Contact />,\
      },\
    ],\
  },\
]);

```

👉 **Access and render the data**

```
import {
  Outlet,
  Link,
  useLoaderData,
} from "react-router-dom";
import { getContacts } from "../contacts";

/* other code */

export default function Root() {
  const { contacts } = useLoaderData();
  return (
    <>
      <div id="sidebar">
        <h1>React Router Contacts</h1>
        {/* other code */}

        <nav>
          {contacts.length ? (
            <ul>
              {contacts.map((contact) => (
                <li key={contact.id}>
                  <Link to={`contacts/${contact.id}`}>
                    {contact.first || contact.last ? (
                      <>
                        {contact.first} {contact.last}
                      </>
                    ) : (
                      <i>No Name</i>
                    )}{" "}
                    {contact.favorite && <span>★</span>}
                  </Link>
                </li>
              ))}
            </ul>
          ) : (
            <p>
              <i>No contacts</i>
            </p>
          )}
        </nav>

        {/* other code */}
      </div>
    </>
  );
}

```

That's it! React Router will now automatically keep that data in sync with your UI. We don't have any data yet, so you're probably getting a blank list like this:

![](https://reactrouter.com/_docs/tutorial/06.webp)

## Data Writes + HTML Forms

We'll create our first contact in a second, but first let's talk about HTML.

React Router emulates HTML Form navigation as the data mutation primitive, according to web development before the JavaScript cambrian explosion. It gives you the UX capabilities of client rendered apps with the simplicity of the "old school" web model.

While unfamiliar to some web developers, HTML forms actually cause a navigation in the browser, just like clicking a link. The only difference is in the request: links can only change the URL while forms can also change the request method (GET vs POST) and the request body (POST form data).

Without client side routing, the browser will serialize the form's data automatically and send it to the server as the request body for POST, and as URLSearchParams for GET. React Router does the same thing, except instead of sending the request to the server, it uses client side routing and sends it to a route [`action`](https://reactrouter.com/6.30.0/route/action).

We can test this out by clicking the "New" button in our app. The app should blow up because the Vite server isn't configured to handle a POST request (it sends a 404, though it should probably be a 405 🤷).

![](https://reactrouter.com/_docs/tutorial/07.webp)

Instead of sending that POST to the Vite server to create a new contact, let's use client side routing instead.

## Creating Contacts

We'll create new contacts by exporting an `action` in our root route, wiring it up to the route config, and changing our `<form>` to a React Router [`<Form>`](https://reactrouter.com/6.30.0/components/form).

👉 **Create the action and change `<form>` to `<Form>`**

```
import {
  Outlet,
  Link,
  useLoaderData,
  Form,
} from "react-router-dom";
import { getContacts, createContact } from "../contacts";

export async function action() {
  const contact = await createContact();
  return { contact };
}

/* other code */

export default function Root() {
  const { contacts } = useLoaderData();
  return (
    <>
      <div id="sidebar">
        <h1>React Router Contacts</h1>
        <div>
          {/* other code */}
          <Form method="post">
            <button type="submit">New</button>
          </Form>
        </div>

        {/* other code */}
      </div>
    </>
  );
}

```

👉 **Import and set the action on the route**

```
/* other imports */

import Root, {
  loader as rootLoader,
  action as rootAction,
} from "./routes/root";

const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    errorElement: <ErrorPage />,\
    loader: rootLoader,\
    action: rootAction,\
    children: [\
      {\
        path: "contacts/:contactId",\
        element: <Contact />,\
      },\
    ],\
  },\
]);

```

That's it! Go ahead and click the "New" button and you should see a new record pop into the list 🥳

![](https://reactrouter.com/_docs/tutorial/08.webp)

The `createContact` method just creates an empty contact with no name or data or anything. But it does still create a record, promise!

> 🧐 Wait a sec ... How did the sidebar update? Where did we call the `action`? Where's the code to refetch the data? Where are `useState`, `onSubmit` and `useEffect`?!

This is where the "old school web" programming model shows up. As we discussed earlier, [`<Form>`](https://reactrouter.com/6.30.0/components/form) prevents the browser from sending the request to the server and sends it to your route `action` instead. In web semantics, a POST usually means some data is changing. By convention, React Router uses this as a hint to automatically revalidate the data on the page after the action finishes. That means all of your `useLoaderData` hooks update and the UI stays in sync with your data automatically! Pretty cool.

## URL Params in Loaders

👉 **Click on the No Name record**

We should be seeing our old static contact page again, with one difference: the URL now has a real ID for the record.

![](https://reactrouter.com/_docs/tutorial/09.webp)

Reviewing the route config, the route looks like this:

```
[\
  {\
    path: "contacts/:contactId",\
    element: <Contact />,\
  },\
];

```

Note the `:contactId` URL segment. The colon ( `:`) has special meaning, turning it into a "dynamic segment". Dynamic segments will match dynamic (changing) values in that position of the URL, like the contact ID. We call these values in the URL "URL Params", or just "params" for short.

These [`params`](https://reactrouter.com/6.30.0/route/loader#params) are passed to the loader with keys that match the dynamic segment. For example, our segment is named `:contactId` so the value will be passed as `params.contactId`.

These params are most often used to find a record by ID. Let's try it out.

👉 **Add a loader to the contact page and access data with `useLoaderData`**

```
import { Form, useLoaderData } from "react-router-dom";
import { getContact } from "../contacts";

export async function loader({ params }) {
  const contact = await getContact(params.contactId);
  return { contact };
}

export default function Contact() {
  const { contact } = useLoaderData();
  // existing code
}

```

👉 **Configure the loader on the route**

```
/* existing code */
import Contact, {
  loader as contactLoader,
} from "./routes/contact";

const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    errorElement: <ErrorPage />,\
    loader: rootLoader,\
    action: rootAction,\
    children: [\
      {\
        path: "contacts/:contactId",\
        element: <Contact />,\
        loader: contactLoader,\
      },\
    ],\
  },\
]);

/* existing code */

```

![](https://reactrouter.com/_docs/tutorial/10.webp)

## Updating Data

Just like creating data, you update data with [`<Form>`](https://reactrouter.com/6.30.0/components/form). Let's make a new route at `contacts/:contactId/edit`. Again, we'll start with the component and then wire it up to the route config.

👉 **Create the edit component**

```
touch src/routes/edit.jsx

```

👉 **Add the edit page UI**

Nothing we haven't seen before, feel free to copy/paste:

```
import { Form, useLoaderData } from "react-router-dom";

export default function EditContact() {
  const { contact } = useLoaderData();

  return (
    <Form method="post" id="contact-form">
      <p>
        <span>Name</span>
        <input
          placeholder="First"
          aria-label="First name"
          type="text"
          name="first"
          defaultValue={contact?.first}
        />
        <input
          placeholder="Last"
          aria-label="Last name"
          type="text"
          name="last"
          defaultValue={contact?.last}
        />
      </p>
      <label>
        <span>Twitter</span>
        <input
          type="text"
          name="twitter"
          placeholder="@jack"
          defaultValue={contact?.twitter}
        />
      </label>
      <label>
        <span>Avatar URL</span>
        <input
          placeholder="https://example.com/avatar.jpg"
          aria-label="Avatar URL"
          type="text"
          name="avatar"
          defaultValue={contact?.avatar}
        />
      </label>
      <label>
        <span>Notes</span>
        <textarea
          name="notes"
          defaultValue={contact?.notes}
          rows={6}
        />
      </label>
      <p>
        <button type="submit">Save</button>
        <button type="button">Cancel</button>
      </p>
    </Form>
  );
}

```

👉 **Add the new edit route**

```
/* existing code */
import EditContact from "./routes/edit";

const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    errorElement: <ErrorPage />,\
    loader: rootLoader,\
    action: rootAction,\
    children: [\
      {\
        path: "contacts/:contactId",\
        element: <Contact />,\
        loader: contactLoader,\
      },\
      {\
        path: "contacts/:contactId/edit",\
        element: <EditContact />,\
        loader: contactLoader,\
      },\
    ],\
  },\
]);

/* existing code */

```

We want it to be rendered in the root route's outlet, so we made it a sibling to the existing child route.

(You might note we reused the `contactLoader` for this route. This is only because we're being lazy in the tutorial. There is no reason to attempt to share loaders among routes, they usually have their own.)

Alright, clicking the "Edit" button gives us this new UI:

![](https://reactrouter.com/_docs/tutorial/11.webp)

## Updating Contacts with FormData

The edit route we just created already renders a form. All we need to do to update the record is wire up an action to the route. The form will post to the action and the data will be automatically revalidated.

👉 **Add an action to the edit module**

```
import {
  Form,
  useLoaderData,
  redirect,
} from "react-router-dom";
import { updateContact } from "../contacts";

export async function action({ request, params }) {
  const formData = await request.formData();
  const updates = Object.fromEntries(formData);
  await updateContact(params.contactId, updates);
  return redirect(`/contacts/${params.contactId}`);
}

/* existing code */

```

👉 **Wire the action up to the route**

```
/* existing code */
import EditContact, {
  action as editAction,
} from "./routes/edit";

const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    errorElement: <ErrorPage />,\
    loader: rootLoader,\
    action: rootAction,\
    children: [\
      {\
        path: "contacts/:contactId",\
        element: <Contact />,\
        loader: contactLoader,\
      },\
      {\
        path: "contacts/:contactId/edit",\
        element: <EditContact />,\
        loader: contactLoader,\
        action: editAction,\
      },\
    ],\
  },\
]);

/* existing code */

```

Fill out the form, hit save, and you should see something like this! (Except easier on the eyes and maybe less hairy.)

![](https://reactrouter.com/_docs/tutorial/12.webp)

## Mutation Discussion

> 😑 It worked, but I have no idea what is going on here...

Let's dig in a bit...

Open up `src/routes/edit.jsx` and look at the form elements. Notice how they each have a name:

```
<input
  placeholder="First"
  aria-label="First name"
  type="text"
  name="first"
  defaultValue={contact.first}
/>

```

Without JavaScript, when a form is submitted, the browser will create [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) and set it as the body of the request when it sends it to the server. As mentioned before, React Router prevents that and sends the request to your action instead, including the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData).

Each field in the form is accessible with `formData.get(name)`. For example, given the input field from above, you could access the first and last names like this:

```
export async function action({ request, params }) {
  const formData = await request.formData();
  const firstName = formData.get("first");
  const lastName = formData.get("last");
  // ...
}

```

Since we have a handful of form fields, we used [`Object.fromEntries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries) to collect them all into an object, which is exactly what our `updateContact` function wants.

```
const updates = Object.fromEntries(formData);
updates.first; // "Some"
updates.last; // "Name"

```

Aside from `action`, none of these APIs we're discussing are provided by React Router: [`request`](https://developer.mozilla.org/en-US/docs/Web/API/Request), [`request.formData`](https://developer.mozilla.org/en-US/docs/Web/API/Request/formData), [`Object.fromEntries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries) are all provided by the web platform.

After we finished the action, note the [`redirect`](https://reactrouter.com/6.30.0/fetch/redirect) at the end:

```
export async function action({ request, params }) {
  const formData = await request.formData();
  const updates = Object.fromEntries(formData);
  await updateContact(params.contactId, updates);
  return redirect(`/contacts/${params.contactId}`);
}

```

Loaders and actions can both [return a `Response`](https://reactrouter.com/6.30.0/route/loader#returning-responses) (makes sense, since they received a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request)!). The [`redirect`](https://reactrouter.com/6.30.0/fetch/redirect) helper just makes it easier to return a [response](https://developer.mozilla.org/en-US/docs/Web/API/Response) that tells the app to change locations.

Without client side routing, if a server redirected after a POST request, the new page would fetch the latest data and render. As we learned before, React Router emulates this model and automatically revalidates the data on the page after the action. That's why the sidebar automatically updates when we save the form. The extra revalidation code doesn't exist without client side routing, so it doesn't need to exist with client side routing either!

## Redirecting new records to the edit page

Now that we know how to redirect, let's update the action that creates new contacts to redirect to the edit page:

👉 **Redirect to the new record's edit page**

```
import {
  Outlet,
  Link,
  useLoaderData,
  Form,
  redirect,
} from "react-router-dom";
import { getContacts, createContact } from "../contacts";

export async function action() {
  const contact = await createContact();
  return redirect(`/contacts/${contact.id}/edit`);
}

```

Now when we click "New", we should end up on the edit page:

![](https://reactrouter.com/_docs/tutorial/13.webp)

👉 **Add a handful of records**

I'm going to use the stellar lineup of speakers from the first Remix Conference 😁

![](https://reactrouter.com/_docs/tutorial/14.webp)

## Active Link Styling

Now that we have a bunch of records, it's not clear which one we're looking at in the sidebar. We can use [`NavLink`](https://reactrouter.com/6.30.0/components/nav-link) to fix this.

👉 **Use a `NavLink` in the sidebar**

```
import {
  Outlet,
  NavLink,
  useLoaderData,
  Form,
  redirect,
} from "react-router-dom";

export default function Root() {
  return (
    <>
      <div id="sidebar">
        {/* other code */}

        <nav>
          {contacts.length ? (
            <ul>
              {contacts.map((contact) => (
                <li key={contact.id}>
                  <NavLink
                    to={`contacts/${contact.id}`}
                    className={({ isActive, isPending }) =>
                      isActive
                        ? "active"
                        : isPending
                        ? "pending"
                        : ""
                    }
                  >
                    {/* other code */}
                  </NavLink>
                </li>
              ))}
            </ul>
          ) : (
            <p>{/* other code */}</p>
          )}
        </nav>
      </div>
    </>
  );
}

```

Note that we are passing a function to `className`. When the user is at the URL in the `NavLink`, then `isActive` will be true. When it's _about_ to be active (the data is still loading) then `isPending` will be true. This allows us to easily indicate where the user is, as well as provide immediate feedback on links that have been clicked but we're still waiting for data to load.

![](https://reactrouter.com/_docs/tutorial/15.webp)

## Global Pending UI

As the user navigates the app, React Router will _leave the old page up_ as data is loading for the next page. You may have noticed the app feels a little unresponsive as you click between the list. Let's provide the user with some feedback so the app doesn't feel unresponsive.

React Router is managing all of the state behind the scenes and reveals the pieces of it you need to build dynamic web apps. In this case, we'll use the [`useNavigation`](https://reactrouter.com/6.30.0/hooks/use-navigation) hook.

👉 **`useNavigation` to add global pending UI**

```
import {
  // existing code
  useNavigation,
} from "react-router-dom";

// existing code

export default function Root() {
  const { contacts } = useLoaderData();
  const navigation = useNavigation();

  return (
    <>
      <div id="sidebar">{/* existing code */}</div>
      <div
        id="detail"
        className={
          navigation.state === "loading" ? "loading" : ""
        }
      >
        <Outlet />
      </div>
    </>
  );
}

```

[`useNavigation`](https://reactrouter.com/6.30.0/hooks/use-navigation) returns the current navigation state: it can be one of `"idle" | "submitting" | "loading"`.

In our case, we add a `"loading"` class to the main part of the app if we're not idle. The CSS then adds a nice fade after a short delay (to avoid flickering the UI for fast loads). You could do anything you want though, like show a spinner or loading bar across the top.

![](https://reactrouter.com/_docs/tutorial/16.webp)

Note that our data model ( `src/contacts.js`) has a clientside cache, so navigating to the same contact is fast the second time. This behavior is _not_ React Router, it will re-load data for changing routes no matter if you've been there before or not. It does, however, avoid calling the loaders for _unchanging_ routes (like the list) during a navigation.

## Deleting Records

If we review code in the contact route, we can find the delete button looks like this:

```
<Form
  method="post"
  action="destroy"
  onSubmit={(event) => {
    if (
      !confirm(
        "Please confirm you want to delete this record."
      )
    ) {
      event.preventDefault();
    }
  }}
>
  <button type="submit">Delete</button>
</Form>

```

Note the `action` points to `"destroy"`. Like `<Link to>`, `<Form action>` can take a _relative_ value. Since the form is rendered in `contact/:contactId`, then a relative action with `destroy` will submit the form to `contact/:contactId/destroy` when clicked.

At this point you should know everything you need to know to make the delete button work. Maybe give it a shot before moving on? You'll need:

1. A new route
2. An `action` at that route
3. `deleteContact` from `src/contacts.js`

👉 **Create the "destroy" route module**

```
touch src/routes/destroy.jsx

```

👉 **Add the destroy action**

```
import { redirect } from "react-router-dom";
import { deleteContact } from "../contacts";

export async function action({ params }) {
  await deleteContact(params.contactId);
  return redirect("/");
}

```

👉 **Add the destroy route to the route config**

```
/* existing code */
import { action as destroyAction } from "./routes/destroy";

const router = createBrowserRouter([\
  {\
    path: "/",\
    /* existing root route props */\
    children: [\
      /* existing routes */\
      {\
        path: "contacts/:contactId/destroy",\
        action: destroyAction,\
      },\
    ],\
  },\
]);

/* existing code */

```

Alright, navigate to a record and click the "Delete" button. It works!

> 😅 I'm still confused why this all works

When the user clicks the submit button:

1. `<Form>` prevents the default browser behavior of sending a new POST request to the server, but instead emulates the browser by creating a POST request with client side routing
2. The `<Form action="destroy">` matches the new route at `"contacts/:contactId/destroy"` and sends it the request
3. After the action redirects, React Router calls all of the loaders for the data on the page to get the latest values (this is "revalidation"). `useLoaderData` returns new values and causes the components to update!

Add a form, add an action, React Router does the rest.

## Contextual Errors

Just for kicks, throw an error in the destroy action:

```
export async function action({ params }) {
  throw new Error("oh dang!");
  await deleteContact(params.contactId);
  return redirect("/");
}

```

![](https://reactrouter.com/_docs/tutorial/17.webp)

Recognize that screen? It's our [`errorElement`](https://reactrouter.com/6.30.0/route/error-element) from before. The user, however, can't really do anything to recover from this screen except to hit refresh.

Let's create a contextual error message for the destroy route:

```
[\
  /* other routes */\
  {\
    path: "contacts/:contactId/destroy",\
    action: destroyAction,\
    errorElement: <div>Oops! There was an error.</div>,\
  },\
];

```

Now try it again:

![](https://reactrouter.com/_docs/tutorial/18.webp)

Our user now has more options than slamming refresh, they can continue to interact with the parts of the page that aren't having trouble 🙌

Because the destroy route has its own `errorElement` and is a child of the root route, the error will render there instead of the root. As you probably noticed, these errors bubble up to the nearest `errorElement`. Add as many or as few as you like, as long as you've got one at the root.

## Index Routes

When we load up the app, you'll notice a big blank page on the right side of our list.

![](https://reactrouter.com/_docs/tutorial/19.webp)

When a route has children, and you're at the parent route's path, the `<Outlet>` has nothing to render because no children match. You can think of index routes as the default child route to fill in that space.

👉 **Create the index route module**

```
touch src/routes/index.jsx

```

👉 **Fill in the index component's elements**

Feel free to copy paste, nothing special here.

```
export default function Index() {
  return (
    <p id="zero-state">
      This is a demo for React Router.
      <br />
      Check out{" "}
      <a href="https://reactrouter.com">
        the docs at reactrouter.com
      </a>
      .
    </p>
  );
}

```

👉 **Configure the index route**

```
// existing code
import Index from "./routes/index";

const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    errorElement: <ErrorPage />,\
    loader: rootLoader,\
    action: rootAction,\
    children: [\
      { index: true, element: <Index /> },\
      /* existing routes */\
    ],\
  },\
]);

```

Note the [`{ index:true }`](https://reactrouter.com/6.30.0/route/route#index) instead of [`{ path: "" }`](https://reactrouter.com/6.30.0/route/route#path). That tells the router to match and render this route when the user is at the parent route's exact path, so there are no other child routes to render in the `<Outlet>`.

![](https://reactrouter.com/_docs/tutorial/20.webp)

Voila! No more blank space. It's common to put dashboards, stats, feeds, etc. at index routes. They can participate in data loading as well.

## Cancel Button

On the edit page we've got a cancel button that doesn't do anything yet. We'd like it to do the same thing as the browser's back button.

We'll need a click handler on the button as well as [`useNavigate`](https://reactrouter.com/6.30.0/hooks/use-navigate) from React Router.

👉 **Add the cancel button click handler with `useNavigate`**

```
import {
  Form,
  useLoaderData,
  redirect,
  useNavigate,
} from "react-router-dom";

export default function EditContact() {
  const { contact } = useLoaderData();
  const navigate = useNavigate();

  return (
    <Form method="post" id="contact-form">
      {/* existing code */}

      <p>
        <button type="submit">Save</button>
        <button
          type="button"
          onClick={() => {
            navigate(-1);
          }}
        >
          Cancel
        </button>
      </p>
    </Form>
  );
}

```

Now when the user clicks "Cancel", they'll be sent back one entry in the browser's history.

> 🧐 Why is there no `event.preventDefault` on the button?

A `<button type="button">`, while seemingly redundant, is the HTML way of preventing a button from submitting its form.

Two more features to go. We're on the home stretch!

## URL Search Params and GET Submissions

All of our interactive UI so far have been either links that change the URL or forms that post data to actions. The search field is interesting because it's a mix of both: it's a form but it only changes the URL, it doesn't change data.

Right now it's just a normal HTML `<form>`, not a React Router `<Form>`. Let's see what the browser does with it by default:

👉 **Type a name into the search field and hit the enter key**

Note the browser's URL now contains your query in the URL as [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams):

```
http://127.0.0.1:5173/?q=ryan

```

If we review the search form, it looks like this:

```
<form id="search-form" role="search">
  <input
    id="q"
    aria-label="Search contacts"
    placeholder="Search"
    type="search"
    name="q"
  />
  <div id="search-spinner" aria-hidden hidden={true} />
  <div className="sr-only" aria-live="polite"></div>
</form>

```

As we've seen before, browsers can serialize forms by the `name` attribute of it's input elements. The name of this input is `q`, that's why the URL has `?q=`. If we named it `search` the URL would be `?search=`.

Note that this form is different from the others we've used, it does not have `<form method="post">`. The default `method` is `"get"`. That means when the browser creates the request for the next document, it doesn't put the form data into the request POST body, but into the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) of a GET request.

## GET Submissions with Client Side Routing

Let's use client side routing to submit this form and filter the list in our existing loader.

👉 **Change `<form>` to `<Form>`**

```
<Form id="search-form" role="search">
  <input
    id="q"
    aria-label="Search contacts"
    placeholder="Search"
    type="search"
    name="q"
  />
  <div id="search-spinner" aria-hidden hidden={true} />
  <div className="sr-only" aria-live="polite"></div>
</Form>

```

👉 **Filter the list if there are URLSearchParams**

```
export async function loader({ request }) {
  const url = new URL(request.url);
  const q = url.searchParams.get("q");
  const contacts = await getContacts(q);
  return { contacts };
}

```

![](https://reactrouter.com/_docs/tutorial/21.webp)

Because this is a GET, not a POST, React Router _does not_ call the `action`. Submitting a GET form is the same as clicking a link: only the URL changes. That's why the code we added for filtering is in the `loader`, not the `action` of this route.

This also means it's a normal page navigation. You can click the back button to get back to where you were.

## Synchronizing URLs to Form State

There are a couple of UX issues here that we can take care of quickly.

1. If you click back after a search, the form field still has the value you entered even though the list is no longer filtered.
2. If you refresh the page after searching, the form field no longer has the value in it, even though the list is filtered

In other words, the URL and our form state are out of sync.

👉 **Return `q` from your loader and set it as the search field default value**

```
// existing code

export async function loader({ request }) {
  const url = new URL(request.url);
  const q = url.searchParams.get("q");
  const contacts = await getContacts(q);
  return { contacts, q };
}

export default function Root() {
  const { contacts, q } = useLoaderData();
  const navigation = useNavigation();

  return (
    <>
      <div id="sidebar">
        <h1>React Router Contacts</h1>
        <div>
          <Form id="search-form" role="search">
            <input
              id="q"
              aria-label="Search contacts"
              placeholder="Search"
              type="search"
              name="q"
              defaultValue={q}
            />
            {/* existing code */}
          </Form>
          {/* existing code */}
        </div>
        {/* existing code */}
      </div>
      {/* existing code */}
    </>
  );
}

```

That solves problem (2). If you refresh the page now, the input field will show the query.

![](https://reactrouter.com/_docs/tutorial/21.webp)

Now for problem (1), clicking the back button and updating the input. We can bring in `useEffect` from React to manipulate the form's state in the DOM directly.

👉 **Synchronize input value with the URL Search Params**

```
import { useEffect } from "react";

// existing code

export default function Root() {
  const { contacts, q } = useLoaderData();
  const navigation = useNavigation();

  useEffect(() => {
    document.getElementById("q").value = q;
  }, [q]);

  // existing code
}

```

> 🤔 Shouldn't you use a controlled component and React State for this?

You could certainly do this as a controlled component, but you'll end up with more complexity for the same behavior. You don't control the URL, the user does with the back/forward buttons. There would be more synchronization points with a controlled component.

If you're still concerned, expand this to see what it would look like

Notice how controlling the input requires three points of synchronization now instead of just one. The behavior is identical but the code is more complex.

```
import { useEffect, useState } from "react";
// existing code

export async function loader({ request }) {
  const url = new URL(request.url);
  const q = url.searchParams.get("q") || "";
  const contacts = await getContacts(q);
  return { contacts, q };
}

// existing code

export default function Root() {
  const { contacts, q } = useLoaderData();
  const [query, setQuery] = useState(q);
  const navigation = useNavigation();

  useEffect(() => {
    setQuery(q);
  }, [q]);

  return (
    <>
      <div id="sidebar">
        <h1>React Router Contacts</h1>
        <div>
          <Form id="search-form" role="search">
            <input
              id="q"
              aria-label="Search contacts"
              placeholder="Search"
              type="search"
              name="q"
              value={query}
              onChange={(e) => {
                setQuery(e.target.value);
              }}
            />
            {/* existing code */}
          </Form>
          {/* existing code */}
        </div>
        {/* existing code */}
      </div>
    </>
  );
}

```

## Submitting Forms `onChange`

We've got a product decision to make here. For this UI, we'd probably rather have the filtering happen on every key stroke instead of when the form is explicitly submitted.

We've seen `useNavigate` already, we'll use its cousin, [`useSubmit`](https://reactrouter.com/6.30.0/hooks/use-submit), for this.

```
// existing code
import {
  // existing code
  useSubmit,
} from "react-router-dom";

export default function Root() {
  const { contacts, q } = useLoaderData();
  const navigation = useNavigation();
  const submit = useSubmit();

  return (
    <>
      <div id="sidebar">
        <h1>React Router Contacts</h1>
        <div>
          <Form id="search-form" role="search">
            <input
              id="q"
              aria-label="Search contacts"
              placeholder="Search"
              type="search"
              name="q"
              defaultValue={q}
              onChange={(event) => {
                submit(event.currentTarget.form);
              }}
            />
            {/* existing code */}
          </Form>
          {/* existing code */}
        </div>
        {/* existing code */}
      </div>
      {/* existing code */}
    </>
  );
}

```

Now as you type, the form is submitted automatically!

Note the argument to [`submit`](https://reactrouter.com/6.30.0/hooks/use-submit). We're passing in `event.currentTarget.form`. The `currentTarget` is the DOM node the event is attached to, and the `currentTarget.form` is the input's parent form node. The `submit` function will serialize and submit any form you pass to it.

## Adding Search Spinner

In a production app, it's likely this search will be looking for records in a database that is too large to send all at once and filter client side. That's why this demo has some faked network latency.

Without any loading indicator, the search feels kinda sluggish. Even if we could make our database faster, we'll always have the user's network latency in the way and out of our control. For a better UX, let's add some immediate UI feedback for the search. For this we'll use [`useNavigation`](https://reactrouter.com/6.30.0/hooks/use-navigation) again.

👉 **Add the search spinner**

```
// existing code

export default function Root() {
  const { contacts, q } = useLoaderData();
  const navigation = useNavigation();
  const submit = useSubmit();

  const searching =
    navigation.location &&
    new URLSearchParams(navigation.location.search).has(
      "q"
    );

  useEffect(() => {
    document.getElementById("q").value = q;
  }, [q]);

  return (
    <>
      <div id="sidebar">
        <h1>React Router Contacts</h1>
        <div>
          <Form id="search-form" role="search">
            <input
              id="q"
              className={searching ? "loading" : ""}
              // existing code
            />
            <div
              id="search-spinner"
              aria-hidden
              hidden={!searching}
            />
            {/* existing code */}
          </Form>
          {/* existing code */}
        </div>
        {/* existing code */}
      </div>
      {/* existing code */}
    </>
  );
}

```

![](https://reactrouter.com/_docs/tutorial/22.webp)

The `navigation.location` will show up when the app is navigating to a new URL and loading the data for it. It then goes away when there is no pending navigation anymore.

## Managing the History Stack

Now that the form is submitted for every key stroke, if we type the characters "seba" and then delete them with backspace, we end up with 7 new entries in the stack 😂. We definitely don't want this

![](https://reactrouter.com/_docs/tutorial/23.webp)

We can avoid this by _replacing_ the current entry in the history stack with the next page, instead of pushing into it.

👉 **Use `replace` in `submit`**

```
// existing code

export default function Root() {
  // existing code

  return (
    <>
      <div id="sidebar">
        <h1>React Router Contacts</h1>
        <div>
          <Form id="search-form" role="search">
            <input
              id="q"
              // existing code
              onChange={(event) => {
                const isFirstSearch = q == null;
                submit(event.currentTarget.form, {
                  replace: !isFirstSearch,
                });
              }}
            />
            {/* existing code */}
          </Form>
          {/* existing code */}
        </div>
        {/* existing code */}
      </div>
      {/* existing code */}
    </>
  );
}

```

We only want to replace search results, not the page before we started searching, so we do a quick check if this is the first search or not and then decide to replace.

Each key stroke no longer creates new entries, so the user can click back out of the search results without having to click it 7 times 😅.

## Mutations Without Navigation

So far all of our mutations (the times we change data) have used forms that navigate, creating new entries in the history stack. While these user flows are common, it's equally as common to want to change data _without_ causing a navigation.

For these cases, we have the [`useFetcher`](https://reactrouter.com/6.30.0/hooks/use-fetcher) hook. It allows us to communicate with loaders and actions without causing a navigation.

The ★ button on the contact page makes sense for this. We aren't creating or deleting a new record, we don't want to change pages, we simply want to change the data on the page we're looking at.

👉 **Change the `<Favorite>` form to a fetcher form**

```
import {
  useLoaderData,
  Form,
  useFetcher,
} from "react-router-dom";

// existing code

function Favorite({ contact }) {
  const fetcher = useFetcher();
  const favorite = contact.favorite;

  return (
    <fetcher.Form method="post">
      <button
        name="favorite"
        value={favorite ? "false" : "true"}
        aria-label={
          favorite
            ? "Remove from favorites"
            : "Add to favorites"
        }
      >
        {favorite ? "★" : "☆"}
      </button>
    </fetcher.Form>
  );
}

```

Might want to take a look at that form while we're here. As always, our form has fields with a `name` prop. This form will send [`formData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) with a `favorite` key that's either `"true" | "false"`. Since it's got `method="post"` it will call the action. Since there is no `<fetcher.Form action="...">` prop, it will post to the route where the form is rendered.

👉 **Create the action**

```
// existing code
import { getContact, updateContact } from "../contacts";

export async function action({ request, params }) {
  const formData = await request.formData();
  return updateContact(params.contactId, {
    favorite: formData.get("favorite") === "true",
  });
}

export default function Contact() {
  // existing code
}

```

Pretty simple. Pull the form data off the request and send it to the data model.

👉 **Configure the route's new action**

```
// existing code
import Contact, {
  loader as contactLoader,
  action as contactAction,
} from "./routes/contact";

const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    errorElement: <ErrorPage />,\
    loader: rootLoader,\
    action: rootAction,\
    children: [\
      { index: true, element: <Index /> },\
      {\
        path: "contacts/:contactId",\
        element: <Contact />,\
        loader: contactLoader,\
        action: contactAction,\
      },\
      /* existing code */\
    ],\
  },\
]);

```

Alright, we're ready to click the star next to the user's name!

![](https://reactrouter.com/_docs/tutorial/24.webp)

Check that out, both stars automatically update. Our new `<fetcher.Form method="post">` works almost exactly like the `<Form>` we've been using: it calls the action and then all data is revalidated automatically--even your errors will be caught the same way.

There is one key difference though, it's not a navigation--the URL doesn't change, the history stack is unaffected.

## Optimistic UI

You probably noticed the app felt kind of unresponsive when we clicked the favorite button from the last section. Once again, we added some network latency because you're going to have it in the real world!

To give the user some feedback, we could put the star into a loading state with [`fetcher.state`](https://reactrouter.com/6.30.0/hooks/use-fetcher#fetcherstate) (a lot like `navigation.state` from before), but we can do something even better this time. We can use a strategy called "optimistic UI"

The fetcher knows the form data being submitted to the action, so it's available to you on `fetcher.formData`. We'll use that to immediately update the star's state, even though the network hasn't finished. If the update eventually fails, the UI will revert to the real data.

👉 **Read the optimistic value from `fetcher.formData`**

```
// existing code

function Favorite({ contact }) {
  const fetcher = useFetcher();

  const favorite = fetcher.formData
    ? fetcher.formData.get("favorite") === "true"
    : contact.favorite;

  return (
    <fetcher.Form method="post">
      <button
        name="favorite"
        value={favorite ? "false" : "true"}
        aria-label={
          favorite
            ? "Remove from favorites"
            : "Add to favorites"
        }
      >
        {favorite ? "★" : "☆"}
      </button>
    </fetcher.Form>
  );
}

```

If you click the button now you should see the star _immediately_ change to the new state. Instead of always rendering the actual data, we check if the fetcher has any `formData` being submitted, if so, we'll use that instead. When the action is done, the `fetcher.formData` will no longer exist and we're back to using the actual data. So even if you write bugs in your optimistic UI code, it'll eventually go back to the correct state 🥹

## Not Found Data

What happens if the contact we're trying to load doesn't exist?

![](https://reactrouter.com/_docs/tutorial/25.webp)

Our root [`errorElement`](https://reactrouter.com/6.30.0/route/error-element) is catching this unexpected error as we try to render a `null` contact. Nice the error was properly handled, but we can do better!

Whenever you have an expected error case in a loader or action–like the data not existing–you can `throw`. The call stack will break, React Router will catch it, and the error path is rendered instead. We won't even try to render a `null` contact.

👉 **Throw a 404 response in the loader**

```
export async function loader({ params }) {
  const contact = await getContact(params.contactId);
  if (!contact) {
    throw new Response("", {
      status: 404,
      statusText: "Not Found",
    });
  }
  return { contact };
}

```

![](https://reactrouter.com/_docs/tutorial/27.webp)

Instead of hitting a render error with `Cannot read properties of null`, we avoid the component completely and render the error path instead, telling the user something more specific.

This keeps your happy paths, happy. Your route elements don't need to concern themselves with error and loading states.

## Pathless Routes

One last thing. The last error page we saw would be better if it rendered inside the root outlet, instead of the whole page. In fact, every error in all of our child routes would be better in the outlet, then the user has more options than hitting refresh.

We'd like it to look like this:

![](https://reactrouter.com/_docs/tutorial/26.webp)

We could add the error element to every one of the child routes but, since it's all the same error page, this isn't recommended.

There's a cleaner way. Routes can be used _without_ a path, which lets them participate in the UI layout without requiring new path segments in the URL. Check it out:

👉 **Wrap the child routes in a pathless route**

```
createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    loader: rootLoader,\
    action: rootAction,\
    errorElement: <ErrorPage />,\
    children: [\
      {\
        errorElement: <ErrorPage />,\
        children: [\
          { index: true, element: <Index /> },\
          {\
            path: "contacts/:contactId",\
            element: <Contact />,\
            loader: contactLoader,\
            action: contactAction,\
          },\
          /* the rest of the routes */\
        ],\
      },\
    ],\
  },\
]);

```

When any errors are thrown in the child routes, our new pathless route will catch it and render, preserving the root route's UI!

## JSX Routes

And for our final trick, many folks prefer to configure their routes with JSX. You can do that with `createRoutesFromElements`. There is no functional difference between JSX or objects when configuring your routes, it's simply a stylistic preference.

```
import {
  createRoutesFromElements,
  createBrowserRouter,
  Route,
} from "react-router-dom";

const router = createBrowserRouter(
  createRoutesFromElements(
    <Route
      path="/"
      element={<Root />}
      loader={rootLoader}
      action={rootAction}
      errorElement={<ErrorPage />}
    >
      <Route errorElement={<ErrorPage />}>
        <Route index element={<Index />} />
        <Route
          path="contacts/:contactId"
          element={<Contact />}
          loader={contactLoader}
          action={contactAction}
        />
        <Route
          path="contacts/:contactId/edit"
          element={<EditContact />}
          loader={contactLoader}
          action={editAction}
        />
        <Route
          path="contacts/:contactId/destroy"
          action={destroyAction}
        />
      </Route>
    </Route>
  )
);

```

* * *

That's it! Thanks for giving React Router a shot. We hope this tutorial gives you a solid start to build great user experiences. There's a lot more you can do with React Router, so make sure to check out all the APIs 😀

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [@react-router/node](https://api.reactrouter.com/v7/modules/_react_router_node.html)

# Module @react-router/node

Node.js platform abstractions for React Router

```sh
npm install @react-router/node
Copy
```

### Index

### Interfaces

[RequestListenerOptions](https://api.reactrouter.com/v7/interfaces/_react_router_node.RequestListenerOptions.html)

### Functions

[createFileSessionStorage](https://api.reactrouter.com/v7/functions/_react_router_node.createFileSessionStorage.html) [createReadableStreamFromReadable](https://api.reactrouter.com/v7/functions/_react_router_node.createReadableStreamFromReadable.html) [createRequestListener](https://api.reactrouter.com/v7/functions/_react_router_node.createRequestListener.html) [readableStreamToString](https://api.reactrouter.com/v7/functions/_react_router_node.readableStreamToString.html) [writeAsyncIterableToWritable](https://api.reactrouter.com/v7/functions/_react_router_node.writeAsyncIterableToWritable.html) [writeReadableStreamToWritable](https://api.reactrouter.com/v7/functions/_react_router_node.writeReadableStreamToWritable.html)

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/how-to/file-uploads) [dev](https://reactrouter.com/dev/how-to/file-uploads)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

File Uploads

On this page

- [Basic File Upload](https://reactrouter.com/how-to/file-uploads#basic-file-upload)
- [1\. Setup some routes](https://reactrouter.com/how-to/file-uploads#1-setup-some-routes)
- [2\. Add the form data parser](https://reactrouter.com/how-to/file-uploads#2-add-the-form-data-parser)
- [3\. Create a route with an upload action](https://reactrouter.com/how-to/file-uploads#3-create-a-route-with-an-upload-action)
- [Local Storage Implementation](https://reactrouter.com/how-to/file-uploads#local-storage-implementation)
- [1\. Add the storage package](https://reactrouter.com/how-to/file-uploads#1-add-the-storage-package)
- [2\. Create a storage configuration](https://reactrouter.com/how-to/file-uploads#2-create-a-storage-configuration)
- [3\. Implement the upload handler](https://reactrouter.com/how-to/file-uploads#3-implement-the-upload-handler)
- [4\. Add a route to serve the uploaded file](https://reactrouter.com/how-to/file-uploads#4-add-a-route-to-serve-the-uploaded-file)

- [Basic File Upload](https://reactrouter.com/how-to/file-uploads#basic-file-upload)
- [1\. Setup some routes](https://reactrouter.com/how-to/file-uploads#1-setup-some-routes)
- [2\. Add the form data parser](https://reactrouter.com/how-to/file-uploads#2-add-the-form-data-parser)
- [3\. Create a route with an upload action](https://reactrouter.com/how-to/file-uploads#3-create-a-route-with-an-upload-action)
- [Local Storage Implementation](https://reactrouter.com/how-to/file-uploads#local-storage-implementation)
- [1\. Add the storage package](https://reactrouter.com/how-to/file-uploads#1-add-the-storage-package)
- [2\. Create a storage configuration](https://reactrouter.com/how-to/file-uploads#2-create-a-storage-configuration)
- [3\. Implement the upload handler](https://reactrouter.com/how-to/file-uploads#3-implement-the-upload-handler)
- [4\. Add a route to serve the uploaded file](https://reactrouter.com/how-to/file-uploads#4-add-a-route-to-serve-the-uploaded-file)

# File Uploads

Handle file uploads in your React Router applications. This guide uses some packages from the [Remix The Web](https://github.com/mjackson/remix-the-web) project to make file uploads easier.

_Thank you to David Adams for [writing an original guide](https://programmingarehard.com/2024/09/06/remix-file-uploads-updated.html/) on which this doc is based. You can refer to it for even more examples._

## Basic File Upload

### 1\. Setup some routes

You can setup your routes however you like. This example uses the following structure:

```
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [\
  // ... other routes\
  route("user/:id", "pages/user-profile.tsx", [\
    route("avatar", "api/avatar.tsx"),\
  ]),\
] satisfies RouteConfig;

```

Copy code to clipboard

### 2\. Add the form data parser

`form-data-parser` is a wrapper around `request.formData()` that provides streaming support for handling file uploads.

```
npm i @mjackson/form-data-parser

```

Copy code to clipboard

[See the `form-data-parser` docs for more information](https://github.com/mjackson/remix-the-web/tree/main/packages/form-data-parser)

### 3\. Create a route with an upload action

The `parseFormData` function takes an `uploadHandler` function as an argument. This function will be called for each file upload in the form.

You must set the form's `enctype` to `multipart/form-data` for file uploads to work.

```
import {
  type FileUpload,
  parseFormData,
} from "@mjackson/form-data-parser";

export async function action({
  request,
}: ActionFunctionArgs) {
  const uploadHandler = async (fileUpload: FileUpload) => {
    if (fileUpload.fieldName === "avatar") {
      // process the upload and return a File
    }
  };

  const formData = await parseFormData(
    request,
    uploadHandler
  );
  // 'avatar' has already been processed at this point
  const file = formData.get("avatar");
}

export default function Component() {
  return (
    <form method="post" encType="multipart/form-data">
      <input type="file" name="avatar" />
      <button>Submit</button>
    </form>
  );
}

```

Copy code to clipboard

## Local Storage Implementation

### 1\. Add the storage package

`file-storage` is a key/value interface for storing [File objects](https://developer.mozilla.org/en-US/docs/Web/API/File) in JavaScript. Similar to how `localStorage` allows you to store key/value pairs of strings in the browser, file-storage allows you to store key/value pairs of files on the server.

```
npm i @mjackson/file-storage

```

Copy code to clipboard

[See the `file-storage` docs for more information](https://github.com/mjackson/remix-the-web/tree/main/packages/file-storage)

### 2\. Create a storage configuration

Create a file that exports a `LocalFileStorage` instance to be used by different routes.

```
import { LocalFileStorage } from "@mjackson/file-storage/local";

export const fileStorage = new LocalFileStorage(
  "./uploads/avatars"
);

export function getStorageKey(userId: string) {
  return `user-${userId}-avatar`;
}

```

Copy code to clipboard

### 3\. Implement the upload handler

Update the form's `action` to store files in the `fileStorage` instance.

```
import {
  type FileUpload,
  parseFormData,
} from "@mjackson/form-data-parser";
import {
  fileStorage,
  getStorageKey,
} from "~/avatar-storage.server";
import type { Route } from "./+types/user-profile";

export async function action({
  request,
  params,
}: Route.ActionArgs) {
  async function uploadHandler(fileUpload: FileUpload) {
    if (
      fileUpload.fieldName === "avatar" &&
      fileUpload.type.startsWith("image/")
    ) {
      let storageKey = getStorageKey(params.id);

      // FileUpload objects are not meant to stick around for very long (they are
      // streaming data from the request.body); store them as soon as possible.
      await fileStorage.set(storageKey, fileUpload);

      // Return a File for the FormData object. This is a LazyFile that knows how
      // to access the file's content if needed (using e.g. file.stream()) but
      // waits until it is requested to actually read anything.
      return fileStorage.get(storageKey);
    }
  }

  const formData = await parseFormData(
    request,
    uploadHandler
  );
}

export default function UserPage({
  actionData,
  params,
}: Route.ComponentProps) {
  return (
    <div>
      <h1>User {params.id}</h1>
      <form
        method="post"
        // The form's enctype must be set to "multipart/form-data" for file uploads
        encType="multipart/form-data"
      >
        <input type="file" name="avatar" accept="image/*" />
        <button>Submit</button>
      </form>

      <img
        src={`/user/${params.id}/avatar`}
        alt="user avatar"
      />
    </div>
  );
}

```

Copy code to clipboard

### 4\. Add a route to serve the uploaded file

Create a [resource route](https://reactrouter.com/how-to/resource-routes) that streams the file as a response.

```
import {
  fileStorage,
  getStorageKey,
} from "~/avatar-storage.server";
import type { Route } from "./+types/avatar";

export async function loader({ params }: Route.LoaderArgs) {
  const storageKey = getStorageKey(params.id);
  const file = await fileStorage.get(storageKey);

  if (!file) {
    throw new Response("User avatar not found", {
      status: 404,
    });
  }

  return new Response(file.stream(), {
    headers: {
      "Content-Type": file.type,
      "Content-Disposition": `attachment; filename=${file.name}`,
    },
  });
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/how-to/file-uploads.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

createBrowserRouter

On this page

- [Type Declaration](https://reactrouter.com/6.30.0/routers/create-browser-router#type-declaration)
- [`routes`](https://reactrouter.com/6.30.0/routers/create-browser-router#routes)
- [`opts.basename`](https://reactrouter.com/6.30.0/routers/create-browser-router#optsbasename)
- [`opts.future`](https://reactrouter.com/6.30.0/routers/create-browser-router#optsfuture)
- [`opts.hydrationData`](https://reactrouter.com/6.30.0/routers/create-browser-router#optshydrationdata)
- [Partial Hydration Data](https://reactrouter.com/6.30.0/routers/create-browser-router#partial-hydration-data)
- [`opts.dataStrategy`](https://reactrouter.com/6.30.0/routers/create-browser-router#optsdatastrategy)
- [Type Declaration](https://reactrouter.com/6.30.0/routers/create-browser-router#type-declaration-1)
- [Overview](https://reactrouter.com/6.30.0/routers/create-browser-router#overview)
- [Example Use Cases](https://reactrouter.com/6.30.0/routers/create-browser-router#example-use-cases)
- [`opts.patchRoutesOnNavigation`](https://reactrouter.com/6.30.0/routers/create-browser-router#optspatchroutesonnavigation)
- [Type Declaration](https://reactrouter.com/6.30.0/routers/create-browser-router#type-declaration-2)
- [Overview](https://reactrouter.com/6.30.0/routers/create-browser-router#overview-1)
- [A note on routes with parameters](https://reactrouter.com/6.30.0/routers/create-browser-router#a-note-on-routes-with-parameters)
- [`opts.window`](https://reactrouter.com/6.30.0/routers/create-browser-router#optswindow)

- [Type Declaration](https://reactrouter.com/6.30.0/routers/create-browser-router#type-declaration)
- [`routes`](https://reactrouter.com/6.30.0/routers/create-browser-router#routes)
- [`opts.basename`](https://reactrouter.com/6.30.0/routers/create-browser-router#optsbasename)
- [`opts.future`](https://reactrouter.com/6.30.0/routers/create-browser-router#optsfuture)
- [`opts.hydrationData`](https://reactrouter.com/6.30.0/routers/create-browser-router#optshydrationdata)
- [Partial Hydration Data](https://reactrouter.com/6.30.0/routers/create-browser-router#partial-hydration-data)
- [`opts.dataStrategy`](https://reactrouter.com/6.30.0/routers/create-browser-router#optsdatastrategy)
- [Type Declaration](https://reactrouter.com/6.30.0/routers/create-browser-router#type-declaration-1)
- [Overview](https://reactrouter.com/6.30.0/routers/create-browser-router#overview)
- [Example Use Cases](https://reactrouter.com/6.30.0/routers/create-browser-router#example-use-cases)
- [`opts.patchRoutesOnNavigation`](https://reactrouter.com/6.30.0/routers/create-browser-router#optspatchroutesonnavigation)
- [Type Declaration](https://reactrouter.com/6.30.0/routers/create-browser-router#type-declaration-2)
- [Overview](https://reactrouter.com/6.30.0/routers/create-browser-router#overview-1)
- [A note on routes with parameters](https://reactrouter.com/6.30.0/routers/create-browser-router#a-note-on-routes-with-parameters)
- [`opts.window`](https://reactrouter.com/6.30.0/routers/create-browser-router#optswindow)

# `createBrowserRouter`

This is the recommended router for all React Router web projects. It uses the [DOM History API](https://developer.mozilla.org/en-US/docs/Web/API/History) to update the URL and manage the history stack.

It also enables the v6.4 data APIs like [loaders](https://reactrouter.com/6.30.0/route/loader), [actions](https://reactrouter.com/6.30.0/route/action), [fetchers](https://reactrouter.com/6.30.0/hooks/use-fetcher) and more.

Due to the decoupling of fetching and rendering in the design of the data APIs, you should create your router outside of the React tree with a statically defined set of routes. For more information on this design, please see the [Remixing React Router](https://remix.run/blog/remixing-react-router) blog post and the [When to Fetch](https://www.youtube.com/watch?v=95B8mnhzoCM) conference talk.

```
import * as React from "react";
import * as ReactDOM from "react-dom";
import {
  createBrowserRouter,
  RouterProvider,
} from "react-router-dom";

import Root, { rootLoader } from "./routes/root";
import Team, { teamLoader } from "./routes/team";

const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    loader: rootLoader,\
    children: [\
      {\
        path: "team",\
        element: <Team />,\
        loader: teamLoader,\
      },\
    ],\
  },\
]);

ReactDOM.createRoot(document.getElementById("root")).render(
  <RouterProvider router={router} />
);

```

Copy code to clipboard

## Type Declaration

```
function createBrowserRouter(
  routes: RouteObject[],
  opts?: {
    basename?: string;
    future?: FutureConfig;
    hydrationData?: HydrationState;
    dataStrategy?: DataStrategyFunction;
    patchRoutesOnNavigation?: PatchRoutesOnNavigationFunction;
    window?: Window;
  }
): RemixRouter;

```

Copy code to clipboard

## `routes`

An array of [`Route`](https://reactrouter.com/6.30.0/route/route) objects with nested routes on the `children` property.

```
createBrowserRouter([\
  {\
    path: "/",\
    element: <Root />,\
    loader: rootLoader,\
    children: [\
      {\
        path: "events/:id",\
        element: <Event />,\
        loader: eventLoader,\
      },\
    ],\
  },\
]);

```

Copy code to clipboard

## `opts.basename`

The basename of the app for situations where you can't deploy to the root of the domain, but a sub directory.

```
createBrowserRouter(routes, {
  basename: "/app",
});

```

Copy code to clipboard

The trailing slash will be respected when linking to the root:

```
createBrowserRouter(routes, {
  basename: "/app",
});
<Link to="/" />; // results in <a href="/app" />

createBrowserRouter(routes, {
  basename: "/app/",
});
<Link to="/" />; // results in <a href="/app/" />

```

Copy code to clipboard

## `opts.future`

An optional set of [Future Flags](https://reactrouter.com/6.30.0/guides/api-development-strategy) to enable for this Router. We recommend opting into newly released future flags sooner rather than later to ease your eventual migration to v7.

```
const router = createBrowserRouter(routes, {
  future: {
    // Normalize `useNavigation()`/`useFetcher()` `formMethod` to uppercase
    v7_normalizeFormMethod: true,
  },
});

```

Copy code to clipboard

The following future flags are currently available:

| Flag | Description |
| --- | --- |
| `v7_fetcherPersist` | Delay active fetcher cleanup until they return to an `idle` state |
| `v7_normalizeFormMethod` | Normalize `useNavigation().formMethod` to be an uppercase HTTP Method |
| `v7_partialHydration` | Support partial hydration for Server-rendered apps |
| `v7_prependBasename` | Prepend the router basename to navigate/fetch paths |
| [`v7_relativeSplatPath`](https://reactrouter.com/6.30.0/hooks/use-resolved-path#splat-paths) | Fix buggy relative path resolution in splat routes |
| `v7_skipActionErrorRevalidation` | Do not revalidate by default if the action returns a 4xx/5xx `Response` |

## `opts.hydrationData`

When [Server-Rendering](https://reactrouter.com/6.30.0/guides/ssr) and [opting-out of automatic hydration](https://reactrouter.com/6.30.0/routers/static-router-provider#hydrate), the `hydrationData` option allows you to pass in hydration data from your server-render. This will almost always be a subset of data from the `StaticHandlerContext` value you get back from [handler.query](https://reactrouter.com/6.30.0/routers/create-static-handler#handlerqueryrequest-opts):

```
const router = createBrowserRouter(routes, {
  hydrationData: {
    loaderData: {
      // [routeId]: serverLoaderData
    },
    // may also include `errors` and/or `actionData`
  },
});

```

Copy code to clipboard

### Partial Hydration Data

You will almost always include a complete set of `loaderData` to hydrate a server-rendered app. But in advanced use-cases (such as Remix's [`clientLoader`](https://remix.run/route/client-loader)), you may want to include `loaderData` for only _some_ routes that were rendered on the server. If you want to enable partial `loaderData` and opt-into granular [`route.HydrateFallback`](https://reactrouter.com/6.30.0/route/hydrate-fallback-element) usage, you will need to enable the `future.v7_partialHydration` flag. Prior to this flag, any provided `loaderData` was assumed to be complete and would not result in the execution of route loaders on initial hydration.

When this flag is specified, loaders will run on initial hydration in 2 scenarios:

- No hydration data is provided
  - In these cases the `HydrateFallback` component will render on initial hydration
- The `loader.hydrate` property is set to `true`
  - This allows you to run the `loader` even if you did not render a fallback on initial hydration (i.e., to prime a cache with hydration data)

```
const router = createBrowserRouter(
  [\
    {\
      id: "root",\
      loader: rootLoader,\
      Component: Root,\
      children: [\
        {\
          id: "index",\
          loader: indexLoader,\
          HydrateFallback: IndexSkeleton,\
          Component: Index,\
        },\
      ],\
    },\
  ],
  {
    future: {
      v7_partialHydration: true,
    },
    hydrationData: {
      loaderData: {
        root: "ROOT DATA",
        // No index data provided
      },
    },
  }
);

```

Copy code to clipboard

## `opts.dataStrategy`

This is a low-level API intended for advanced use-cases. This overrides React Router's internal handling of `loader`/ `action` execution, and if done incorrectly will break your app code. Please use with caution and perform the appropriate testing.

By default, React Router is opinionated about how your data is loaded/submitted - and most notably, executes all of your loaders in parallel for optimal data fetching. While we think this is the right behavior for most use-cases, we realize that there is no "one size fits all" solution when it comes to data fetching for the wide landscape of application requirements.

The `dataStrategy` option gives you full control over how your loaders and actions are executed and lays the foundation to build in more advanced APIs such as middleware, context, and caching layers. Over time, we expect that we'll leverage this API internally to bring more first class APIs to React Router, but until then (and beyond), this is your way to add more advanced functionality for your applications data needs.

### Type Declaration

```
interface DataStrategyFunction {
  (args: DataStrategyFunctionArgs): Promise<
    Record<string, DataStrategyResult>
  >;
}

interface DataStrategyFunctionArgs<Context = any> {
  request: Request;
  params: Params;
  context?: Context;
  matches: DataStrategyMatch[];
  fetcherKey: string | null;
}

interface DataStrategyMatch
  extends AgnosticRouteMatch<
    string,
    AgnosticDataRouteObject
  > {
  shouldLoad: boolean;
  resolve: (
    handlerOverride?: (
      handler: (ctx?: unknown) => DataFunctionReturnValue
    ) => Promise<DataStrategyResult>
  ) => Promise<DataStrategyResult>;
}

interface DataStrategyResult {
  type: "data" | "error";
  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit
}

```

Copy code to clipboard

### Overview

`dataStrategy` receives the same arguments as a `loader`/ `action` ( `request`, `params`) but it also receives 2 new parameters: `matches` and `fetcherKey`:

- **`matches`** \- An array of the matched routes where each match is extended with 2 new fields for use in the data strategy function:

  - **`match.shouldLoad`** \- A boolean value indicating whether this route handler should be called in this pass

    - The `matches` array always includes _all_ matched routes even when only _some_ route handlers need to be called so that things like middleware can be implemented
    - `shouldLoad` is usually only interesting if you are skipping the route handler entirely and implementing custom handler logic - since it lets you determine if that custom logic should run for this route or not
    - For example:
      - If you are on `/parent/child/a` and you navigate to `/parent/child/b` \- you'll get an array of three matches ( `[parent, child, b]`), but only `b` will have `shouldLoad=true` because the data for `parent` and `child` is already loaded
      - If you are on `/parent/child/a` and you submit to `a`'s `action`, then only `a` will have `shouldLoad=true` for the action execution of `dataStrategy`
        - After the `action`, `dataStrategy` will be called again for the `loader` revalidation, and all matches will have `shouldLoad=true` (assuming no custom `shouldRevalidate` implementations)
  - **`match.resolve`** \- An async function that will resolve any `route.lazy` implementations and execute the route's handler (if necessary), returning a `DataStrategyResult`
    - Calling `match.resolve` does not mean you're calling the `loader`/ `action` (the "handler") - `resolve` will only call the `handler` internally if needed _and_ if you don't pass your own `handlerOverride` function parameter
    - It is safe to call `match.resolve` for all matches, even if they have `shouldLoad=false`, and it will no-op if no loading is required
    - You should generally always call `match.resolve()` for `shouldLoad:true` routes to ensure that any `route.lazy` implementations are processed
    - See the examples below for how to implement custom handler execution via `match.resolve`
- **`fetcherKey`** \- The key of the fetcher we are calling `dataStrategy` for, otherwise `null` for navigational executions

The `dataStrategy` function should return a key/value object of `routeId -> DataStrategyResult` and should include entries for any routes where a handler was executed. A `DataStrategyResult` indicates if the handler was successful or not based on the `DataStrategyResult["type"]` field. If the returned `DataStrategyResult["result"]` is a `Response`, React Router will unwrap it for you (via `res.json` or `res.text`). If you need to do custom decoding of a `Response` but want to preserve the status code, you can use the `data` utility to return your decoded data along with a `ResponseInit`.

### Example Use Cases

#### Adding logging

In the simplest case, let's look at hooking into this API to add some logging for when our route loaders/actions execute:

```
let router = createBrowserRouter(routes, {
  async dataStrategy({ request, matches }) {
    // Grab only the matches we need to run handlers for
    const matchesToLoad = matches.filter(
      (m) => m.shouldLoad
    );
    // Run the handlers in parallel, logging before and after
    const results = await Promise.all(
      matchesToLoad.map(async (match) => {
        console.log(`Processing ${match.route.id}`);
        // Don't override anything - just resolve route.lazy + call loader
        const result = await match.resolve();
        return result;
      })
    );

    // Aggregate the results into a bn object of `routeId -> DataStrategyResult`
    return results.reduce(
      (acc, result, i) =>
        Object.assign(acc, {
          [matchesToLoad[i].route.id]: result,
        }),
      {}
    );
  },
});

```

Copy code to clipboard

If you want to avoid the `reduce`, you can manually build up the `results` object, but you'll need to construct the `DataStrategyResult` manually - indicating if the handler was successful or not:

```
let router = createBrowserRouter(routes, {
  async dataStrategy({ request, matches }) {
    const matchesToLoad = matches.filter(
      (m) => m.shouldLoad
    );
    const results = {};
    await Promise.all(
      matchesToLoad.map(async (match) => {
        console.log(`Processing ${match.route.id}`);
        try {
          const result = await match.resolve();
          results[match.route.id] = {
            type: "data",
            result,
          };
        } catch (e) {
          results[match.route.id] = {
            type: "error",
            result: e,
          };
        }
      })
    );

    return results;
  },
});

```

Copy code to clipboard

#### Middleware

Let's define a middleware on each route via `handle` and call middleware sequentially first, then call all loaders in parallel - providing any data made available via the middleware:

```
const routes = [\
  {\
    id: "parent",\
    path: "/parent",\
    loader({ request }, context) {\
      /*...*/\
    },\
    handle: {\
      async middleware({ request }, context) {\
        context.parent = "PARENT MIDDLEWARE";\
      },\
    },\
    children: [\
      {\
        id: "child",\
        path: "child",\
        loader({ request }, context) {\
          /*...*/\
        },\
        handle: {\
          async middleware({ request }, context) {\
            context.child = "CHILD MIDDLEWARE";\
          },\
        },\
      },\
    ],\
  },\
];

let router = createBrowserRouter(routes, {
  async dataStrategy({ request, params, matches }) {
    // Run middleware sequentially and let them add data to `context`
    let context = {};
    for (const match of matches) {
      if (match.route.handle?.middleware) {
        await match.route.handle.middleware(
          { request, params },
          context
        );
      }
    }

    // Run loaders in parallel with the `context` value
    let matchesToLoad = matches.filter((m) => m.shouldLoad);
    let results = await Promise.all(
      matchesToLoad.map((match, i) =>
        match.resolve((handler) => {
          // Whatever you pass to `handler` will be passed as the 2nd parameter
          // to your loader/action
          return handler(context);
        })
      )
    );
    return results.reduce(
      (acc, result, i) =>
        Object.assign(acc, {
          [matchesToLoad[i].route.id]: result,
        }),
      {}
    );
  },
});

```

Copy code to clipboard

#### Custom Handler

It's also possible you don't even want to define a loader implementation at the route level. Maybe you want to just determine the routes and issue a single GraphQL request for all of your data? You can do that by setting your `route.loader=true` so it qualifies as "having a loader", and then store GQL fragments on `route.handle`:

```
const routes = [\
  {\
    id: "parent",\
    path: "/parent",\
    loader: true,\
    handle: {\
      gql: gql`\
        fragment Parent on Whatever {\
          parentField\
        }\
      `,\
    },\
    children: [\
      {\
        id: "child",\
        path: "child",\
        loader: true,\
        handle: {\
          gql: gql`\
            fragment Child on Whatever {\
              childField\
            }\
          `,\
        },\
      },\
    ],\
  },\
];

let router = createBrowserRouter(routes, {
  dataStrategy({ request, params, matches }) {
    // Compose route fragments into a single GQL payload
    let gql = getFragmentsFromRouteHandles(matches);
    let data = await fetchGql(gql);
    // Parse results back out into individual route level `DataStrategyResult`'s
    // keyed by `routeId`
    let results = parseResultsFromGql(data);
    return results;
  },
});

```

Copy code to clipboard

## `opts.patchRoutesOnNavigation`

By default, React Router wants you to provide a full route tree up front via `createBrowserRouter(routes)`. This allows React Router to perform synchronous route matching, execute loaders, and then render route components in the most optimistic manner without introducing waterfalls. The tradeoff is that your initial JS bundle is larger by definition - which may slow down application start-up times as your application grows.

To combat this, we introduced [`route.lazy`](https://reactrouter.com/6.30.0/route/lazy) in [v6.9.0](https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#v690) which let's you lazily load the route _implementation_ ( `loader`, `Component`, etc.) while still providing the route _definition_ aspects up front ( `path`, `index`, etc.). This is a good middle ground because React Router still knows about your route definitions (the lightweight part) up front and can perform synchronous route matching, but then delay loading any of the route implementation aspects (the heavier part) until the route is actually navigated to.

In some cases, even this doesn't go far enough. For very large applications, providing all route definitions up front can be prohibitively expensive. Additionally, it might not even be possible to provide all route definitions up front in certain Micro-Frontend or Module-Federation architectures.

This is where `patchRoutesOnNavigation` comes in ( [RFC](https://github.com/remix-run/react-router/discussions/11113)). This API is for advanced use-cases where you are unable to provide the full route tree up-front and need a way to lazily "discover" portions of the route tree at runtime. This feature is often referred to as ["Fog of War"](https://en.wikipedia.org/wiki/Fog_of_war) because similar to how video games expand the "world" as you move around - the router would be expanding its routing tree as the user navigated around the app - but would only ever end up loading portions of the tree that the user visited.

### Type Declaration

```
export interface PatchRoutesOnNavigationFunction {
  (opts: {
    path: string;
    matches: RouteMatch[];
    patch: (
      routeId: string | null,
      children: RouteObject[]
    ) => void;
  }): void | Promise<void>;
}

```

Copy code to clipboard

### Overview

`patchRoutesOnNavigation` will be called anytime React Router is unable to match a `path`. The arguments include the `path`, any partial `matches`, and a `patch` function you can call to patch new routes into the tree at a specific location. This method is executed during the `loading` portion of the navigation for `GET` requests and during the `submitting` portion of the navigation for non- `GET` requests.

**Patching children into an existing route**

```
const router = createBrowserRouter(
  [\
    {\
      id: "root",\
      path: "/",\
      Component: RootComponent,\
    },\
  ],
  {
    async patchRoutesOnNavigation({ path, patch }) {
      if (path === "/a") {
        // Load/patch the `a` route as a child of the route with id `root`
        let route = await getARoute();
        //  ^ { path: 'a', Component: A }
        patch("root", [route]);
      }
    },
  }
);

```

Copy code to clipboard

In the above example, if the user clicks a link to `/a`, React Router won't match any routes initially and will call `patchRoutesOnNavigation` with a `path = "/a"` and a `matches` array containing the root route match. By calling `patch('root', [route])`, the new route will be added to the route tree as a child of the `root` route and React Router will perform matching on the updated routes. This time it will successfully match the `/a` path and the navigation will complete successfully.

**Patching new root-level routes**

If you need to patch a new route to the top of the tree (i.e., it doesn't have a parent), you can pass `null` as the `routeId`:

```
const router = createBrowserRouter(
  [\
    {\
      id: "root",\
      path: "/",\
      Component: RootComponent,\
    },\
  ],
  {
    async patchRoutesOnNavigation({ path, patch }) {
      if (path === "/root-sibling") {
        // Load/patch the `/root-sibling` route as a sibling of the root route
        let route = await getRootSiblingRoute();
        //  ^ { path: '/root-sibling', Component: RootSibling }
        patch(null, [route]);
      }
    },
  }
);

```

Copy code to clipboard

**Patching sub-trees asyncronously**

You can also perform asynchronous matching to lazily fetch entire sections of your application:

```
let router = createBrowserRouter(
  [\
    {\
      path: "/",\
      Component: Home,\
    },\
  ],
  {
    async patchRoutesOnNavigation({ path, patch }) {
      if (path.startsWith("/dashboard")) {
        let children = await import("./dashboard");
        patch(null, children);
      }
      if (path.startsWith("/account")) {
        let children = await import("./account");
        patch(null, children);
      }
    },
  }
);

```

Copy code to clipboard

If in-progress execution of `patchRoutesOnNavigation` is interrupted by a subsequent navigation, then any remaining `patch` calls in the interrupted execution will not update the route tree because the operation was cancelled.

**Co-locating route discovery with route definition**

If you don't wish to perform your own pseudo-matching, you can leverage the partial `matches` array and the `handle` field on a route to keep the children definitions co-located:

```
let router = createBrowserRouter(
  [\
    {\
      path: "/",\
      Component: Home,\
    },\
    {\
      path: "/dashboard",\
      children: [\
        {\
          // If we want to include /dashboard in the critical routes, we need to\
          // also include it's index route since patchRoutesOnNavigation will not be\
          // called on a navigation to `/dashboard` because it will have successfully\
          // matched the `/dashboard` parent route\
          index: true,\
          // ...\
        },\
      ],\
      handle: {\
        lazyChildren: () => import("./dashboard"),\
      },\
    },\
    {\
      path: "/account",\
      children: [\
        {\
          index: true,\
          // ...\
        },\
      ],\
      handle: {\
        lazyChildren: () => import("./account"),\
      },\
    },\
  ],
  {
    async patchRoutesOnNavigation({ matches, patch }) {
      let leafRoute = matches[matches.length - 1]?.route;
      if (leafRoute?.handle?.lazyChildren) {
        let children =
          await leafRoute.handle.lazyChildren();
        patch(leafRoute.id, children);
      }
    },
  }
);

```

Copy code to clipboard

### A note on routes with parameters

Because React Router uses ranked routes to find the best match for a given path, there is an interesting ambiguity introduced when only a partial route tree is known at any given point in time. If we match a fully static route such as `path: "/about/contact-us"` then we know we've found the right match since it's composed entirely of static URL segments, and thus we do not need to bother asking for any other potentially higher-scoring routes.

However, routes with parameters (dynamic or splat) can't make this assumption because there might be a not-yet-discovered route tht scores higher. Consider a full route tree such as:

```
// Assume this is the full route tree for your app
const routes = [\
  {\
    path: "/",\
    Component: Home,\
  },\
  {\
    id: "blog",\
    path: "/blog",\
    Component: BlogLayout,\
    children: [\
      { path: "new", Component: NewPost },\
      { path: ":slug", Component: BlogPost },\
    ],\
  },\
];

```

Copy code to clipboard

And then assume we want to use `patchRoutesOnNavigation` to fill this in as the user navigates around:

```
// Start with only the index route
const router = createBrowserRouter(
  [\
    {\
      path: "/",\
      Component: Home,\
    },\
  ],
  {
    patchRoutesOnNavigation({ path, patch }) {
      if (path === "/blog/new") {
        patch("blog", [\
          {\
            path: "new",\
            Component: NewPost,\
          },\
        ]);
      } else if (path.startsWith("/blog")) {
        patch("blog", [\
          {\
            path: ":slug",\
            Component: BlogPost,\
          },\
        ]);
      }
    },
  }
);

```

Copy code to clipboard

If the user were to a blog post first (i.e., `/blog/my-post`) we would patch in the `:slug` route. Then if the user navigated to `/blog/new` to write a new post, we'd match `/blog/:slug` but it wouldn't be the _right_ match! We need to call `patchRoutesOnNavigation` just in case there exists a higher-scoring route we've not yet discovered, which in this case there is.

So, anytime React Router matches a path that contains at least one param, it will call `patchRoutesOnNavigation` and match routes again just to confirm it has found the best match.

If your `patchRoutesOnNavigation` implementation is expensive or making side-effect `fetch` calls to a backend server, you may want to consider tracking previously seen routes to avoid over-fetching in cases where you know the proper route has already been found. This can usually be as simple as maintaining a small cache of prior `path` values for which you've already patched in the right routes:

```
let discoveredRoutes = new Set();

const router = createBrowserRouter(routes, {
  patchRoutesOnNavigation({ path, patch }) {
    if (discoveredRoutes.has(path)) {
      // We've seen this before so nothing to patch in and we can let the router
      // use the routes it already knows about
      return;
    }

    discoveredRoutes.add(path);

    // ... patch routes in accordingly
  },
});

```

Copy code to clipboard

## `opts.window`

Useful for environments like browser devtool plugins or testing to use a different window than the global `window`.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/how-to/suspense) [dev](https://reactrouter.com/dev/how-to/suspense)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Streaming with Suspense

# Streaming with Suspense

Streaming with React Suspense allows apps to speed up initial renders by deferring non-critical data and unblocking UI rendering.

React Router supports React Suspense by returning promises from loaders and actions.

## 1\. Return a promise from loader

React Router awaits route loaders before rendering route components. To unblock the loader for non-critical data, return the promise instead of awaiting it in the loader.

```
import type { Route } from "./+types/my-route";

export async function loader({}: Route.LoaderArgs) {
  // note this is NOT awaited
  let nonCriticalData = new Promise((res) =>
    setTimeout(() => res("non-critical"), 5000)
  );

  let criticalData = await new Promise((res) =>
    setTimeout(() => res("critical"), 300)
  );

  return { nonCriticalData, criticalData };
}

```

Copy code to clipboard

## 2\. Render the fallback and resolved UI

The promise will be available on `loaderData`, `<Await>` will await the promise and trigger `<Suspense>` to render the fallback UI.

```
import * as React from "react";
import { Await } from "react-router";

// [previous code]

export default function MyComponent({
  loaderData,
}: Route.ComponentProps) {
  let { criticalData, nonCriticalData } = loaderData;

  return (
    <div>
      <h1>Streaming example</h1>
      <h2>Critical data value: {criticalData}</h2>

      <React.Suspense fallback={<div>Loading...</div>}>
        <Await resolve={nonCriticalData}>
          {(value) => <h3>Non critical value: {value}</h3>}
        </Await>
      </React.Suspense>
    </div>
  );
}

```

Copy code to clipboard

## With React 19

If you're experimenting with React 19, you can use `React.use` instead of `Await`, but you'll need to create a new component and pass the promise down to trigger the suspense fallback.

```
<React.Suspense fallback={<div>Loading...</div>}>
  <NonCriticalUI p={nonCriticalData} />
</React.Suspense>

```

Copy code to clipboard

```
function NonCriticalUI({ p }: { p: Promise<string> }) {
  let value = React.use(p);
  return <h3>Non critical value {value}</h3>;
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/how-to/suspense.md)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [@react-router/cloudflare](https://api.reactrouter.com/v7/modules/_react_router_cloudflare.html)
- [createWorkersKVSessionStorage](https://api.reactrouter.com/v7/functions/_react_router_cloudflare.createWorkersKVSessionStorage.html)

# Function createWorkersKVSessionStorage

- createWorkersKVSessionStorage< [Data](https://api.reactrouter.com/v7/functions/_react_router_cloudflare.createWorkersKVSessionStorage.html#createWorkersKVSessionStorage.Data), [FlashData](https://api.reactrouter.com/v7/functions/_react_router_cloudflare.createWorkersKVSessionStorage.html#createWorkersKVSessionStorage.FlashData) >(\_\_namedParameters): SessionStorage< [Data](https://api.reactrouter.com/v7/functions/_react_router_cloudflare.createWorkersKVSessionStorage.html#createWorkersKVSessionStorage.Data), [FlashData](https://api.reactrouter.com/v7/functions/_react_router_cloudflare.createWorkersKVSessionStorage.html#createWorkersKVSessionStorage.FlashData) > [Permalink](https://api.reactrouter.com/v7/functions/_react_router_cloudflare.createWorkersKVSessionStorage#createWorkersKVSessionStorage)
- Creates a SessionStorage that stores session data in the Clouldflare KV Store.



The advantage of using this instead of cookie session storage is that
KV Store may contain much more data than cookies.




#### Type Parameters



- Data = SessionData
- FlashData = [Data](https://api.reactrouter.com/v7/functions/_react_router_cloudflare.createWorkersKVSessionStorage.html#createWorkersKVSessionStorage.Data)

#### Parameters

- \_\_namedParameters: WorkersKVSessionStorageOptions

#### Returns SessionStorage< [Data](https://api.reactrouter.com/v7/functions/_react_router_cloudflare.createWorkersKVSessionStorage.html\#createWorkersKVSessionStorage.Data), [FlashData](https://api.reactrouter.com/v7/functions/_react_router_cloudflare.createWorkersKVSessionStorage.html\#createWorkersKVSessionStorage.FlashData) >

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/explanation/progressive-enhancement) [dev](https://reactrouter.com/dev/explanation/progressive-enhancement)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Progressive Enhancement

On this page

- [Why Progressive Enhancement Matters](https://reactrouter.com/explanation/progressive-enhancement#why-progressive-enhancement-matters)
- [Performance](https://reactrouter.com/explanation/progressive-enhancement#performance)
- [Resilience and Accessibility](https://reactrouter.com/explanation/progressive-enhancement#resilience-and-accessibility)
- [Simplicity](https://reactrouter.com/explanation/progressive-enhancement#simplicity)

- [Why Progressive Enhancement Matters](https://reactrouter.com/explanation/progressive-enhancement#why-progressive-enhancement-matters)
- [Performance](https://reactrouter.com/explanation/progressive-enhancement#performance)
- [Resilience and Accessibility](https://reactrouter.com/explanation/progressive-enhancement#resilience-and-accessibility)
- [Simplicity](https://reactrouter.com/explanation/progressive-enhancement#simplicity)

# Progressive Enhancement

> Progressive enhancement is a strategy in web design that puts emphasis on web content first, allowing everyone to access the basic content and functionality of a web page, whilst users with additional browser features or faster Internet access receive the enhanced version instead.

\- [Wikipedia](https://en.wikipedia.org/wiki/Progressive_enhancement)

When using React Router with Server-Side Rendering (the default in framework mode), you can automatically leverage the benefits of progressive enhancement.

## Why Progressive Enhancement Matters

Coined in 2003 by Steven Champeon & Nick Finck, the phrase emerged during a time of varied CSS and JavaScript support across different browsers, with many users actually browsing the web with JavaScript disabled.

Today, we are fortunate to develop for a much more consistent web and where the majority of users have JavaScript enabled.

However, we still believe in the core principles of progressive enhancement in React Router. It leads to fast and resilient apps with simple development workflows.

**Performance**: While it's easy to think that only 5% of your users have slow connections, the reality is that 100% of your users have slow connections 5% of the time.

**Resilience**: Everybody has JavaScript disabled until it's loaded.

**Simplicity**: Building your apps in a progressively enhanced way with React Router is actually simpler than building a traditional SPA.

## Performance

Server rendering allows your app to do more things in parallel than a typical [Single Page App (SPA)](https://reactrouter.com/how-to/spa), making the initial loading experience and subsequent navigations faster.

Typical SPAs send a blank document and only start doing work when JavaScript has loaded:

```
HTML        |---|
JavaScript      |---------|
Data                      |---------------|
                            page rendered 👆

```

A React Router app can start doing work the moment the request hits the server and stream the response so that the browser can start downloading JavaScript, other assets, and data in parallel:

```
               👇 first byte
HTML        |---|-----------|
JavaScript      |---------|
Data        |---------------|
              page rendered 👆

```

## Resilience and Accessibility

While your users probably don't browse the web with JavaScript disabled, everybody uses the websites without JavaScript before it finishes loading. React Router embraces progressive enhancement by building on top of HTML, allowing you to build your app in a way that works without JavaScript, and then layer on JavaScript to enhance the experience.

The simplest case is a `<Link to="/account">`. These render an `<a href="/account">` tag that works without JavaScript. When JavaScript loads, React Router will intercept clicks and handle the navigation with client side routing. This gives you more control over the UX instead of just spinning favicons in the browser tab--but it works either way.

Now consider a simple add to cart button:

```
export function AddToCart({ id }) {
  return (
    <Form method="post" action="/add-to-cart">
      <input type="hidden" name="id" value={id} />
      <button type="submit">Add To Cart</button>
    </Form>
  );
}

```

Copy code to clipboard

Whether JavaScript has loaded or not doesn't matter, this button will add the product to the cart.

When JavaScript loads, React Router will intercept the form submission and handle it client side. This allows you to add your own pending UI, or other client side behavior.

## Simplicity

When you start to rely on basic features of the web like HTML and URLs, you will find that you reach for client side state and state management much less.

Consider the button from before, with no fundamental change to the code, we can pepper in some client side behavior:

```
import { useFetcher } from "react-router";

export function AddToCart({ id }) {
  const fetcher = useFetcher();

  return (
    <fetcher.Form method="post" action="/add-to-cart">
      <input name="id" value={id} />
      <button type="submit">
        {fetcher.state === "submitting"
          ? "Adding..."
          : "Add To Cart"}
      </button>
    </fetcher.Form>
  );
}

```

Copy code to clipboard

This feature continues to work the very same as it did before when JavaScript is loading, but once JavaScript loads:

- `useFetcher` no longer causes a navigation like `<Form>` does, so the user can stay on the same page and keep shopping
- The app code determines the pending UI instead of spinning favicons in the browser

It's not about building it two different ways–once for JavaScript and once without–it's about building it in iterations. Start with the simplest version of the feature and ship it; then iterate to an enhanced user experience.

Not only will the user get a progressively enhanced experience, but the app developer gets to "progressively enhance" the UI without changing the fundamental design of the feature.

Another example where progressive enhancement leads to simplicity is with the URL. When you start with a URL, you don't need to worry about client side state management. You can just use the URL as the source of truth for the UI.

```
export function SearchBox() {
  return (
    <Form method="get" action="/search">
      <input type="search" name="query" />
      <SearchIcon />
    </Form>
  );
}

```

Copy code to clipboard

This component doesn't need any state management. It just renders a form that submits to `/search`. When JavaScript loads, React Router will intercept the form submission and handle it client side. Here's the next iteration:

```
import { useNavigation } from "react-router";

export function SearchBox() {
  const navigation = useNavigation();
  const isSearching =
    navigation.location.pathname === "/search";

  return (
    <Form method="get" action="/search">
      <input type="search" name="query" />
      {isSearching ? <Spinner /> : <SearchIcon />}
    </Form>
  );
}

```

Copy code to clipboard

No fundamental change in architecture, simply a progressive enhancement for both the user and the code.

See also: [State Management](https://reactrouter.com/explanation/state-management)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/explanation/progressive-enhancement.md)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [react-router](https://api.reactrouter.com/v7/modules/react_router.html)
- [Routes](https://api.reactrouter.com/v7/functions/react_router.Routes.html)

# Function Routes

- Routes(\_\_namedParameters): React.ReactElement \| null [Permalink](https://api.reactrouter.com/v7/functions/react_router.Routes.html#Routes)
- Renders a branch of [`<Routes>`](https://api.reactrouter.com/v7/functions/react_router.Route.html) that best matches the current
location. Note that these routes do not participate in data loading, actions,
code splitting, or any other route module features.



```tsx
import { Routes, Route } from "react-router"

<Routes>
<Route index element={<StepOne />} />
<Route path="step-2" element={<StepTwo />} />
<Route path="step-3" element={<StepThree />}>
</Routes>
Copy
```





#### Parameters



- \_\_namedParameters: [RoutesProps](https://api.reactrouter.com/v7/interfaces/react_router.RoutesProps.html)

#### Returns React.ReactElement \| null

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [react-router](https://api.reactrouter.com/v7/modules/react_router.html)
- [Navigate](https://api.reactrouter.com/v7/functions/react_router.Navigate.html)

# Function Navigate

- Navigate(\_\_namedParameters): null [Permalink](https://api.reactrouter.com/v7/functions/react_router.Navigate.html#Navigate)
- A component-based version of [useNavigate](https://api.reactrouter.com/v7/functions/react_router.useNavigate.html) to use in a [`React.Component Class`](https://reactjs.org/docs/react-component.html) where hooks are not
able to be used.



It's recommended to avoid using this component in favor of [useNavigate](https://api.reactrouter.com/v7/functions/react_router.useNavigate.html)





#### Parameters



- \_\_namedParameters: [NavigateProps](https://api.reactrouter.com/v7/interfaces/react_router.NavigateProps.html)

#### Returns null

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/upgrading/component-routes) [dev](https://reactrouter.com/dev/upgrading/component-routes)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Framework Adoption from Component Routes

On this page

- [Features](https://reactrouter.com/upgrading/component-routes#features)
- [Prerequisites](https://reactrouter.com/upgrading/component-routes#prerequisites)
- [1\. Install the Vite plugin](https://reactrouter.com/upgrading/component-routes#1-install-the-vite-plugin)
- [2\. Add the React Router config](https://reactrouter.com/upgrading/component-routes#2-add-the-react-router-config)
- [3\. Add the Root entry point](https://reactrouter.com/upgrading/component-routes#3-add-the-root-entry-point)
- [4\. Add client entry module](https://reactrouter.com/upgrading/component-routes#4-add-client-entry-module)
- [5\. Shuffle stuff around](https://reactrouter.com/upgrading/component-routes#5-shuffle-stuff-around)
- [6\. Set up your routes](https://reactrouter.com/upgrading/component-routes#6-set-up-your-routes)
- [7\. Boot the app](https://reactrouter.com/upgrading/component-routes#7-boot-the-app)
- [8\. Render your app](https://reactrouter.com/upgrading/component-routes#8-render-your-app)
- [9\. Migrate a route to a Route Module](https://reactrouter.com/upgrading/component-routes#9-migrate-a-route-to-a-route-module)
- [Enable SSR and/or Pre-rendering](https://reactrouter.com/upgrading/component-routes#enable-ssr-andor-pre-rendering)

- [Features](https://reactrouter.com/upgrading/component-routes#features)
- [Prerequisites](https://reactrouter.com/upgrading/component-routes#prerequisites)
- [1\. Install the Vite plugin](https://reactrouter.com/upgrading/component-routes#1-install-the-vite-plugin)
- [2\. Add the React Router config](https://reactrouter.com/upgrading/component-routes#2-add-the-react-router-config)
- [3\. Add the Root entry point](https://reactrouter.com/upgrading/component-routes#3-add-the-root-entry-point)
- [4\. Add client entry module](https://reactrouter.com/upgrading/component-routes#4-add-client-entry-module)
- [5\. Shuffle stuff around](https://reactrouter.com/upgrading/component-routes#5-shuffle-stuff-around)
- [6\. Set up your routes](https://reactrouter.com/upgrading/component-routes#6-set-up-your-routes)
- [7\. Boot the app](https://reactrouter.com/upgrading/component-routes#7-boot-the-app)
- [8\. Render your app](https://reactrouter.com/upgrading/component-routes#8-render-your-app)
- [9\. Migrate a route to a Route Module](https://reactrouter.com/upgrading/component-routes#9-migrate-a-route-to-a-route-module)
- [Enable SSR and/or Pre-rendering](https://reactrouter.com/upgrading/component-routes#enable-ssr-andor-pre-rendering)

# Framework Adoption from Component Routes

If you are using `<RouterProvider>` please see [Framework Adoption from RouterProvider](https://reactrouter.com/upgrading/router-provider) instead.

If you are using `<Routes>` this is the right place.

The React Router Vite plugin adds framework features to React Router. This guide will help you adopt the plugin in your app. If you run into any issues, please reach out for help on [Twitter](https://x.com/remix_run) or [Discord](https://rmx.as/discord).

## Features

The Vite plugin adds:

- Route loaders, actions, and automatic data revalidation
- Typesafe Routes Modules
- Automatic route code-splitting
- Automatic scroll restoration across navigations
- Optional Static pre-rendering
- Optional Server rendering

The initial setup requires the most work. However, once complete, you can adopt new features incrementally, one route at a time.

## Prerequisites

To use the Vite plugin, your project requires:

- Node.js 20+ (if using Node as your runtime)
- Vite 5+

## 1\. Install the Vite plugin

**👉 Install the React Router Vite plugin**

```
npm install -D @react-router/dev

```

Copy code to clipboard

**👉 Install a runtime adapter**

We will assume you are using Node as your runtime.

```
npm install @react-router/node

```

Copy code to clipboard

**👉 Swap out the React plugin for React Router.**

```
-import react from '@vitejs/plugin-react'
+import { reactRouter } from "@react-router/dev/vite";
import { defineConfig } from "vite";

export default defineConfig({
  plugins: [\
-    react()\
+    reactRouter()\
  ],
});

```

Copy code to clipboard

## 2\. Add the React Router config

**👉 Create a `react-router.config.ts` file**

Add the following to the root of your project. In this config you can tell React Router about your project, like where to find the app directory and to not use SSR (server-side rendering) for now.

```
touch react-router.config.ts

```

Copy code to clipboard

```
import type { Config } from "@react-router/dev/config";

export default {
  appDirectory: "src",
  ssr: false,
} satisfies Config;

```

Copy code to clipboard

## 3\. Add the Root entry point

In a typical Vite app, the `index.html` file is the entry point for bundling. The React Router Vite plugin moves the entry point to a `root.tsx` file so you can use React to render the shell of your app instead of static HTML, and eventually upgrade to Server Rendering if you want.

**👉 Move your existing `index.html` to `root.tsx`**

For example, if your current `index.html` looks like this:

```
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0"
    />
    <title>My App</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

```

Copy code to clipboard

You would move that markup into `src/root.tsx` and delete `index.html`:

```
touch src/root.tsx

```

Copy code to clipboard

```
import {
  Links,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from "react-router";

export function Layout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        <meta charSet="UTF-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1.0"
        />
        <title>My App</title>
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

export default function Root() {
  return <Outlet />;
}

```

Copy code to clipboard

## 4\. Add client entry module

In the typical Vite app the `index.html` file points to `src/main.tsx` as the client entry point. React Router uses a file named `src/entry.client.tsx` instead.

**👉 Make `src/entry.client.tsx` your entry point**

If your current `src/main.tsx` looks like this:

```
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router";
import "./index.css";
import App from "./App";

ReactDOM.createRoot(
  document.getElementById("root")!
).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);

```

Copy code to clipboard

You would rename it to `entry.client.tsx` and change it to this:

```
import React from "react";
import ReactDOM from "react-dom/client";
import { HydratedRouter } from "react-router/dom";
import "./index.css";

ReactDOM.hydrateRoot(
  document,
  <React.StrictMode>
    <HydratedRouter />
  </React.StrictMode>
);

```

Copy code to clipboard

- Use `hydrateRoot` instead of `createRoot`
- Render a `<HydratedRouter>` instead of your `<App/>` component
- Note: we stopped rendering the `<App/>` component. We'll bring it back in a later step, but first we want to get the app to boot with the new entry point.

## 5\. Shuffle stuff around

Between `root.tsx` and `entry.client.tsx`, you may want to shuffle some stuff around between them.

In general:

- `root.tsx` contains any rendering things like context providers, layouts, styles, etc.
- `entry.client.tsx` should be as minimal as possible
- Remember to _not_ try to render your existing `<App/>` component yet, we'll do that in a later step

Note that your `root.tsx` file will be statically generated and served as the entry point of your app, so just that module will need to be compatible with server rendering. This is where most of your trouble will come.

## 6\. Set up your routes

The React Router Vite plugin uses a `routes.ts` file to configure your routes. For now we'll add a simple catchall route to get things going.

**👉 Set up a `catchall.tsx` route**

```
touch src/routes.ts src/catchall.tsx

```

Copy code to clipboard

```
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [\
  // * matches all URLs, the ? makes it optional so it will match / as well\
  route("*?", "catchall.tsx"),\
] satisfies RouteConfig;

```

Copy code to clipboard

**👉 Render a placeholder route**

Eventually we'll replace this with our original `App` component, but for now we'll just render something simple to make sure we can boot the app.

```
export default function Component() {
  return <div>Hello, world!</div>;
}

```

Copy code to clipboard

[View our guide on configuring routes](https://reactrouter.com/start/framework/routing) to learn more about the `routes.ts` file.

## 7\. Boot the app

At this point you should be able to to boot the app and see the root layout.

**👉 Add `dev` script and run the app**

```
"scripts": {
  "dev": "react-router dev"
}

```

Copy code to clipboard

Now make sure you can boot your app at this point before moving on:

```
npm run dev

```

Copy code to clipboard

You will probably want to add `.react-router/` to your `.gitignore` file to avoid tracking unnecessary files in your repository.

```txt
.react-router/

```

You can check out [Type Safety](https://reactrouter.com/how-to/route-module-type-safety) to learn how to fully set up and use autogenerated type safety for params, loader data, and more.

## 8\. Render your app

To get back to rendering your app, we'll update the "catchall" route we set up earlier that matches all URLs so that your existing `<Routes>` get a chance to render.

**👉 Update the catchall route to render your app**

```
import App from "./App";

export default function Component() {
  return <App />;
}

```

Copy code to clipboard

Your app should be back on the screen and working as usual!

## 9\. Migrate a route to a Route Module

You can now incrementally migrate your routes to route modules.

Given an existing route like this:

```
// ...
import About from "./containers/About";

export default function App() {
  return (
    <Routes>
      <Route path="/about" element={<About />} />
    </Routes>
  );
}

```

Copy code to clipboard

**👉 Add the route definition to `routes.ts`**

```
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [\
  route("/about", "./pages/about.tsx"),\
  route("*?", "catchall.tsx"),\
] satisfies RouteConfig;

```

Copy code to clipboard

**👉 Add the route module**

Edit the route module to use the [Route Module API](https://reactrouter.com/start/framework/route-module):

```
export async function clientLoader() {
  // you can now fetch data here
  return {
    title: "About page",
  };
}

export default function Component({ loaderData }) {
  return <h1>{loaderData.title}</h1>;
}

```

Copy code to clipboard

See [Type Safety](https://reactrouter.com/how-to/route-module-type-safety) to set up autogenerated type safety for params, loader data, and more.

The first few routes you migrate are the hardest because you often have to access various abstractions a bit differently than before (like in a loader instead of from a hook or context). But once the trickiest bits get dealt with, you get into an incremental groove.

## Enable SSR and/or Pre-rendering

If you want to enable server rendering and static pre-rendering, you can do so with the `ssr` and `prerender` options in the bundler plugin. For SSR you'll need to also deploy the server build to a server. See [Deploying](https://reactrouter.com/start/deploying) for more information.

```
import type { Config } from "@react-router/dev/config";

export default {
  ssr: true,
  async prerender() {
    return ["/", "/about", "/contact"];
  },
} satisfies Config;

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/upgrading/component-routes.md)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [react-router](https://api.reactrouter.com/v7/modules/react_router.html)

# Module react-router

`react-router` is the primary package in the React Router project.

## Installation [Permalink](https://api.reactrouter.com/v7/modules/react_router.html\#md:installation)

```sh
npm i react-router
Copy
```

### Index

### Components

[Await](https://api.reactrouter.com/v7/functions/react_router.Await.html) [Form](https://api.reactrouter.com/v7/functions/react_router.Form.html) [Link](https://api.reactrouter.com/v7/functions/react_router.Link.html) [Links](https://api.reactrouter.com/v7/functions/react_router.Links.html) [Meta](https://api.reactrouter.com/v7/functions/react_router.Meta.html) [Navigate](https://api.reactrouter.com/v7/functions/react_router.Navigate.html) [NavLink](https://api.reactrouter.com/v7/functions/react_router.NavLink.html) [Outlet](https://api.reactrouter.com/v7/functions/react_router.Outlet.html) [PrefetchPageLinks](https://api.reactrouter.com/v7/functions/react_router.PrefetchPageLinks.html) [Route](https://api.reactrouter.com/v7/functions/react_router.Route.html) [Router](https://api.reactrouter.com/v7/functions/react_router.Router.html) [Routes](https://api.reactrouter.com/v7/functions/react_router.Routes.html) [Scripts](https://api.reactrouter.com/v7/functions/react_router.Scripts.html) [ScrollRestoration](https://api.reactrouter.com/v7/functions/react_router.ScrollRestoration.html) [ServerRouter](https://api.reactrouter.com/v7/functions/react_router.ServerRouter.html)

### Hooks

[unstable\_usePrompt](https://api.reactrouter.com/v7/functions/react_router.unstable_usePrompt.html) [useActionData](https://api.reactrouter.com/v7/functions/react_router.useActionData.html) [useAsyncError](https://api.reactrouter.com/v7/functions/react_router.useAsyncError.html) [useAsyncValue](https://api.reactrouter.com/v7/functions/react_router.useAsyncValue.html) [useBeforeUnload](https://api.reactrouter.com/v7/functions/react_router.useBeforeUnload.html) [useBlocker](https://api.reactrouter.com/v7/functions/react_router.useBlocker.html) [useFetcher](https://api.reactrouter.com/v7/functions/react_router.useFetcher.html) [useFetchers](https://api.reactrouter.com/v7/functions/react_router.useFetchers.html) [useFormAction](https://api.reactrouter.com/v7/functions/react_router.useFormAction.html) [useHref](https://api.reactrouter.com/v7/functions/react_router.useHref.html) [useInRouterContext](https://api.reactrouter.com/v7/functions/react_router.useInRouterContext.html) [useLinkClickHandler](https://api.reactrouter.com/v7/functions/react_router.useLinkClickHandler.html) [useLoaderData](https://api.reactrouter.com/v7/functions/react_router.useLoaderData.html) [useLocation](https://api.reactrouter.com/v7/functions/react_router.useLocation.html) [useMatch](https://api.reactrouter.com/v7/functions/react_router.useMatch.html) [useMatches](https://api.reactrouter.com/v7/functions/react_router.useMatches.html) [useNavigate](https://api.reactrouter.com/v7/functions/react_router.useNavigate.html) [useNavigation](https://api.reactrouter.com/v7/functions/react_router.useNavigation.html) [useNavigationType](https://api.reactrouter.com/v7/functions/react_router.useNavigationType.html) [useOutlet](https://api.reactrouter.com/v7/functions/react_router.useOutlet.html) [useOutletContext](https://api.reactrouter.com/v7/functions/react_router.useOutletContext.html) [useParams](https://api.reactrouter.com/v7/functions/react_router.useParams.html) [useResolvedPath](https://api.reactrouter.com/v7/functions/react_router.useResolvedPath.html) [useRevalidator](https://api.reactrouter.com/v7/functions/react_router.useRevalidator.html) [useRouteError](https://api.reactrouter.com/v7/functions/react_router.useRouteError.html) [useRouteLoaderData](https://api.reactrouter.com/v7/functions/react_router.useRouteLoaderData.html) [useRoutes](https://api.reactrouter.com/v7/functions/react_router.useRoutes.html) [useSearchParams](https://api.reactrouter.com/v7/functions/react_router.useSearchParams.html) [useSubmit](https://api.reactrouter.com/v7/functions/react_router.useSubmit.html) [useViewTransitionState](https://api.reactrouter.com/v7/functions/react_router.useViewTransitionState.html)

### Data Routers

[createBrowserRouter](https://api.reactrouter.com/v7/functions/react_router.createBrowserRouter.html) [createHashRouter](https://api.reactrouter.com/v7/functions/react_router.createHashRouter.html) [createMemoryRouter](https://api.reactrouter.com/v7/functions/react_router.createMemoryRouter.html) [createStaticRouter](https://api.reactrouter.com/v7/functions/react_router.createStaticRouter.html)

### Component Routers

[BrowserRouter](https://api.reactrouter.com/v7/functions/react_router.BrowserRouter.html) [HashRouter](https://api.reactrouter.com/v7/functions/react_router.HashRouter.html) [MemoryRouter](https://api.reactrouter.com/v7/functions/react_router.MemoryRouter.html) [StaticRouter](https://api.reactrouter.com/v7/functions/react_router.StaticRouter.html) [StaticRouterProvider](https://api.reactrouter.com/v7/functions/react_router.StaticRouterProvider.html) [unstable\_HistoryRouter](https://api.reactrouter.com/v7/functions/react_router.unstable_HistoryRouter.html)

### Utils

[createPath](https://api.reactrouter.com/v7/functions/react_router.createPath.html) [createRoutesFromChildren](https://api.reactrouter.com/v7/functions/react_router.createRoutesFromChildren.html) [createRoutesFromElements](https://api.reactrouter.com/v7/functions/react_router.createRoutesFromElements.html) [createRoutesStub](https://api.reactrouter.com/v7/functions/react_router.createRoutesStub.html) [createSearchParams](https://api.reactrouter.com/v7/functions/react_router.createSearchParams.html) [createStaticHandler](https://api.reactrouter.com/v7/functions/react_router.createStaticHandler.html) [data](https://api.reactrouter.com/v7/functions/react_router.data.html) [generatePath](https://api.reactrouter.com/v7/functions/react_router.generatePath.html) [isRouteErrorResponse](https://api.reactrouter.com/v7/functions/react_router.isRouteErrorResponse.html) [matchPath](https://api.reactrouter.com/v7/functions/react_router.matchPath.html) [matchRoutes](https://api.reactrouter.com/v7/functions/react_router.matchRoutes.html) [parsePath](https://api.reactrouter.com/v7/functions/react_router.parsePath.html) [redirect](https://api.reactrouter.com/v7/functions/react_router.redirect.html) [redirectDocument](https://api.reactrouter.com/v7/functions/react_router.redirectDocument.html) [renderMatches](https://api.reactrouter.com/v7/functions/react_router.renderMatches.html) [replace](https://api.reactrouter.com/v7/functions/react_router.replace.html) [resolvePath](https://api.reactrouter.com/v7/functions/react_router.resolvePath.html)

### Types

[AwaitProps](https://api.reactrouter.com/v7/interfaces/react_router.AwaitProps.html) [BrowserRouterProps](https://api.reactrouter.com/v7/interfaces/react_router.BrowserRouterProps.html) [FetcherFormProps](https://api.reactrouter.com/v7/interfaces/react_router.FetcherFormProps.html) [FormProps](https://api.reactrouter.com/v7/interfaces/react_router.FormProps.html) [HashRouterProps](https://api.reactrouter.com/v7/interfaces/react_router.HashRouterProps.html) [HistoryRouterProps](https://api.reactrouter.com/v7/interfaces/react_router.HistoryRouterProps.html) [IndexRouteProps](https://api.reactrouter.com/v7/interfaces/react_router.IndexRouteProps.html) [LayoutRouteProps](https://api.reactrouter.com/v7/interfaces/react_router.LayoutRouteProps.html) [LinkProps](https://api.reactrouter.com/v7/interfaces/react_router.LinkProps.html) [MemoryRouterProps](https://api.reactrouter.com/v7/interfaces/react_router.MemoryRouterProps.html) [NavigateProps](https://api.reactrouter.com/v7/interfaces/react_router.NavigateProps.html) [NavLinkProps](https://api.reactrouter.com/v7/interfaces/react_router.NavLinkProps.html) [OutletProps](https://api.reactrouter.com/v7/interfaces/react_router.OutletProps.html) [PathRouteProps](https://api.reactrouter.com/v7/interfaces/react_router.PathRouteProps.html) [RouterProps](https://api.reactrouter.com/v7/interfaces/react_router.RouterProps.html) [RoutesProps](https://api.reactrouter.com/v7/interfaces/react_router.RoutesProps.html) [ScriptsProps](https://api.reactrouter.com/v7/types/react_router.ScriptsProps.html)

### Other

[NavigationType](https://api.reactrouter.com/v7/enums/react_router.NavigationType.html) [UNSAFE\_ServerMode](https://api.reactrouter.com/v7/enums/react_router.UNSAFE_ServerMode.html) [UNSAFE\_DataWithResponseInit](https://api.reactrouter.com/v7/classes/react_router.UNSAFE_DataWithResponseInit.html) [UNSAFE\_RemixErrorBoundary](https://api.reactrouter.com/v7/classes/react_router.UNSAFE_RemixErrorBoundary.html) [ActionFunction](https://api.reactrouter.com/v7/interfaces/react_router.ActionFunction.html) [ActionFunctionArgs](https://api.reactrouter.com/v7/interfaces/react_router.ActionFunctionArgs.html) [AppLoadContext](https://api.reactrouter.com/v7/interfaces/react_router.AppLoadContext.html) [Cookie](https://api.reactrouter.com/v7/interfaces/react_router.Cookie.html) [CookieParseOptions](https://api.reactrouter.com/v7/interfaces/react_router.CookieParseOptions.html) [CookieSerializeOptions](https://api.reactrouter.com/v7/interfaces/react_router.CookieSerializeOptions.html) [CookieSignatureOptions](https://api.reactrouter.com/v7/interfaces/react_router.CookieSignatureOptions.html) [DataRouteMatch](https://api.reactrouter.com/v7/interfaces/react_router.DataRouteMatch.html) [DataRouter](https://api.reactrouter.com/v7/interfaces/react_router.DataRouter.html) [DataStrategyFunction](https://api.reactrouter.com/v7/interfaces/react_router.DataStrategyFunction.html) [DataStrategyFunctionArgs](https://api.reactrouter.com/v7/interfaces/react_router.DataStrategyFunctionArgs.html) [DataStrategyMatch](https://api.reactrouter.com/v7/interfaces/react_router.DataStrategyMatch.html) [DataStrategyResult](https://api.reactrouter.com/v7/interfaces/react_router.DataStrategyResult.html) [EntryContext](https://api.reactrouter.com/v7/interfaces/react_router.EntryContext.html) [FetcherSubmitFunction](https://api.reactrouter.com/v7/interfaces/react_router.FetcherSubmitFunction.html) [FetcherSubmitOptions](https://api.reactrouter.com/v7/interfaces/react_router.FetcherSubmitOptions.html) [GetScrollPositionFunction](https://api.reactrouter.com/v7/interfaces/react_router.GetScrollPositionFunction.html) [GetScrollRestorationKeyFunction](https://api.reactrouter.com/v7/interfaces/react_router.GetScrollRestorationKeyFunction.html) [HandleDataRequestFunction](https://api.reactrouter.com/v7/interfaces/react_router.HandleDataRequestFunction.html) [HandleDocumentRequestFunction](https://api.reactrouter.com/v7/interfaces/react_router.HandleDocumentRequestFunction.html) [HandleErrorFunction](https://api.reactrouter.com/v7/interfaces/react_router.HandleErrorFunction.html) [HeadersFunction](https://api.reactrouter.com/v7/interfaces/react_router.HeadersFunction.html) [IndexRouteObject](https://api.reactrouter.com/v7/interfaces/react_router.IndexRouteObject.html) [LazyRouteFunction](https://api.reactrouter.com/v7/interfaces/react_router.LazyRouteFunction.html) [LinksFunction](https://api.reactrouter.com/v7/interfaces/react_router.LinksFunction.html) [LoaderFunctionArgs](https://api.reactrouter.com/v7/interfaces/react_router.LoaderFunctionArgs.html) [Location](https://api.reactrouter.com/v7/interfaces/react_router.Location.html) [MetaArgs](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs.html) [MetaFunction](https://api.reactrouter.com/v7/interfaces/react_router.MetaFunction.html) [NavigateFunction](https://api.reactrouter.com/v7/interfaces/react_router.NavigateFunction.html) [NavigateOptions](https://api.reactrouter.com/v7/interfaces/react_router.NavigateOptions.html) [Navigator](https://api.reactrouter.com/v7/interfaces/react_router.Navigator.html) [NonIndexRouteObject](https://api.reactrouter.com/v7/interfaces/react_router.NonIndexRouteObject.html) [PageLinkDescriptor](https://api.reactrouter.com/v7/interfaces/react_router.PageLinkDescriptor.html) [Path](https://api.reactrouter.com/v7/interfaces/react_router.Path.html) [PathMatch](https://api.reactrouter.com/v7/interfaces/react_router.PathMatch.html) [PathPattern](https://api.reactrouter.com/v7/interfaces/react_router.PathPattern.html) [RouteMatch](https://api.reactrouter.com/v7/interfaces/react_router.RouteMatch.html) [RouterInit](https://api.reactrouter.com/v7/interfaces/react_router.RouterInit.html) [RouterProviderProps](https://api.reactrouter.com/v7/interfaces/react_router.RouterProviderProps.html) [RouterState](https://api.reactrouter.com/v7/interfaces/react_router.RouterState.html) [RouterSubscriber](https://api.reactrouter.com/v7/interfaces/react_router.RouterSubscriber.html) [RoutesTestStubProps](https://api.reactrouter.com/v7/interfaces/react_router.RoutesTestStubProps.html) [ServerBuild](https://api.reactrouter.com/v7/interfaces/react_router.ServerBuild.html) [ServerEntryModule](https://api.reactrouter.com/v7/interfaces/react_router.ServerEntryModule.html) [ServerRouterProps](https://api.reactrouter.com/v7/interfaces/react_router.ServerRouterProps.html) [Session](https://api.reactrouter.com/v7/interfaces/react_router.Session.html) [SessionData](https://api.reactrouter.com/v7/interfaces/react_router.SessionData.html) [SessionIdStorageStrategy](https://api.reactrouter.com/v7/interfaces/react_router.SessionIdStorageStrategy.html) [SessionStorage](https://api.reactrouter.com/v7/interfaces/react_router.SessionStorage.html) [ShouldRevalidateFunction](https://api.reactrouter.com/v7/interfaces/react_router.ShouldRevalidateFunction.html) [ShouldRevalidateFunctionArgs](https://api.reactrouter.com/v7/interfaces/react_router.ShouldRevalidateFunctionArgs.html) [StaticHandler](https://api.reactrouter.com/v7/interfaces/react_router.StaticHandler.html) [StaticHandlerContext](https://api.reactrouter.com/v7/interfaces/react_router.StaticHandlerContext.html) [StaticRouterProps](https://api.reactrouter.com/v7/interfaces/react_router.StaticRouterProps.html) [StaticRouterProviderProps](https://api.reactrouter.com/v7/interfaces/react_router.StaticRouterProviderProps.html) [SubmitFunction](https://api.reactrouter.com/v7/interfaces/react_router.SubmitFunction.html) [SubmitOptions](https://api.reactrouter.com/v7/interfaces/react_router.SubmitOptions.html) [UIMatch](https://api.reactrouter.com/v7/interfaces/react_router.UIMatch.html) [UNSAFE\_AssetsManifest](https://api.reactrouter.com/v7/interfaces/react_router.UNSAFE_AssetsManifest.html) [UNSAFE\_RouteModules](https://api.reactrouter.com/v7/interfaces/react_router.UNSAFE_RouteModules.html) [Blocker](https://api.reactrouter.com/v7/types/react_router.Blocker.html) [BlockerFunction](https://api.reactrouter.com/v7/types/react_router.BlockerFunction.html) [ClientActionFunction](https://api.reactrouter.com/v7/types/react_router.ClientActionFunction.html) [ClientActionFunctionArgs](https://api.reactrouter.com/v7/types/react_router.ClientActionFunctionArgs.html) [ClientLoaderFunction](https://api.reactrouter.com/v7/types/react_router.ClientLoaderFunction.html) [ClientLoaderFunctionArgs](https://api.reactrouter.com/v7/types/react_router.ClientLoaderFunctionArgs.html) [CookieOptions](https://api.reactrouter.com/v7/types/react_router.CookieOptions.html) [CreateRequestHandlerFunction](https://api.reactrouter.com/v7/types/react_router.CreateRequestHandlerFunction.html) [DataRouteObject](https://api.reactrouter.com/v7/types/react_router.DataRouteObject.html) [ErrorResponse](https://api.reactrouter.com/v7/types/react_router.ErrorResponse.html) [Fetcher](https://api.reactrouter.com/v7/types/react_router.Fetcher.html) [FetcherWithComponents](https://api.reactrouter.com/v7/types/react_router.FetcherWithComponents.html) [FlashSessionData](https://api.reactrouter.com/v7/types/react_router.FlashSessionData.html) [FormEncType](https://api.reactrouter.com/v7/types/react_router.FormEncType.html) [FormMethod](https://api.reactrouter.com/v7/types/react_router.FormMethod.html) [HeadersArgs](https://api.reactrouter.com/v7/types/react_router.HeadersArgs.html) [HTMLFormMethod](https://api.reactrouter.com/v7/types/react_router.HTMLFormMethod.html) [HtmlLinkDescriptor](https://api.reactrouter.com/v7/types/react_router.HtmlLinkDescriptor.html) [HydrationState](https://api.reactrouter.com/v7/types/react_router.HydrationState.html) [InitialEntry](https://api.reactrouter.com/v7/types/react_router.InitialEntry.html) [IsCookieFunction](https://api.reactrouter.com/v7/types/react_router.IsCookieFunction.html) [IsSessionFunction](https://api.reactrouter.com/v7/types/react_router.IsSessionFunction.html) [LinkDescriptor](https://api.reactrouter.com/v7/types/react_router.LinkDescriptor.html) [LoaderFunction](https://api.reactrouter.com/v7/types/react_router.LoaderFunction.html) [MetaDescriptor](https://api.reactrouter.com/v7/types/react_router.MetaDescriptor.html) [Navigation](https://api.reactrouter.com/v7/types/react_router.Navigation.html) [NavigationStates](https://api.reactrouter.com/v7/types/react_router.NavigationStates.html) [NavLinkRenderProps](https://api.reactrouter.com/v7/types/react_router.NavLinkRenderProps.html) [ParamKeyValuePair](https://api.reactrouter.com/v7/types/react_router.ParamKeyValuePair.html) [ParamParseKey](https://api.reactrouter.com/v7/types/react_router.ParamParseKey.html) [Params](https://api.reactrouter.com/v7/types/react_router.Params.html) [PatchRoutesOnNavigationFunction](https://api.reactrouter.com/v7/types/react_router.PatchRoutesOnNavigationFunction.html) [PatchRoutesOnNavigationFunctionArgs](https://api.reactrouter.com/v7/types/react_router.PatchRoutesOnNavigationFunctionArgs.html) [PathParam](https://api.reactrouter.com/v7/types/react_router.PathParam.html) [RedirectFunction](https://api.reactrouter.com/v7/types/react_router.RedirectFunction.html) [RelativeRoutingType](https://api.reactrouter.com/v7/types/react_router.RelativeRoutingType.html) [RequestHandler](https://api.reactrouter.com/v7/types/react_router.RequestHandler.html) [RevalidationState](https://api.reactrouter.com/v7/types/react_router.RevalidationState.html) [RouteObject](https://api.reactrouter.com/v7/types/react_router.RouteObject.html) [RouteProps](https://api.reactrouter.com/v7/types/react_router.RouteProps.html) [RouterFetchOptions](https://api.reactrouter.com/v7/types/react_router.RouterFetchOptions.html) [RouterNavigateOptions](https://api.reactrouter.com/v7/types/react_router.RouterNavigateOptions.html) [ScrollRestorationProps](https://api.reactrouter.com/v7/types/react_router.ScrollRestorationProps.html) [SetURLSearchParams](https://api.reactrouter.com/v7/types/react_router.SetURLSearchParams.html) [SubmitTarget](https://api.reactrouter.com/v7/types/react_router.SubmitTarget.html) [To](https://api.reactrouter.com/v7/types/react_router.To.html) [URLSearchParamsInit](https://api.reactrouter.com/v7/types/react_router.URLSearchParamsInit.html) [IDLE\_BLOCKER](https://api.reactrouter.com/v7/variables/react_router.IDLE_BLOCKER.html) [IDLE\_FETCHER](https://api.reactrouter.com/v7/variables/react_router.IDLE_FETCHER.html) [IDLE\_NAVIGATION](https://api.reactrouter.com/v7/variables/react_router.IDLE_NAVIGATION.html) [UNSAFE\_DataRouterContext](https://api.reactrouter.com/v7/variables/react_router.UNSAFE_DataRouterContext.html) [UNSAFE\_DataRouterStateContext](https://api.reactrouter.com/v7/variables/react_router.UNSAFE_DataRouterStateContext.html) [UNSAFE\_FetchersContext](https://api.reactrouter.com/v7/variables/react_router.UNSAFE_FetchersContext.html) [UNSAFE\_FrameworkContext](https://api.reactrouter.com/v7/variables/react_router.UNSAFE_FrameworkContext.html) [UNSAFE\_LocationContext](https://api.reactrouter.com/v7/variables/react_router.UNSAFE_LocationContext.html) [UNSAFE\_NavigationContext](https://api.reactrouter.com/v7/variables/react_router.UNSAFE_NavigationContext.html) [UNSAFE\_RouteContext](https://api.reactrouter.com/v7/variables/react_router.UNSAFE_RouteContext.html) [UNSAFE\_SingleFetchRedirectSymbol](https://api.reactrouter.com/v7/variables/react_router.UNSAFE_SingleFetchRedirectSymbol.html) [UNSAFE\_ViewTransitionContext](https://api.reactrouter.com/v7/variables/react_router.UNSAFE_ViewTransitionContext.html) [createCookie](https://api.reactrouter.com/v7/functions/react_router.createCookie.html) [createCookieSessionStorage](https://api.reactrouter.com/v7/functions/react_router.createCookieSessionStorage.html) [createMemorySessionStorage](https://api.reactrouter.com/v7/functions/react_router.createMemorySessionStorage.html) [createRequestHandler](https://api.reactrouter.com/v7/functions/react_router.createRequestHandler.html) [createSession](https://api.reactrouter.com/v7/functions/react_router.createSession.html) [createSessionStorage](https://api.reactrouter.com/v7/functions/react_router.createSessionStorage.html) [isCookie](https://api.reactrouter.com/v7/functions/react_router.isCookie.html) [isSession](https://api.reactrouter.com/v7/functions/react_router.isSession.html) [RouterProvider](https://api.reactrouter.com/v7/functions/react_router.RouterProvider.html) [UNSAFE\_createBrowserHistory](https://api.reactrouter.com/v7/functions/react_router.UNSAFE_createBrowserHistory.html) [UNSAFE\_createClientRoutes](https://api.reactrouter.com/v7/functions/react_router.UNSAFE_createClientRoutes.html) [UNSAFE\_createClientRoutesWithHMRRevalidationOptOut](https://api.reactrouter.com/v7/functions/react_router.UNSAFE_createClientRoutesWithHMRRevalidationOptOut.html) [UNSAFE\_createRouter](https://api.reactrouter.com/v7/functions/react_router.UNSAFE_createRouter.html) [UNSAFE\_decodeViaTurboStream](https://api.reactrouter.com/v7/functions/react_router.UNSAFE_decodeViaTurboStream.html) [UNSAFE\_deserializeErrors](https://api.reactrouter.com/v7/functions/react_router.UNSAFE_deserializeErrors.html) [UNSAFE\_getPatchRoutesOnNavigationFunction](https://api.reactrouter.com/v7/functions/react_router.UNSAFE_getPatchRoutesOnNavigationFunction.html) [UNSAFE\_getSingleFetchDataStrategy](https://api.reactrouter.com/v7/functions/react_router.UNSAFE_getSingleFetchDataStrategy.html) [UNSAFE\_shouldHydrateRouteLoader](https://api.reactrouter.com/v7/functions/react_router.UNSAFE_shouldHydrateRouteLoader.html) [UNSAFE\_useFogOFWarDiscovery](https://api.reactrouter.com/v7/functions/react_router.UNSAFE_useFogOFWarDiscovery.html) [UNSAFE\_useScrollRestoration](https://api.reactrouter.com/v7/functions/react_router.UNSAFE_useScrollRestoration.html) [unstable\_setDevServerHooks](https://api.reactrouter.com/v7/functions/react_router.unstable_setDevServerHooks.html)

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

### On This Page

[Installation](https://api.reactrouter.com/v7/modules/react_router.html#md:installation)

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

FAQs

On this page

- [What happened to withRouter? I need it!](https://reactrouter.com/6.30.0/start/faq#what-happened-to-withrouter-i-need-it)
- [Why does `<Route>` have an `element` prop instead of `render` or `component`?](https://reactrouter.com/6.30.0/start/faq#why-does-route-have-an-element-prop-instead-of-render-or-component)
- [How do I add a No Match (404) Route in react-router v6?](https://reactrouter.com/6.30.0/start/faq#how-do-i-add-a-no-match-404-route-in-react-router-v6)
- [`<Route>` doesn't render? How do I compose?](https://reactrouter.com/6.30.0/start/faq#route-doesnt-render-how-do-i-compose)
- [How do I nest routes deep in the tree?](https://reactrouter.com/6.30.0/start/faq#how-do-i-nest-routes-deep-in-the-tree)
- [What Happened to Regexp Routes Paths?](https://reactrouter.com/6.30.0/start/faq#what-happened-to-regexp-routes-paths)

- [What happened to withRouter? I need it!](https://reactrouter.com/6.30.0/start/faq#what-happened-to-withrouter-i-need-it)
- [Why does `<Route>` have an `element` prop instead of `render` or `component`?](https://reactrouter.com/6.30.0/start/faq#why-does-route-have-an-element-prop-instead-of-render-or-component)
- [How do I add a No Match (404) Route in react-router v6?](https://reactrouter.com/6.30.0/start/faq#how-do-i-add-a-no-match-404-route-in-react-router-v6)
- [`<Route>` doesn't render? How do I compose?](https://reactrouter.com/6.30.0/start/faq#route-doesnt-render-how-do-i-compose)
- [How do I nest routes deep in the tree?](https://reactrouter.com/6.30.0/start/faq#how-do-i-nest-routes-deep-in-the-tree)
- [What Happened to Regexp Routes Paths?](https://reactrouter.com/6.30.0/start/faq#what-happened-to-regexp-routes-paths)

# FAQs

Here are some questions that people commonly have about React Router v6. You might also find what you're looking for in the [examples](https://github.com/remix-run/react-router/tree/dev/examples).

## What happened to withRouter? I need it!

This question usually stems from the fact that you're using React class components, which don't support hooks. In React Router v6, we fully embraced hooks and use them to share all the router's internal state. But that doesn't mean you can't use the router. Assuming you can actually use hooks (you're on React 16.8+), you just need a wrapper.

```
import {
  useLocation,
  useNavigate,
  useParams,
} from "react-router-dom";

function withRouter(Component) {
  function ComponentWithRouterProp(props) {
    let location = useLocation();
    let navigate = useNavigate();
    let params = useParams();
    return (
      <Component
        {...props}
        router={{ location, navigate, params }}
      />
    );
  }

  return ComponentWithRouterProp;
}

```

## Why does `<Route>` have an `element` prop instead of `render` or `component`?

In React Router v6 we switched from using v5's `<Route component>` and `<Route render>` APIs to `<Route element>`. Why is that?

For starters, we see React itself taking the lead here with the `<Suspense fallback={<Spinner />}>` API. The `fallback` prop takes a React **element**, not a **component**. This lets you easily pass whatever props you want to your `<Spinner>` from the component that renders it.

Using elements instead of components means we don't have to provide a `passProps`-style API, so you can get the props you need to your elements. For example, in a component-based API there is no good way to pass props to the `<Profile>` element that is rendered when `<Route path=":userId" component={Profile} />` matches. Most React libraries who take this approach end up with either an API like `<Route component={Profile} passProps={{ animate: true }} />` or use a render prop or higher-order component.

Also, `Route`'s rendering API in v5 was rather large. As we worked on v4/5, the conversation went something like this:

```
// Ah, this is nice and simple!
<Route path=":userId" component={Profile} />

// But wait, how do I pass custom props to the <Profile> element??
// Hmm, maybe we can use a render prop in those situations?
<Route
  path=":userId"
  render={routeProps => (
    <Profile routeProps={routeProps} animate={true} />
  )}
/>

// Ok, now we have two ways to render something with a route. :/

// But wait, what if we want to render something when a route
// *doesn't* match the URL, like a Not Found page? Maybe we
// can use another render prop with slightly different semantics?
<Route
  path=":userId"
  children={({ match }) => (
    match ? (
      <Profile match={match} animate={true} />
    ) : (
      <NotFound />
    )
  )}
/>

// What if I want to get access to the route match, or I need
// to redirect deeper in the tree?
function DeepComponent(routeStuff) {
  // got routeStuff, phew!
}
export default withRouter(DeepComponent);

// Well hey, now at least we've covered all our use cases!
// ... *facepalm*

```

At least part of the reason for this API sprawl was that React did not provide any way for us to get the information from the `<Route>` to your route element, so we had to invent clever ways to get both the route data **and** your own custom props through to your elements: `component`, render props, `passProps` higher-order-components ... until **hooks** came along!

Now, the conversation above goes like this:

```
// Ah, nice and simple API. And it's just like the <Suspense> API!
// Nothing more to learn here.
<Route path=":userId" element={<Profile />} />

// But wait, how do I pass custom props to the <Profile>
// element? Oh ya, it's just an element. Easy.
<Route path=":userId" element={<Profile animate={true} />} />

// Ok, but how do I access the router's data, like the URL params
// or the current location?
function Profile({ animate }) {
  let params = useParams();
  let location = useLocation();
}

// But what about components deep in the tree?
function DeepComponent() {
  // oh right, same as anywhere else
  let navigate = useNavigate();
}

// Aaaaaaaaand we're done here.

```

Another important reason for using the `element` prop in v6 is that `<Route children>` is reserved for nesting routes. You can read more about this in [the guide about getting started](https://reactrouter.com/6.30.0/start/overview#nested-routes) with v6.

## How do I add a No Match (404) Route in react-router v6?

In v4 we would have just left the path prop off a route. In v5 we would have wrapped our 404 element in a Route and used `path="*"`. In v6 use `path="*"` and pass the 404 element into the new `element` prop instead of wrapping it:

```
<Route path="*" element={<NoMatch />} />

```

## `<Route>` doesn't render? How do I compose?

In v5 the `<Route>` component was just a normal component that was like an `if` statement that rendered when the URL matched its path. In v6, a `<Route>` element doesn't actually ever render, it's simply there for configuration.

In v5, since routes were just components, `MyRoute` will be rendered when the path is "/my-route".

```
let App = () => (
  <div>
    <MyRoute />
  </div>
);

let MyRoute = ({ element, ...rest }) => {
  return (
    <Route path="/my-route" children={<p>Hello!</p>} />
  );
};

```

In v6, however, the `<Route>` is only used for its props, so the following code will never render `<p>Hello!</p>` because `<MyRoute>` has no path that `<Routes>` can see:

```
let App = () => (
  <Routes>
    <MyRoute />
  </Routes>
);

let MyRoute = () => {
  // won't ever render because the path is down here
  return (
    <Route path="/my-route" children={<p>Hello!</p>} />
  );
};

```

You can get the same behavior by:

- Only rendering `<Route>` elements inside of `<Routes>`
- Moving the composition into the `element` prop

```
let App = () => (
  <div>
    <Routes>
      <Route path="/my-route" element={<MyRoute />} />
    </Routes>
  </div>
);

let MyRoute = () => {
  return <p>Hello!</p>;
};

```

Having a full nested route config available statically in `<Routes>` is going to enable a lot of features in `v6.x`, so we encourage you to put your routes in one top-level config. If you really like the idea of components that match the URL independent of any other components, you can make a component that behaves similarly to the v5 `Route` with this:

```
function MatchPath({ path, Comp }) {
  let match = useMatch(path);
  return match ? <Comp {...match} /> : null;
}

// Will match anywhere w/o needing to be in a `<Routes>`
<MatchPath path="/accounts/:id" Comp={Account} />;

```

## How do I nest routes deep in the tree?

In v5 you could render a `<Route>` or `<Switch>` anywhere you want. You can keep doing the very same thing, but you need to use `<Routes>` ( `<Route>` without an 's' will not work). We call these "Descendant `<Routes>`".

It might have looked like this in v5

```
// somewhere up the tree
<Switch>
  <Route path="/users" component={Users} />
</Switch>;

// and now deeper in the tree
function Users() {
  return (
    <div>
      <h1>Users</h1>
      <Switch>
        <Route path="/users/account" component={Account} />
      </Switch>
    </div>
  );
}

```

In v6 it's almost the same:

- Note the `*` in the ancestor routes to get it to match deeper URLs even though it has no direct children
- You no longer need to know the entire child route path, you can use a relative route now

```
// somewhere up the tree
<Routes>
  <Route path="/users/*" element={<Users />} />
</Routes>;

// and now deeper in the tree
function Users() {
  return (
    <div>
      <h1>Users</h1>
      <Routes>
        <Route path="account" element={<Account />} />
      </Routes>
    </div>
  );
}

```

If you had a "floating route" in v5 (not wrapped in a `<Switch>`), simply wrap it in a `<Routes>` instead.

```
// v5
<Route path="/contact" component={Contact} />

// v6
<Routes>
  <Route path="contact" element={<Contact />} />
</Routes>

```

## What Happened to Regexp Routes Paths?

Regexp route paths were removed for two reasons:

1. Regular expression paths in routes raised a lot of questions for v6's ranked route matching. How do you rank a regex?

2. We were able to shed an entire dependency (path-to-regexp) and cut the package weight sent to your user's browser significantly. If it were added back, it would represent 1/3 of React Router's page weight!


After looking at a lot of use cases, we found we can still meet them without direct regexp path support, so we made the tradeoff to significantly decrease the bundle size and avoid the open questions around ranking regexp routes.

The majority of regexp routes were only concerned about one URL segment at a time and doing one of two things:

1. Matching multiple static values
2. Validating the param in some way (is a number, not a number, etc.)

**Matching generally static values**

A very common route we've seen is a regex matching multiple language codes:

```
function App() {
  return (
    <Switch>
      <Route path={/(en|es|fr)/} component={Lang} />
    </Switch>
  );
}

function Lang({ params }) {
  let lang = params[0];
  let translations = I81n[lang];
  // ...
}

```

These are all actually just static paths, so in v6 you can make three routes and pass the code directly to the component. If you've got a lot of them, make an array and map it into routes to avoid the repetition.

```
function App() {
  return (
    <Routes>
      <Route path="en" element={<Lang lang="en" />} />
      <Route path="es" element={<Lang lang="es" />} />
      <Route path="fr" element={<Lang lang="fr" />} />
    </Routes>
  );
}

function Lang({ lang }) {
  let translations = I81n[lang];
  // ...
}

```

**Doing some sort of param validation**

Another common case was ensuring that parameters were an integer.

```
function App() {
  return (
    <Switch>
      <Route path={/users\/(\d+)/} component={User} />
    </Switch>
  );
}

function User({ params }) {
  let id = params[0];
  // ...
}

```

In this case you have to do a bit of work yourself with the regex inside the matching component:

```
function App() {
  return (
    <Routes>
      <Route path="/users/:id" element={<ValidateUser />} />
      <Route path="/users/*" element={<NotFound />} />
    </Routes>
  );
}

function ValidateUser() {
  let params = useParams();
  let userId = params.id.match(/\d+/);
  if (!userId) {
    return <NotFound />;
  }
  return <User id={params.userId} />;
}

function User(props) {
  let id = props.id;
  // ...
}

```

In v5 if the regex didn't match then `<Switch>` would keep trying to match the next routes:

```
function App() {
  return (
    <Switch>
      <Route path={/users\/(\d+)/} component={User} />
      <Route path="/users/new" exact component={NewUser} />
      <Route
        path="/users/inactive"
        exact
        component={InactiveUsers}
      />
      <Route path="/users/*" component={NotFound} />
    </Switch>
  );
}

```

Looking at this example you might be concerned that in the v6 version your other routes won't get rendered at their URLs because the `:userId` route might match first. But, thanks to route ranking, that is not the case. The "new" and "inactive" routes will rank higher and therefore render at their respective URLs:

```
function App() {
  return (
    <Routes>
      <Route path="/users/:id" element={<ValidateUser />} />
      <Route path="/users/new" element={<NewUser />} />
      <Route
        path="/users/inactive"
        element={<InactiveUsers />}
      />
    </Routes>
  );
}

```

In fact, the v5 version has all sorts of problems if your routes aren't ordered _just right_. V6 completely eliminates this problem.

**Remix Users**

If you're using [Remix](https://remix.run/), you can send proper 40x responses to the browser by moving this work into your loader. This also decreases the size of the browser bundles sent to the user because loaders only run on the server.

```
import { useLoaderData } from "remix";

export async function loader({ params }) {
  if (!params.id.match(/\d+/)) {
    throw new Response("", { status: 400 });
  }

  let user = await fakeDb.user.find({
    where: { id: params.id },
  });
  if (!user) {
    throw new Response("", { status: 404 });
  }

  return user;
}

function User() {
  let user = useLoaderData();
  // ...
}

```

Instead of rendering your component, remix will render the nearest [catch boundary](https://remix.run/docs/en/v1/api/conventions#catchboundary) instead.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/how-to/pre-rendering) [dev](https://reactrouter.com/dev/how-to/pre-rendering)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Pre-Rendering

On this page

- [Pre-rendering with `ssr:true`](https://reactrouter.com/how-to/pre-rendering#pre-rendering-with-ssrtrue)
- [Configuration](https://reactrouter.com/how-to/pre-rendering#configuration)
- [Data Loading and Pre-rendering](https://reactrouter.com/how-to/pre-rendering#data-loading-and-pre-rendering)
- [Static File Output](https://reactrouter.com/how-to/pre-rendering#static-file-output)
- [Pre-rendering with `ssr:false`](https://reactrouter.com/how-to/pre-rendering#pre-rendering-with-ssrfalse)
- [Pre-rendering with a SPA Fallback](https://reactrouter.com/how-to/pre-rendering#pre-rendering-with-a-spa-fallback)
- [Invalid Exports](https://reactrouter.com/how-to/pre-rendering#invalid-exports)

- [Pre-rendering with `ssr:true`](https://reactrouter.com/how-to/pre-rendering#pre-rendering-with-ssrtrue)
- [Configuration](https://reactrouter.com/how-to/pre-rendering#configuration)
- [Data Loading and Pre-rendering](https://reactrouter.com/how-to/pre-rendering#data-loading-and-pre-rendering)
- [Static File Output](https://reactrouter.com/how-to/pre-rendering#static-file-output)
- [Pre-rendering with `ssr:false`](https://reactrouter.com/how-to/pre-rendering#pre-rendering-with-ssrfalse)
- [Pre-rendering with a SPA Fallback](https://reactrouter.com/how-to/pre-rendering#pre-rendering-with-a-spa-fallback)
- [Invalid Exports](https://reactrouter.com/how-to/pre-rendering#invalid-exports)

# Pre-Rendering

Pre-Rendering allows you to speed up page loads for static content by rendering pages at build time instead of at runtime. Pre-rendering is enabled via the `prerender` config in `react-router.config.ts` and can be used in two ways based on the `ssr` config value:

- Alongside a runtime SSR server ith `ssr:true` (the default value)
- Deployed to a static file server with `ssr:false`

## Pre-rendering with `ssr:true`

### Configuration

Add the `prerender` option to your config, there are three signatures:

```
import type { Config } from "@react-router/dev/config";

export default {
  // Can be omitted - defaults to true
  ssr: true,

  // all static paths (no dynamic segments like "/post/:slug")
  prerender: true,

  // specific paths
  prerender: ["/", "/blog", "/blog/popular-post"],

  // async function for dependencies like a CMS
  async prerender({ getStaticPaths }) {
    let posts = await fakeGetPostsFromCMS();
    return [\
      "/",\
      "/blog",\
      ...posts.map((post) => post.href),\
    ];
  },
} satisfies Config;

```

Copy code to clipboard

### Data Loading and Pre-rendering

There is no extra application API for pre-rendering. Routes being pre-rendered use the same route `loader` functions as server rendering:

```
export async function loader({ request, params }) {
  let post = await getPost(params.slug);
  return post;
}

export function Post({ loaderData }) {
  return <div>{loaderData.title}</div>;
}

```

Copy code to clipboard

Instead of a request coming to your route on a deployed server, the build creates a `new Request()` and runs it through your app just like a server would.

When server rendering, requests to paths that have not been pre-rendered will be server rendered as usual.

### Static File Output

The rendered result will be written out to your `build/client` directory. You'll notice two files for each path:

- `[url].html` HTML file for initial document requests
- `[url].data` file for client side navigation browser requests

The output of your build will indicate what files were pre-rendered:

```sh
> react-router build
vite v5.2.11 building for production...
...
vite v5.2.11 building SSR bundle for production...
...
Prerender: Generated build/client/index.html
Prerender: Generated build/client/blog.data
Prerender: Generated build/client/blog/index.html
Prerender: Generated build/client/blog/my-first-post.data
Prerender: Generated build/client/blog/my-first-post/index.html
...

```

During development, pre-rendering doesn't save the rendered results to the public directory, this only happens for `react-router build`.

## Pre-rendering with `ssr:false`

The above examples assume you are deploying a runtime server, but are pre-rendering some static pages in order to serve them faster and avoid hitting the server.

To disable runtime SSR and configure pre-rendering to be served from a static file server, you can set the `ssr:false` config flag:

```
import type { Config } from "@react-router/dev/config";

export default {
  ssr: false, // disable runtime server rendering
  prerender: true, // pre-render all static routes
} satisfies Config;

```

Copy code to clipboard

If you specify `ssr:false` without a `prerender` config, React Router refers to that as [SPA Mode](https://reactrouter.com/how-to/spa). In SPA Mode, we render a single HTML file that is capable of hydrating for _any_ of your application paths. It can do this because it only renders the `root` route into the HTML file and then determines which child routes to load based on the browser URL during hydration. This means you can use a `loader` on the root route, but not on any other routes because we don't know which routes to load until hydration in the browser.

If you want to pre-render paths with `ssr:false`, those matched routes _can_ have loaders because we'll pre-render all of the matched routes for those paths, not just the root. You cannot include `actions` or `headers` functions in any routes when `ssr:false` is set because there will be no runtime server to run them on.

### Pre-rendering with a SPA Fallback

If you want `ssr:false` but don't want to pre-render _all_ of your routes - that's fine too! You may have some paths where you need the performance/SEO benefits of pre-rendering, but other pages where a SPA would be fine.

You can do this using the combination of config options as well - just limit your `prerender` config to the paths that you want to pre-render and React Router will also output a "SPA Fallback" HTML file that can be served to hydrate any other paths (using the same approach as [SPA Mode](https://reactrouter.com/how-to/spa)).

This will be written to one of the following paths:

- `build/client/index.html` \- If the `/` path is not pre-rendered
- `build/client/__spa-fallback.html` \- If the `/` path is pre-rendered

```
import type { Config } from "@react-router/dev/config";

export default {
  ssr: false,

  // SPA fallback will be written to build/client/index.html
  prerender: ["/about-us"],

  // SPA fallback will be written to build/client/__spa-fallback.html
  prerender: ["/", "/about-us"],
} satisfies Config;

```

Copy code to clipboard

You can configure your deployment server to serve this file for any path that otherwise would 404. Some hosts do this by default, but others don't. As an example, a host may support a `_redirects` file to do this:

```
# If you did not pre-render the `/` route
/*    /index.html   200

# If you pre-rendered the `/` route
/*    /__spa-fallback.html   200

```

If you're getting 404s at valid routes for your app, it's likely you need to configure your host.

Here's another example of how you can do this with the [`sirv-cli`](https://www.npmjs.com/package/sirv-cli#user-content-single-page-applications) tool:

```sh
# If you did not pre-render the `/` route
sirv-cli build/client --single index.html

# If you pre-rendered the `/` route
sirv-cli build/client --single __spa-fallback.html

```

### Invalid Exports

When pre-rendering with `ssr:false`, React Router will error at build time if you have invalid exports to help prevent some mistakes that can be easily overlooked.

- `headers`/ `action` functions are prohibited in all routes because there will be no runtime server on which to run them
- When using `ssr:false` without a `prerender` config (SPA Mode), a `loader` is permitted on the root route only
- When using `ssr:false` with a `prerender` config, a `loader` is permitted on any route matched by a `prerender` path

  - If you are using a `loader` on a pre-rendered route that has child routes, you will need to make sure the parent `loaderData` can be determined at run-time properly by either:

    - Pre-rendering all child routes so that the parent `loader` can be called at build-time for each child route path and rendered into a `.data` file, or
    - Use a `clientLoader` on the parent that can be called at run-time for non-pre-rendered child paths

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/how-to/pre-rendering.md)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [react-router](https://api.reactrouter.com/v7/modules/react_router.html)
- [RouterProvider](https://api.reactrouter.com/v7/functions/react_router.RouterProvider.html)

# Function RouterProvider

- RouterProvider(\_\_namedParameters): React.ReactElement [Permalink](https://api.reactrouter.com/v7/functions/react_router.RouterProvider#RouterProvider)
- Given a Remix Router instance, render the appropriate UI





#### Parameters



- \_\_namedParameters: [RouterProviderProps](https://api.reactrouter.com/v7/interfaces/react_router.RouterProviderProps.html)

#### Returns React.ReactElement

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/upgrading/v6) [dev](https://reactrouter.com/dev/upgrading/v6)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Upgrading from v6

On this page

- [Update to latest v6.x](https://reactrouter.com/upgrading/v6#update-to-latest-v6x)
- [v7\_relativeSplatPath](https://reactrouter.com/upgrading/v6#v7_relativesplatpath)
- [v7\_startTransition](https://reactrouter.com/upgrading/v6#v7_starttransition)
- [v7\_fetcherPersist](https://reactrouter.com/upgrading/v6#v7_fetcherpersist)
- [v7\_normalizeFormMethod](https://reactrouter.com/upgrading/v6#v7_normalizeformmethod)
- [v7\_partialHydration](https://reactrouter.com/upgrading/v6#v7_partialhydration)
- [v7\_skipActionErrorRevalidation](https://reactrouter.com/upgrading/v6#v7_skipactionerrorrevalidation)
- [Deprecations](https://reactrouter.com/upgrading/v6#deprecations)
- [Upgrade to v7](https://reactrouter.com/upgrading/v6#upgrade-to-v7)

- [Update to latest v6.x](https://reactrouter.com/upgrading/v6#update-to-latest-v6x)
- [v7\_relativeSplatPath](https://reactrouter.com/upgrading/v6#v7_relativesplatpath)
- [v7\_startTransition](https://reactrouter.com/upgrading/v6#v7_starttransition)
- [v7\_fetcherPersist](https://reactrouter.com/upgrading/v6#v7_fetcherpersist)
- [v7\_normalizeFormMethod](https://reactrouter.com/upgrading/v6#v7_normalizeformmethod)
- [v7\_partialHydration](https://reactrouter.com/upgrading/v6#v7_partialhydration)
- [v7\_skipActionErrorRevalidation](https://reactrouter.com/upgrading/v6#v7_skipactionerrorrevalidation)
- [Deprecations](https://reactrouter.com/upgrading/v6#deprecations)
- [Upgrade to v7](https://reactrouter.com/upgrading/v6#upgrade-to-v7)

# Upgrading from v6

React Router v7 requires the following minimum versions:

- `node@20`
- `react@18`
- `react-dom@18`

The v7 upgrade has no breaking changes if you have enabled all future flags. These flags allow you to update your app one change at a time. We highly recommend you make a commit after each step and ship it instead of doing everything all at once.

## Update to latest v6.x

First update to the latest minor version of v6.x to have the latest future flags and console warnings.

👉 **Update to latest v6**

```
npm install react-router-dom@6

```

Copy code to clipboard

### v7\_relativeSplatPath

**Background**

Changes the relative path matching and linking for multi-segment splats paths like `dashboard/*` (vs. just `*`). [View the CHANGELOG](https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#futurev7_relativesplatpath) for more information.

👉 **Enable the flag**

Enabling the flag depends on the type of router:

```
<BrowserRouter
  future={{
    v7_relativeSplatPath: true,
  }}
/>

```

Copy code to clipboard

```
createBrowserRouter(routes, {
  future: {
    v7_relativeSplatPath: true,
  },
});

```

Copy code to clipboard

**Update your Code**

If you have any routes with a path + a splat like `<Route path="dashboard/*">` that have relative links like `<Link to="relative">` or `<Link to="../relative">` beneath them, you will need to update your code.

👉 **Split the `<Route>` into two**

Split any multi-segment splat `<Route>` into a parent route with the path and a child route with the splat:

```
<Routes>
  <Route path="/" element={<Home />} />
-  <Route path="dashboard/*" element={<Dashboard />} />
+  <Route path="dashboard">
+    <Route path="*" element={<Dashboard />} />
+  </Route>
</Routes>

// or
createBrowserRouter([\
  { path: "/", element: <Home /> },\
  {\
-    path: "dashboard/*",\
-    element: <Dashboard />,\
+    path: "dashboard",\
+    children: [{ path: "*", element: <Dashboard /> }],\
  },\
]);

```

Copy code to clipboard

👉 **Update relative links**

Update any `<Link>` elements within that route tree to include the extra `..` relative segment to continue linking to the same place:

```
function Dashboard() {
  return (
    <div>
      <h2>Dashboard</h2>
      <nav>
-        <Link to="/">Dashboard Home</Link>
-        <Link to="team">Team</Link>
-        <Link to="projects">Projects</Link>
+        <Link to="../">Dashboard Home</Link>
+        <Link to="../team">Team</Link>
+        <Link to="../projects">Projects</Link>
      </nav>

      <Routes>
        <Route path="/" element={<DashboardHome />} />
        <Route path="team" element={<DashboardTeam />} />
        <Route
          path="projects"
          element={<DashboardProjects />}
        />
      </Routes>
    </div>
  );
}

```

Copy code to clipboard

### v7\_startTransition

**Background**

This uses `React.useTransition` instead of `React.useState` for Router state updates. View the [CHANGELOG](https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#futurev7_starttransition) for more information.

👉 **Enable the flag**

```
<BrowserRouter
  future={{
    v7_startTransition: true,
  }}
/>

// or
<RouterProvider
  future={{
    v7_startTransition: true,
  }}
/>

```

Copy code to clipboard

👉 **Update your Code**

You don't need to update anything unless you are using `React.lazy` _inside_ of a component.

Using `React.lazy` inside of a component is incompatible with `React.useTransition` (or other code that makes promises inside of components). Move `React.lazy` to the module scope and stop making promises inside of components. This is not a limitation of React Router but rather incorrect usage of React.

### v7\_fetcherPersist

If you are not using a `<RouterProvider>` you can skip this

**Background**

The fetcher lifecycle is now based on when it returns to an idle state rather than when its owner component unmounts: [View the CHANGELOG](https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#persistence-future-flag-futurev7_fetcherpersist) for more information.

**Enable the Flag**

```
createBrowserRouter(routes, {
  future: {
    v7_fetcherPersist: true,
  },
});

```

Copy code to clipboard

**Update your Code**

It's unlikely to affect your app. You may want to check any usage of `useFetchers` as they may persist longer than they did before. Depending on what you're doing, you may render something longer than before.

### v7\_normalizeFormMethod

If you are not using a `<RouterProvider>` you can skip this

This normalizes `formMethod` fields as uppercase HTTP methods to align with the `fetch()` behavior. [View the CHANGELOG](https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#futurev7_normalizeformmethod) for more information.

👉 **Enable the Flag**

```
createBrowserRouter(routes, {
  future: {
    v7_normalizeFormMethod: true,
  },
});

```

Copy code to clipboard

**Update your Code**

If any of your code is checking for lowercase HTTP methods, you will need to update it to check for uppercase HTTP methods (or call `toLowerCase()` on it).

👉 **Compare `formMethod` to UPPERCASE**

```
-useNavigation().formMethod === "post"
-useFetcher().formMethod === "get";
+useNavigation().formMethod === "POST"
+useFetcher().formMethod === "GET";

```

Copy code to clipboard

### v7\_partialHydration

If you are not using a `<RouterProvider>` you can skip this

This enables partial hydration of a data router which is primarily used for SSR frameworks, but it is also useful if you are using `lazy` to load your route modules. It's unlikely you need to worry about this, just turn the flag on. [View the CHANGELOG](https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#partial-hydration) for more information.

👉 **Enable the Flag**

```
createBrowserRouter(routes, {
  future: {
    v7_partialHydration: true,
  },
});

```

Copy code to clipboard

**Update your Code**

With partial hydration, you need to provide a `HydrateFallback` component to render during initial hydration. Additionally, if you were using `fallbackElement` before, you need to remove it as it is now deprecated. In most cases, you will want to reuse the `fallbackElement` as the `HydrateFallback`.

👉 **Replace `fallbackElement` with `HydrateFallback`**

```
const router = createBrowserRouter(
  [\
    {\
      path: "/",\
      Component: Layout,\
+      HydrateFallback: Fallback,\
      // or\
+      hydrateFallbackElement: <Fallback />,\
      children: [],\
    },\
  ],
);

<RouterProvider
  router={router}
-  fallbackElement={<Fallback />}
/>

```

Copy code to clipboard

### v7\_skipActionErrorRevalidation

If you are not using a `createBrowserRouter` you can skip this

When this flag is enabled, loaders will no longer revalidate by default after an action throws/returns a `Response` with a `4xx`/ `5xx` status code. You may opt-into revalidation in these scenarios via `shouldRevalidate` and the `actionStatus` parameter.

👉 **Enable the Flag**

```
createBrowserRouter(routes, {
  future: {
    v7_skipActionErrorRevalidation: true,
  },
});

```

Copy code to clipboard

**Update your Code**

In most cases, you probably won't have to make changes to your app code. Usually, if an action errors, it's unlikely data was mutated and needs revalidation. If any of your code _does_ mutate data in action error scenarios you have 2 options:

👉 **Option 1: Change the `action` to avoid mutations in error scenarios**

```
// Before
async function action() {
  await mutateSomeData();
  if (detectError()) {
    throw new Response(error, { status: 400 });
  }
  await mutateOtherData();
  // ...
}

// After
async function action() {
  if (detectError()) {
    throw new Response(error, { status: 400 });
  }
  // All data is now mutated after validations
  await mutateSomeData();
  await mutateOtherData();
  // ...
}

```

Copy code to clipboard

👉 **Option 2: Opt-into revalidation via `shouldRevalidate` and `actionStatus`**

```
async function action() {
  await mutateSomeData();
  if (detectError()) {
    throw new Response(error, { status: 400 });
  }
  await mutateOtherData();
}

async function loader() { ... }

function shouldRevalidate({ actionStatus, defaultShouldRevalidate }) {
  if (actionStatus != null && actionStatus >= 400) {
    // Revalidate this loader when actions return a 4xx/5xx status
    return true;
  }
  return defaultShouldRevalidate;
}

```

Copy code to clipboard

## Deprecations

The `json` and `defer` methods are deprecated in favor of returning raw objects.

```
async function loader() {
- return json({ data });
+ return { data };

```

Copy code to clipboard

If you were using `json` to serialize your data to JSON, you can use the native [Response.json()](https://developer.mozilla.org/en-US/docs/Web/API/Response/json) method instead.

## Upgrade to v7

Now that your app is caught up, you can simply update to v7 (theoretically!) without issue.

👉 **Install v7**

```
npm install react-router-dom@latest

```

Copy code to clipboard

👉 **Replace react-router-dom with react-router**

In v7 we no longer need `"react-router-dom"` as the packages have been simplified. You can import everything from `"react-router"`:

```
npm uninstall react-router-dom
npm install react-router@latest

```

Copy code to clipboard

Note you only need `"react-router"` in your package.json.

👉 **Update imports**

Now you should update your imports to use `react-router`:

```
-import { useLocation } from "react-router-dom";
+import { useLocation } from "react-router";

```

Copy code to clipboard

Instead of manually updating imports, you can use this command. Make sure your git working tree is clean though so you can revert if it doesn't work as expected.

```
find ./path/to/src \( -name "*.tsx" -o -name "*.ts" -o -name "*.js" -o -name "*.jsx" \) -type f -exec sed -i '' 's|from "react-router-dom"|from "react-router"|g' {} +

```

Copy code to clipboard

If you have GNU `sed` installed (most Linux distributions), use this command instead:

```
find ./path/to/src \( -name "*.tsx" -o -name "*.ts" -o -name "*.js" -o -name "*.jsx" \) -type f -exec sed -i 's|from "react-router-dom"|from "react-router"|g' {} +

```

Copy code to clipboard

👉 **Update DOM-specific imports**

`RouterProvider` and `HydratedRouter` come from a deep import because they depend on `"react-dom"`:

```
-import { RouterProvider } from "react-router-dom";
+import { RouterProvider } from "react-router/dom";

```

Copy code to clipboard

Note you should use a top-level import for non-DOM contexts, such as Jest tests:

```
-import { RouterProvider } from "react-router-dom";
+import { RouterProvider } from "react-router";

```

Copy code to clipboard

Congratulations, you're now on v7!

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/upgrading/v6.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

action

On this page

- [`params`](https://reactrouter.com/6.30.0/route/action#params)
- [`request`](https://reactrouter.com/6.30.0/route/action#request)
- [Opt-in serialization types](https://reactrouter.com/6.30.0/route/action#opt-in-serialization-types)
- [Returning Responses](https://reactrouter.com/6.30.0/route/action#returning-responses)
- [Throwing in Actions](https://reactrouter.com/6.30.0/route/action#throwing-in-actions)
- [Handling multiple actions per route](https://reactrouter.com/6.30.0/route/action#handling-multiple-actions-per-route)

- [`params`](https://reactrouter.com/6.30.0/route/action#params)
- [`request`](https://reactrouter.com/6.30.0/route/action#request)
- [Opt-in serialization types](https://reactrouter.com/6.30.0/route/action#opt-in-serialization-types)
- [Returning Responses](https://reactrouter.com/6.30.0/route/action#returning-responses)
- [Throwing in Actions](https://reactrouter.com/6.30.0/route/action#throwing-in-actions)
- [Handling multiple actions per route](https://reactrouter.com/6.30.0/route/action#handling-multiple-actions-per-route)

# `action`

Route actions are the "writes" to route [loader](https://reactrouter.com/6.30.0/route/loader) "reads". They provide a way for apps to perform data mutations with simple HTML and HTTP semantics while React Router abstracts away the complexity of asynchronous UI and revalidation. This gives you the simple mental model of HTML + HTTP (where the browser handles the asynchrony and revalidation) with the behavior and UX capabilities of modern SPAs.

This feature only works if using a data router, see [Picking a Router](https://reactrouter.com/6.30.0/routers/picking-a-router)

```
<Route
  path="/song/:songId/edit"
  element={<EditSong />}
  action={async ({ params, request }) => {
    let formData = await request.formData();
    return fakeUpdateSong(params.songId, formData);
  }}
  loader={({ params }) => {
    return fakeGetSong(params.songId);
  }}
/>

```

Copy code to clipboard

Actions are called whenever the app sends a non-get submission ("post", "put", "patch", "delete") to your route. This can happen in a few ways:

```
// forms
<Form method="post" action="/songs" />;
<fetcher.Form method="put" action="/songs/123/edit" />;

// imperative submissions
let submit = useSubmit();
submit(data, {
  method: "delete",
  action: "/songs/123",
});
fetcher.submit(data, {
  method: "patch",
  action: "/songs/123/edit",
});

```

Copy code to clipboard

## `params`

Route params are parsed from [dynamic segments](https://reactrouter.com/6.30.0/route/route#dynamic-segments) and passed to your action. This is useful for figuring out which resource to mutate:

```
<Route
  path="/projects/:projectId/delete"
  action={({ params }) => {
    return fakeDeleteProject(params.projectId);
  }}
/>

```

Copy code to clipboard

## `request`

This is a [Fetch Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) instance being sent to your route. The most common use case is to parse the [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) from the request

```
<Route
  action={async ({ request }) => {
    let formData = await request.formData();
    // ...
  }}
/>

```

Copy code to clipboard

> A Request?!

It might seem odd at first that actions receive a "request". Have you ever written this line of code?

```
<form
  onSubmit={(event) => {
    event.preventDefault();
    // ...
  }}
/>

```

Copy code to clipboard

What exactly are you preventing?

Without JavaScript, just plain HTML and an HTTP web server, that default event that was prevented is actually pretty great. Browsers will serialize all the data in the form into [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) and send it as the body of a new request to your server. Like the code above, React Router [`<Form>`](https://reactrouter.com/6.30.0/components/form) prevents the browser from sending that request and instead sends the request to your route action! This enables highly dynamic web apps with the simple model of HTML and HTTP.

Remember that the values in the `formData` are automatically serialized from the form submission, so your inputs need a `name`.

```
<Form method="post">
  <input name="songTitle" />
  <textarea name="lyrics" />
  <button type="submit">Save</button>
</Form>;

// accessed by the same names
formData.get("songTitle");
formData.get("lyrics");

```

Copy code to clipboard

For more information on `formData` see [Working with FormData](https://reactrouter.com/6.30.0/guides/form-data).

### Opt-in serialization types

Note that when using [`useSubmit`](https://reactrouter.com/6.30.0/hooks/use-submit) you may also pass `encType: "application/json"` or `encType: "text/plain"` to instead serialize your payload into `request.json()` or `request.text()`.

## Returning Responses

While you can return anything you want from an action and get access to it from [`useActionData`](https://reactrouter.com/6.30.0/hooks/use-action-data), you can also return a web [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response).

For more information, see the [loader documentation](https://reactrouter.com/6.30.0/route/loader#returning-responses).

## Throwing in Actions

You can `throw` in your action to break out of the current call stack (stop running the current code) and React Router will start over down the "error path".

```
<Route
  action={async ({ params, request }) => {
    const res = await fetch(
      `/api/properties/${params.id}`,
      {
        method: "put",
        body: await request.formData(),
      }
    );
    if (!res.ok) throw res;
    return { ok: true };
  }}
/>

```

Copy code to clipboard

For more details and expanded use cases, read the [errorElement](https://reactrouter.com/6.30.0/route/error-element) documentation.

## Handling multiple actions per route

A fairly common question that pops up is _"What if I need to handle multiple different behaviors in my action?"_ There's a few ways to accomplish this, but usually the simplest is to put a `name`/ `value` on your `<button type="submit">` and use that in the action to decide which code to execute (that's right - submitting [buttons](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button) can have name/value attributes!):

```
async function action({ request }) {
  let formData = await request.formData();
  let intent = formData.get("intent");

  if (intent === "edit") {
    await editSong(formData);
    return { ok: true };
  }

  if (intent === "add") {
    await addSong(formData);
    return { ok: true };
  }

  throw json(
    { message: "Invalid intent" },
    { status: 400 }
  );
}

function Component() {
  let song = useLoaderData();

  // When the song exists, show an edit form
  if (song) {
    return (
      <Form method="post">
        <p>Edit song lyrics:</p>
        {/* Edit song inputs */}
        <button type="submit" name="intent" value="edit">
          Edit
        </button>
      </Form>
    );
  }

  // Otherwise show a form to add a new song
  return (
    <Form method="post">
      <p>Add new lyrics:</p>
      {/* Add song inputs */}
      <button type="submit" name="intent" value="add">
        Add
      </button>
    </Form>
  );
}

```

Copy code to clipboard

If a button name/value isn't right for your use case, you could also use a hidden input to send and `intent` or you could submit different HTTP methods via the [`<Form method>`](https://reactrouter.com/6.30.0/components/form#method) prop ( `POST` for add, `PUT`/ `PATCH` for edit, `DELETE` for remove).

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/framework/actions) [dev](https://reactrouter.com/dev/start/framework/actions)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Actions

On this page

- [Client Actions](https://reactrouter.com/start/framework/actions#client-actions)
- [Server Actions](https://reactrouter.com/start/framework/actions#server-actions)
- [Calling Actions](https://reactrouter.com/start/framework/actions#calling-actions)
- [Calling actions with a Form](https://reactrouter.com/start/framework/actions#calling-actions-with-a-form)
- [Calling actions with useSubmit](https://reactrouter.com/start/framework/actions#calling-actions-with-usesubmit)
- [Calling actions with a fetcher](https://reactrouter.com/start/framework/actions#calling-actions-with-a-fetcher)

- [Client Actions](https://reactrouter.com/start/framework/actions#client-actions)
- [Server Actions](https://reactrouter.com/start/framework/actions#server-actions)
- [Calling Actions](https://reactrouter.com/start/framework/actions#calling-actions)
- [Calling actions with a Form](https://reactrouter.com/start/framework/actions#calling-actions-with-a-form)
- [Calling actions with useSubmit](https://reactrouter.com/start/framework/actions#calling-actions-with-usesubmit)
- [Calling actions with a fetcher](https://reactrouter.com/start/framework/actions#calling-actions-with-a-fetcher)

# Actions

Data mutations are done through Route actions. When the action completes, all loader data on the page is revalidated to keep your UI in sync with the data without writing any code to do it.

Route actions defined with `action` are only called on the server while actions defined with `clientAction` are run in the browser.

## Client Actions

Client actions only run in the browser and take priority over a server action when both are defined.

```
// route('/projects/:projectId', './project.tsx')
import type { Route } from "./+types/project";
import { Form } from "react-router";
import { someApi } from "./api";

export async function clientAction({
  request,
}: Route.ClientActionArgs) {
  let formData = await request.formData();
  let title = formData.get("title");
  let project = await someApi.updateProject({ title });
  return project;
}

export default function Project({
  actionData,
}: Route.ComponentProps) {
  return (
    <div>
      <h1>Project</h1>
      <Form method="post">
        <input type="text" name="title" />
        <button type="submit">Submit</button>
      </Form>
      {actionData ? (
        <p>{actionData.title} updated</p>
      ) : null}
    </div>
  );
}

```

Copy code to clipboard

## Server Actions

Server actions only run on the server and are removed from client bundles.

```
// route('/projects/:projectId', './project.tsx')
import type { Route } from "./+types/project";
import { Form } from "react-router";
import { fakeDb } from "../db";

export async function action({
  request,
}: Route.ActionArgs) {
  let formData = await request.formData();
  let title = formData.get("title");
  let project = await fakeDb.updateProject({ title });
  return project;
}

export default function Project({
  actionData,
}: Route.ComponentProps) {
  return (
    <div>
      <h1>Project</h1>
      <Form method="post">
        <input type="text" name="title" />
        <button type="submit">Submit</button>
      </Form>
      {actionData ? (
        <p>{actionData.title} updated</p>
      ) : null}
    </div>
  );
}

```

Copy code to clipboard

## Calling Actions

Actions are called declaratively through `<Form>` and imperatively through `useSubmit` (or `<fetcher.Form>` and `fetcher.submit`) by referencing the route's path and a "post" method.

### Calling actions with a Form

```
import { Form } from "react-router";

function SomeComponent() {
  return (
    <Form action="/projects/123" method="post">
      <input type="text" name="title" />
      <button type="submit">Submit</button>
    </Form>
  );
}

```

Copy code to clipboard

This will cause a navigation and a new entry will be added to the browser history.

### Calling actions with useSubmit

You can submit form data to an action imperatively with `useSubmit`.

```
import { useCallback } from "react";
import { useSubmit } from "react-router";
import { useFakeTimer } from "fake-lib";

function useQuizTimer() {
  let submit = useSubmit();

  let cb = useCallback(() => {
    submit(
      { quizTimedOut: true },
      { action: "/end-quiz", method: "post" }
    );
  }, []);

  let tenMinutes = 10 * 60 * 1000;
  useFakeTimer(tenMinutes, cb);
}

```

Copy code to clipboard

This will cause a navigation and a new entry will be added to the browser history.

### Calling actions with a fetcher

Fetchers allow you to submit data to actions (and loaders) without causing a navigation (no new entries in the browser history).

```
import { useFetcher } from "react-router";

function Task() {
  let fetcher = useFetcher();
  let busy = fetcher.state !== "idle";

  return (
    <fetcher.Form method="post" action="/update-task/123">
      <input type="text" name="title" />
      <button type="submit">
        {busy ? "Saving..." : "Save"}
      </button>
    </fetcher.Form>
  );
}

```

Copy code to clipboard

They also have the imperative `submit` method.

```
fetcher.submit(
  { title: "New Title" },
  { action: "/update-task/123", method: "post" }
);

```

Copy code to clipboard

See the [Using Fetchers](https://reactrouter.com/how-to/fetchers) guide for more information.

* * *

Next: [Navigating](https://reactrouter.com/start/framework/navigating)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/framework/actions.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.29.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Server-Side Rendering

# Server Side Rendering

The most basic server rendering in React Router is pretty straightforward. However, there's a lot more to consider than just getting the right routes to render. Here's an incomplete list of things you'll need to handle:

- Bundling your code for the server and the browser
- Not bundling server-only code into the browser bundles
- Code splitting that works on the server and in the browser
- Server Side data loading so you actually have something to render
- Data loading strategies that work on the client and server
- Handling code splitting in the server and client
- Proper HTTP status codes and redirects
- Environment variables and secrets
- Deployment

Setting all of this up well can be pretty involved but is worth the performance and UX characteristics you can only get when server rendering.

If you want to server render your React Router app, we highly recommend you use [Remix](https://remix.run/). This is another project of ours that's built on top of React Router and handles all of the things mentioned above and more. Give it a shot!

If you want to tackle it on your own, you'll need to use `<StaticRouterProvider>` or `<StaticRouter>` on the server, depending on your choice of [router](https://reactrouter.com/6.29.0/routers/picking-a-router). If using `<StaticRouter>`, please jump down to the [Without a Data Router](https://reactrouter.com/6.29.0/guides/ssr#without-a-data-router) section.

## With a Data Router

First, you'll need to define your routes for the data router, these routes will be used both on the server and in the client:

```
const React = require("react");
const { json, useLoaderData } = require("react-router-dom");

const routes = [\
  {\
    path: "/",\
    loader() {\
      return json({ message: "Welcome to React Router!" });\
    },\
    Component() {\
      let data = useLoaderData();\
      return <h1>{data.message}</h1>;\
    },\
  },\
];

module.exports = routes;

```

Copy code to clipboard

We are using CJS modules in these examples for simplicity on the server but generally you'll use ESM modules and leverage a bundler such as `esbuild`, `vite`, or `webpack`.

With our routes defined, we can create a handler in our express server and load data for the routes using `createStaticHandler()`. Remember that the primary goal of a data router is decoupling the data fetching from rendering, so you'll see that when server-rendering with a data router we have distinct steps for fetching and rendering.

```
const express = require("express");
const {
  createStaticHandler,
} = require("react-router-dom/server");

const createFetchRequest = require("./request");
const routes = require("./routes");

const app = express();

let handler = createStaticHandler(routes);

app.get("*", async (req, res) => {
  let fetchRequest = createFetchRequest(req, res);
  let context = await handler.query(fetchRequest);

  // We'll tackle rendering next...
});

const listener = app.listen(3000, () => {
  let { port } = listener.address();
  console.log(`Listening on port ${port}`);
});

```

Copy code to clipboard

Note we have to first convert the incoming Express request into a Fetch request, which is what the static handler methods operate on. The `createFetchRequest` method is specific to an Express request and in this example is extracted from the `@remix-run/express` adapter:

```
module.exports = function createFetchRequest(req, res) {
  let origin = `${req.protocol}://${req.get("host")}`;
  // Note: This had to take originalUrl into account for presumably vite's proxying
  let url = new URL(req.originalUrl || req.url, origin);

  let controller = new AbortController();
  res.on("close", () => controller.abort());

  let headers = new Headers();

  for (let [key, values] of Object.entries(req.headers)) {
    if (values) {
      if (Array.isArray(values)) {
        for (let value of values) {
          headers.append(key, value);
        }
      } else {
        headers.set(key, values);
      }
    }
  }

  let init = {
    method: req.method,
    headers,
    signal: controller.signal,
  };

  if (req.method !== "GET" && req.method !== "HEAD") {
    init.body = req.body;
  }

  return new Request(url.href, init);
};

```

Copy code to clipboard

Once we've loaded our data by executing all of the matched route loaders for the incoming request, we use `createStaticRouter()` and `<StaticRouterProvider>` to render the HTML and send a response back to the browser:

```
app.get("*", async (req, res) => {
  let fetchRequest = createFetchRequest(req, res);
  let context = await handler.query(fetchRequest);

  let router = createStaticRouter(
    handler.dataRoutes,
    context
  );
  let html = ReactDOMServer.renderToString(
    <StaticRouterProvider
      router={router}
      context={context}
    />
  );

  res.send("<!DOCTYPE html>" + html);
});

```

Copy code to clipboard

We use [`renderToString`](https://react.dev/reference/react-dom/server/renderToString) here for simplicity since we've already loaded our data in `handler.query` and we're not using any streaming features in this simple example. If you need to support streaming features, you would need to use [`renderToPipeableStream`](https://react.dev/reference/react-dom/server/renderToPipeableStream).

If you wish to support [`defer`](https://reactrouter.com/6.29.0/utils/defer), you will also need to manage serializing the server-side Promises over the wire to the client (hint, just use [Remix](https://remix.run/) where this is handled for you via the `Scripts` component 😉).

Once we've sent the HTML back to the browser, we'll need to "hydrate" the application on the client using `createBrowserRouter()` and `<RouterProvider>`:

```
import * as React from "react";
import * as ReactDOM from "react-dom/client";
import {
  createBrowserRouter,
  RouterProvider,
} from "react-router-dom";

import { routes } from "./routes";

let router = createBrowserRouter(routes);

ReactDOM.hydrateRoot(
  document.getElementById("app"),
  <RouterProvider router={router} />
);

```

Copy code to clipboard

And with that you've got a server-side-rendered and hydrated application! For a working example, you may also refer to the [example](https://github.com/remix-run/react-router/tree/main/examples/ssr-data-router) in the Github repository.

### Additional Concepts

As mentioned above, server-side rendering is tricky at scale and for production-grade applications, and we strongly recommend checking out [Remix](https://remix.run/) if that's your goal. But if you are going the manual route, here's a few additional concepts you may need to consider:

#### Hydration

A core concept of Server Side Rendering is [hydration](https://react.dev/reference/react-dom/client/hydrateRoot) which involves "attaching" a client-side React application to server-rendered HTML. To do this correctly, we need to create our client-side React Router application in the same state that it was in during the server render. When your server render loaded data via `loader` functions, we need to send this data up so that we can create our client router with the same loader data for the initial render/hydration.

The basic usages of `<StaticRouterProvider>` and `createBrowserRouter` shown in this guide handle this for you internally, but if you need to take control over the hydration process you can disable the automatic hydration process via [`<StaticRouterProvider hydrate={false} />`](https://reactrouter.com/6.29.0/routers/static-router-provider#hydrate).

In some advanced use cases, you may want to partially hydrate a client-side React Router application. You can do this via the [`future.v7_partialHydration`](https://reactrouter.com/6.29.0/routers/create-browser-router#partial-hydration-data) flag passed to `createBrowserRouter`.

#### Redirects

If any loaders redirect, `handler.query` will return the `Response` directly so you should check that and send a redirect response instead of attempting to render an HTML document:

```
app.get("*", async (req, res) => {
  let fetchRequest = createFetchRequest(req, res);
  let context = await handler.query(fetchRequest);

  if (
    context instanceof Response &&
    [301, 302, 303, 307, 308].includes(context.status)
  ) {
    return res.redirect(
      context.status,
      context.headers.get("Location")
    );
  }

  // Render HTML...
});

```

Copy code to clipboard

#### Lazy Routes

If you're using [`route.lazy`](https://reactrouter.com/6.29.0/route/lazy) in your routes, then on the client it's possible you have all the data you need to hydrate, but you don't yet have the route definitions! Ideally, your setup would determine the matched routes on the server and deliver their route bundles on the critical path such that you don't use `lazy` on your initially matched routes. However, if this is not the case you'll need to load these routes and update them in place _prior_ to hydrating to avoid the router falling back to a loading state:

```
// Determine if any of the initial routes are lazy
let lazyMatches = matchRoutes(
  routes,
  window.location
)?.filter((m) => m.route.lazy);

// Load the lazy matches and update the routes before creating your router
// so we can hydrate the SSR-rendered content synchronously
if (lazyMatches && lazyMatches?.length > 0) {
  await Promise.all(
    lazyMatches.map(async (m) => {
      let routeModule = await m.route.lazy();
      Object.assign(m.route, {
        ...routeModule,
        lazy: undefined,
      });
    })
  );
}

let router = createBrowserRouter(routes);

ReactDOM.hydrateRoot(
  document.getElementById("app"),
  <RouterProvider router={router} fallbackElement={null} />
);

```

Copy code to clipboard

See also:

- [`createStaticHandler`](https://reactrouter.com/6.29.0/routers/create-static-handler)
- [`createStaticRouter`](https://reactrouter.com/6.29.0/routers/create-static-router)
- [`<StaticRouterProvider>`](https://reactrouter.com/6.29.0/routers/static-router-provider)

## Without a Data Router

First you'll need some sort of "app" or "root" component that gets rendered on the server and in the browser:

```
export default function App() {
  return (
    <html>
      <head>
        <title>Server Rendered App</title>
      </head>
      <body>
        <Routes>
          <Route path="/" element={<div>Home</div>} />
          <Route path="/about" element={<div>About</div>} />
        </Routes>
        <script src="/build/client.entry.js" />
      </body>
    </html>
  );
}

```

Copy code to clipboard

Here's a simple express server that renders the app on the server. Note the use of `StaticRouter`.

```
import express from "express";
import ReactDOMServer from "react-dom/server";
import { StaticRouter } from "react-router-dom/server";
import App from "./App";

let app = express();

app.get("*", (req, res) => {
  let html = ReactDOMServer.renderToString(
    <StaticRouter location={req.url}>
      <App />
    </StaticRouter>
  );
  res.send("<!DOCTYPE html>" + html);
});

app.listen(3000);

```

Copy code to clipboard

We use [`renderToString`](https://react.dev/reference/react-dom/server/renderToString) here for simplicity since we're not using any streaming features in this simple example. If you need to support streaming features, you would need to use [`renderToPipeableStream`](https://react.dev/reference/react-dom/server/renderToPipeableStream).

And finally, you'll need a similar file to "hydrate" the app with your JavaScript bundle that includes the very same `App` component. Note the use of `BrowserRouter` instead of `StaticRouter`.

```
import * as ReactDOM from "react-dom";
import { BrowserRouter } from "react-router-dom";
import App from "./App";

ReactDOM.hydrate(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  document.documentElement
);

```

Copy code to clipboard

The only real differences from the client entry are:

- `StaticRouter` instead of `BrowserRouter`
- passing the URL from the server to `<StaticRouter url>`
- Using `ReactDOMServer.renderToString` instead of `ReactDOM.render`.

Some parts you'll need to do yourself for this to work:

- How to bundle the code to work in the browser and server
- How to know where the client entry is for `<script>` in the `<App>` component.
- Figuring out data loading (especially for the `<title>`).

Again, we recommend you give [Remix](https://remix.run/) a look. It's the best way to server render a React Router app--and perhaps the best way to build any React app 😉.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.29.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

CHANGELOG.md

On this page

- [v6.29.0](https://reactrouter.com/6.29.0/start/changelog#v6290)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes)
- [v6.28.2](https://reactrouter.com/6.29.0/start/changelog#v6282)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-1)
- [v6.28.1](https://reactrouter.com/6.29.0/start/changelog#v6281)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-2)
- [v6.28.0](https://reactrouter.com/6.29.0/start/changelog#v6280)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-1)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-3)
- [v6.27.0](https://reactrouter.com/6.29.0/start/changelog#v6270)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-1)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-2)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-4)
- [v6.26.2](https://reactrouter.com/6.29.0/start/changelog#v6262)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-5)
- [v6.26.1](https://reactrouter.com/6.29.0/start/changelog#v6261)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-6)
- [v6.26.0](https://reactrouter.com/6.29.0/start/changelog#v6260)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-3)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-7)
- [v6.25.1](https://reactrouter.com/6.29.0/start/changelog#v6251)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-8)
- [v6.25.0](https://reactrouter.com/6.29.0/start/changelog#v6250)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-2)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-4)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-9)
- [v6.24.1](https://reactrouter.com/6.29.0/start/changelog#v6241)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-10)
- [v6.24.0](https://reactrouter.com/6.29.0/start/changelog#v6240)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-3)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-5)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-11)
- [v6.23.1](https://reactrouter.com/6.29.0/start/changelog#v6231)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-12)
- [v6.23.0](https://reactrouter.com/6.29.0/start/changelog#v6230)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-4)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-6)
- [v6.22.3](https://reactrouter.com/6.29.0/start/changelog#v6223)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-13)
- [v6.22.2](https://reactrouter.com/6.29.0/start/changelog#v6222)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-14)
- [v6.22.1](https://reactrouter.com/6.29.0/start/changelog#v6221)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-15)
- [v6.22.0](https://reactrouter.com/6.29.0/start/changelog#v6220)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-5)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-7)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-16)
- [v6.21.3](https://reactrouter.com/6.29.0/start/changelog#v6213)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-17)
- [v6.21.2](https://reactrouter.com/6.29.0/start/changelog#v6212)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-18)
- [v6.21.1](https://reactrouter.com/6.29.0/start/changelog#v6211)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-19)
- [v6.21.0](https://reactrouter.com/6.29.0/start/changelog#v6210)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-6)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-8)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-20)
- [v6.20.1](https://reactrouter.com/6.29.0/start/changelog#v6201)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-21)
- [v6.20.0](https://reactrouter.com/6.29.0/start/changelog#v6200)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-9)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-22)
- [v6.19.0](https://reactrouter.com/6.29.0/start/changelog#v6190)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-7)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-10)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-23)
- [v6.18.0](https://reactrouter.com/6.29.0/start/changelog#v6180)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-8)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-11)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-24)
- [v6.17.0](https://reactrouter.com/6.29.0/start/changelog#v6170)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-9)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-12)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-25)
- [v6.16.0](https://reactrouter.com/6.29.0/start/changelog#v6160)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-13)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-26)
- [v6.15.0](https://reactrouter.com/6.29.0/start/changelog#v6150)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-14)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-27)
- [v6.14.2](https://reactrouter.com/6.29.0/start/changelog#v6142)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-28)
- [v6.14.1](https://reactrouter.com/6.29.0/start/changelog#v6141)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-29)
- [v6.14.0](https://reactrouter.com/6.29.0/start/changelog#v6140)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-10)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-15)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-30)
- [v6.13.0](https://reactrouter.com/6.29.0/start/changelog#v6130)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-11)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-16)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-31)
- [v6.12.1](https://reactrouter.com/6.29.0/start/changelog#v6121)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-32)
- [v6.12.0](https://reactrouter.com/6.29.0/start/changelog#v6120)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-12)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-17)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-33)
- [v6.11.2](https://reactrouter.com/6.29.0/start/changelog#v6112)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-34)
- [v6.11.1](https://reactrouter.com/6.29.0/start/changelog#v6111)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-35)
- [v6.11.0](https://reactrouter.com/6.29.0/start/changelog#v6110)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-18)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-36)
- [v6.10.0](https://reactrouter.com/6.29.0/start/changelog#v6100)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-13)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-19)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-37)
- [v6.9.0](https://reactrouter.com/6.29.0/start/changelog#v690)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-14)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-20)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-38)
- [v6.8.2](https://reactrouter.com/6.29.0/start/changelog#v682)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-39)
- [v6.8.1](https://reactrouter.com/6.29.0/start/changelog#v681)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-40)
- [v6.8.0](https://reactrouter.com/6.29.0/start/changelog#v680)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-21)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-41)
- [v6.7.0](https://reactrouter.com/6.29.0/start/changelog#v670)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-22)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-42)
- [v6.6.2](https://reactrouter.com/6.29.0/start/changelog#v662)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-43)
- [v6.6.1](https://reactrouter.com/6.29.0/start/changelog#v661)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-44)
- [v6.6.0](https://reactrouter.com/6.29.0/start/changelog#v660)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-15)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-23)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-45)
- [v6.5.0](https://reactrouter.com/6.29.0/start/changelog#v650)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-16)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-24)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-46)
- [v6.4.5](https://reactrouter.com/6.29.0/start/changelog#v645)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-47)
- [v6.4.4](https://reactrouter.com/6.29.0/start/changelog#v644)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-48)
- [v6.4.3](https://reactrouter.com/6.29.0/start/changelog#v643)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-49)
- [v6.4.2](https://reactrouter.com/6.29.0/start/changelog#v642)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-50)
- [v6.4.1](https://reactrouter.com/6.29.0/start/changelog#v641)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-51)
- [v6.4.0](https://reactrouter.com/6.29.0/start/changelog#v640)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-17)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-52)
- [v6.3.0](https://reactrouter.com/6.29.0/start/changelog#v630)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-25)
- [v6.2.2](https://reactrouter.com/6.29.0/start/changelog#v622)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-53)
- [v6.2.1](https://reactrouter.com/6.29.0/start/changelog#v621)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-54)
- [v6.2.0](https://reactrouter.com/6.29.0/start/changelog#v620)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-26)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-55)
- [v6.1.1](https://reactrouter.com/6.29.0/start/changelog#v611)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-56)
- [v6.1.0](https://reactrouter.com/6.29.0/start/changelog#v610)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-27)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-57)
- [v6.0.2](https://reactrouter.com/6.29.0/start/changelog#v602)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-58)
- [v6.0.1](https://reactrouter.com/6.29.0/start/changelog#v601)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-59)
- [v6.0.0](https://reactrouter.com/6.29.0/start/changelog#v600)

- [v6.29.0](https://reactrouter.com/6.29.0/start/changelog#v6290)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes)
- [v6.28.2](https://reactrouter.com/6.29.0/start/changelog#v6282)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-1)
- [v6.28.1](https://reactrouter.com/6.29.0/start/changelog#v6281)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-2)
- [v6.28.0](https://reactrouter.com/6.29.0/start/changelog#v6280)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-1)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-3)
- [v6.27.0](https://reactrouter.com/6.29.0/start/changelog#v6270)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-1)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-2)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-4)
- [v6.26.2](https://reactrouter.com/6.29.0/start/changelog#v6262)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-5)
- [v6.26.1](https://reactrouter.com/6.29.0/start/changelog#v6261)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-6)
- [v6.26.0](https://reactrouter.com/6.29.0/start/changelog#v6260)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-3)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-7)
- [v6.25.1](https://reactrouter.com/6.29.0/start/changelog#v6251)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-8)
- [v6.25.0](https://reactrouter.com/6.29.0/start/changelog#v6250)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-2)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-4)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-9)
- [v6.24.1](https://reactrouter.com/6.29.0/start/changelog#v6241)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-10)
- [v6.24.0](https://reactrouter.com/6.29.0/start/changelog#v6240)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-3)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-5)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-11)
- [v6.23.1](https://reactrouter.com/6.29.0/start/changelog#v6231)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-12)
- [v6.23.0](https://reactrouter.com/6.29.0/start/changelog#v6230)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-4)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-6)
- [v6.22.3](https://reactrouter.com/6.29.0/start/changelog#v6223)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-13)
- [v6.22.2](https://reactrouter.com/6.29.0/start/changelog#v6222)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-14)
- [v6.22.1](https://reactrouter.com/6.29.0/start/changelog#v6221)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-15)
- [v6.22.0](https://reactrouter.com/6.29.0/start/changelog#v6220)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-5)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-7)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-16)
- [v6.21.3](https://reactrouter.com/6.29.0/start/changelog#v6213)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-17)
- [v6.21.2](https://reactrouter.com/6.29.0/start/changelog#v6212)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-18)
- [v6.21.1](https://reactrouter.com/6.29.0/start/changelog#v6211)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-19)
- [v6.21.0](https://reactrouter.com/6.29.0/start/changelog#v6210)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-6)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-8)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-20)
- [v6.20.1](https://reactrouter.com/6.29.0/start/changelog#v6201)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-21)
- [v6.20.0](https://reactrouter.com/6.29.0/start/changelog#v6200)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-9)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-22)
- [v6.19.0](https://reactrouter.com/6.29.0/start/changelog#v6190)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-7)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-10)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-23)
- [v6.18.0](https://reactrouter.com/6.29.0/start/changelog#v6180)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-8)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-11)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-24)
- [v6.17.0](https://reactrouter.com/6.29.0/start/changelog#v6170)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-9)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-12)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-25)
- [v6.16.0](https://reactrouter.com/6.29.0/start/changelog#v6160)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-13)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-26)
- [v6.15.0](https://reactrouter.com/6.29.0/start/changelog#v6150)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-14)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-27)
- [v6.14.2](https://reactrouter.com/6.29.0/start/changelog#v6142)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-28)
- [v6.14.1](https://reactrouter.com/6.29.0/start/changelog#v6141)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-29)
- [v6.14.0](https://reactrouter.com/6.29.0/start/changelog#v6140)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-10)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-15)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-30)
- [v6.13.0](https://reactrouter.com/6.29.0/start/changelog#v6130)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-11)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-16)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-31)
- [v6.12.1](https://reactrouter.com/6.29.0/start/changelog#v6121)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-32)
- [v6.12.0](https://reactrouter.com/6.29.0/start/changelog#v6120)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-12)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-17)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-33)
- [v6.11.2](https://reactrouter.com/6.29.0/start/changelog#v6112)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-34)
- [v6.11.1](https://reactrouter.com/6.29.0/start/changelog#v6111)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-35)
- [v6.11.0](https://reactrouter.com/6.29.0/start/changelog#v6110)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-18)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-36)
- [v6.10.0](https://reactrouter.com/6.29.0/start/changelog#v6100)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-13)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-19)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-37)
- [v6.9.0](https://reactrouter.com/6.29.0/start/changelog#v690)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-14)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-20)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-38)
- [v6.8.2](https://reactrouter.com/6.29.0/start/changelog#v682)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-39)
- [v6.8.1](https://reactrouter.com/6.29.0/start/changelog#v681)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-40)
- [v6.8.0](https://reactrouter.com/6.29.0/start/changelog#v680)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-21)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-41)
- [v6.7.0](https://reactrouter.com/6.29.0/start/changelog#v670)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-22)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-42)
- [v6.6.2](https://reactrouter.com/6.29.0/start/changelog#v662)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-43)
- [v6.6.1](https://reactrouter.com/6.29.0/start/changelog#v661)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-44)
- [v6.6.0](https://reactrouter.com/6.29.0/start/changelog#v660)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-15)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-23)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-45)
- [v6.5.0](https://reactrouter.com/6.29.0/start/changelog#v650)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-16)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-24)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-46)
- [v6.4.5](https://reactrouter.com/6.29.0/start/changelog#v645)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-47)
- [v6.4.4](https://reactrouter.com/6.29.0/start/changelog#v644)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-48)
- [v6.4.3](https://reactrouter.com/6.29.0/start/changelog#v643)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-49)
- [v6.4.2](https://reactrouter.com/6.29.0/start/changelog#v642)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-50)
- [v6.4.1](https://reactrouter.com/6.29.0/start/changelog#v641)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-51)
- [v6.4.0](https://reactrouter.com/6.29.0/start/changelog#v640)
- [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-17)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-52)
- [v6.3.0](https://reactrouter.com/6.29.0/start/changelog#v630)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-25)
- [v6.2.2](https://reactrouter.com/6.29.0/start/changelog#v622)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-53)
- [v6.2.1](https://reactrouter.com/6.29.0/start/changelog#v621)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-54)
- [v6.2.0](https://reactrouter.com/6.29.0/start/changelog#v620)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-26)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-55)
- [v6.1.1](https://reactrouter.com/6.29.0/start/changelog#v611)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-56)
- [v6.1.0](https://reactrouter.com/6.29.0/start/changelog#v610)
- [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-27)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-57)
- [v6.0.2](https://reactrouter.com/6.29.0/start/changelog#v602)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-58)
- [v6.0.1](https://reactrouter.com/6.29.0/start/changelog#v601)
- [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-59)
- [v6.0.0](https://reactrouter.com/6.29.0/start/changelog#v600)

# React Router Releases

This page lists all releases/release notes for React Router back to `v6.0.0`. For releases prior to v6, please refer to the [Github Releases Page](https://github.com/remix-run/react-router/releases).

We manage release notes in this file instead of the paginated Github Releases Page for 2 reasons:

- Pagination in the Github UI means that you cannot easily search release notes for a large span of releases at once
- The paginated Github interface also cuts off longer releases notes without indication in list view, and you need to click into the detail view to see the full set of release notes

Table of Contents

- [React Router Releases](https://reactrouter.com/6.29.0/start/changelog#react-router-releases)
  - [v6.29.0](https://reactrouter.com/6.29.0/start/changelog#v6290)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes)
  - [v6.28.2](https://reactrouter.com/6.29.0/start/changelog#v6282)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-1)
  - [v6.28.1](https://reactrouter.com/6.29.0/start/changelog#v6281)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-2)
  - [v6.28.0](https://reactrouter.com/6.29.0/start/changelog#v6280)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-1)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-3)
  - [v6.27.0](https://reactrouter.com/6.29.0/start/changelog#v6270)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-1)
      - [Stabilized APIs](https://reactrouter.com/6.29.0/start/changelog#stabilized-apis)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-2)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-4)
  - [v6.26.2](https://reactrouter.com/6.29.0/start/changelog#v6262)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-5)
  - [v6.26.1](https://reactrouter.com/6.29.0/start/changelog#v6261)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-6)
  - [v6.26.0](https://reactrouter.com/6.29.0/start/changelog#v6260)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-3)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-7)
  - [v6.25.1](https://reactrouter.com/6.29.0/start/changelog#v6251)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-8)
  - [v6.25.0](https://reactrouter.com/6.29.0/start/changelog#v6250)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-2)
      - [Stabilized `v7_skipActionErrorRevalidation`](https://reactrouter.com/6.29.0/start/changelog#stabilized-v7_skipactionerrorrevalidation)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-4)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-9)
  - [v6.24.1](https://reactrouter.com/6.29.0/start/changelog#v6241)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-10)
  - [v6.24.0](https://reactrouter.com/6.29.0/start/changelog#v6240)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-3)
      - [Lazy Route Discovery (a.k.a. "Fog of War")](https://reactrouter.com/6.29.0/start/changelog#lazy-route-discovery-aka-fog-of-war)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-5)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-11)
  - [v6.23.1](https://reactrouter.com/6.29.0/start/changelog#v6231)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-12)
  - [v6.23.0](https://reactrouter.com/6.29.0/start/changelog#v6230)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-4)
      - [Data Strategy (unstable)](https://reactrouter.com/6.29.0/start/changelog#data-strategy-unstable)
      - [Skip Action Error Revalidation (unstable)](https://reactrouter.com/6.29.0/start/changelog#skip-action-error-revalidation-unstable)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-6)
  - [v6.22.3](https://reactrouter.com/6.29.0/start/changelog#v6223)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-13)
  - [v6.22.2](https://reactrouter.com/6.29.0/start/changelog#v6222)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-14)
  - [v6.22.1](https://reactrouter.com/6.29.0/start/changelog#v6221)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-15)
  - [v6.22.0](https://reactrouter.com/6.29.0/start/changelog#v6220)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-5)
      - [Core Web Vitals Technology Report Flag](https://reactrouter.com/6.29.0/start/changelog#core-web-vitals-technology-report-flag)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-7)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-16)
  - [v6.21.3](https://reactrouter.com/6.29.0/start/changelog#v6213)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-17)
  - [v6.21.2](https://reactrouter.com/6.29.0/start/changelog#v6212)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-18)
  - [v6.21.1](https://reactrouter.com/6.29.0/start/changelog#v6211)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-19)
  - [v6.21.0](https://reactrouter.com/6.29.0/start/changelog#v6210)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-6)
      - [`future.v7_relativeSplatPath`](https://reactrouter.com/6.29.0/start/changelog#futurev7_relativesplatpath)
      - [Partial Hydration](https://reactrouter.com/6.29.0/start/changelog#partial-hydration)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-8)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-20)
  - [v6.20.1](https://reactrouter.com/6.29.0/start/changelog#v6201)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-21)
  - [v6.20.0](https://reactrouter.com/6.29.0/start/changelog#v6200)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-9)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-22)
  - [v6.19.0](https://reactrouter.com/6.29.0/start/changelog#v6190)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-7)
      - [`unstable_flushSync` API](https://reactrouter.com/6.29.0/start/changelog#unstable_flushsync-api)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-10)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-23)
  - [v6.18.0](https://reactrouter.com/6.29.0/start/changelog#v6180)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-8)
      - [New Fetcher APIs](https://reactrouter.com/6.29.0/start/changelog#new-fetcher-apis)
      - [Persistence Future Flag ( `future.v7_fetcherPersist`)](https://reactrouter.com/6.29.0/start/changelog#persistence-future-flag-futurev7_fetcherpersist)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-11)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-24)
  - [v6.17.0](https://reactrouter.com/6.29.0/start/changelog#v6170)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-9)
      - [View Transitions 🚀](https://reactrouter.com/6.29.0/start/changelog#view-transitions-)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-12)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-25)
  - [v6.16.0](https://reactrouter.com/6.29.0/start/changelog#v6160)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-13)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-26)
  - [v6.15.0](https://reactrouter.com/6.29.0/start/changelog#v6150)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-14)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-27)
  - [v6.14.2](https://reactrouter.com/6.29.0/start/changelog#v6142)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-28)
  - [v6.14.1](https://reactrouter.com/6.29.0/start/changelog#v6141)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-29)
  - [v6.14.0](https://reactrouter.com/6.29.0/start/changelog#v6140)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-10)
      - [JSON/Text Submissions](https://reactrouter.com/6.29.0/start/changelog#jsontext-submissions)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-15)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-30)
  - [v6.13.0](https://reactrouter.com/6.29.0/start/changelog#v6130)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-11)
      - [`future.v7_startTransition`](https://reactrouter.com/6.29.0/start/changelog#futurev7_starttransition)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-16)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-31)
  - [v6.12.1](https://reactrouter.com/6.29.0/start/changelog#v6121)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-32)
  - [v6.12.0](https://reactrouter.com/6.29.0/start/changelog#v6120)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-12)
      - [`React.startTransition` support](https://reactrouter.com/6.29.0/start/changelog#reactstarttransition-support)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-17)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-33)
  - [v6.11.2](https://reactrouter.com/6.29.0/start/changelog#v6112)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-34)
  - [v6.11.1](https://reactrouter.com/6.29.0/start/changelog#v6111)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-35)
  - [v6.11.0](https://reactrouter.com/6.29.0/start/changelog#v6110)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-18)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-36)
  - [v6.10.0](https://reactrouter.com/6.29.0/start/changelog#v6100)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-13)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-19)
      - [`future.v7_normalizeFormMethod`](https://reactrouter.com/6.29.0/start/changelog#futurev7_normalizeformmethod)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-37)
  - [v6.9.0](https://reactrouter.com/6.29.0/start/changelog#v690)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-14)
      - [`Component`/ `ErrorBoundary` route properties](https://reactrouter.com/6.29.0/start/changelog#componenterrorboundary-route-properties)
      - [Introducing Lazy Route Modules](https://reactrouter.com/6.29.0/start/changelog#introducing-lazy-route-modules)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-20)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-38)
  - [v6.8.2](https://reactrouter.com/6.29.0/start/changelog#v682)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-39)
  - [v6.8.1](https://reactrouter.com/6.29.0/start/changelog#v681)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-40)
  - [v6.8.0](https://reactrouter.com/6.29.0/start/changelog#v680)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-21)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-41)
  - [v6.7.0](https://reactrouter.com/6.29.0/start/changelog#v670)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-22)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-42)
  - [v6.6.2](https://reactrouter.com/6.29.0/start/changelog#v662)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-43)
  - [v6.6.1](https://reactrouter.com/6.29.0/start/changelog#v661)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-44)
  - [v6.6.0](https://reactrouter.com/6.29.0/start/changelog#v660)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-15)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-23)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-45)
  - [v6.5.0](https://reactrouter.com/6.29.0/start/changelog#v650)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-16)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-24)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-46)
  - [v6.4.5](https://reactrouter.com/6.29.0/start/changelog#v645)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-47)
  - [v6.4.4](https://reactrouter.com/6.29.0/start/changelog#v644)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-48)
  - [v6.4.3](https://reactrouter.com/6.29.0/start/changelog#v643)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-49)
  - [v6.4.2](https://reactrouter.com/6.29.0/start/changelog#v642)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-50)
  - [v6.4.1](https://reactrouter.com/6.29.0/start/changelog#v641)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-51)
  - [v6.4.0](https://reactrouter.com/6.29.0/start/changelog#v640)
    - [What's Changed](https://reactrouter.com/6.29.0/start/changelog#whats-changed-17)
      - [Remix Data APIs](https://reactrouter.com/6.29.0/start/changelog#remix-data-apis)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-52)
  - [v6.3.0](https://reactrouter.com/6.29.0/start/changelog#v630)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-25)
  - [v6.2.2](https://reactrouter.com/6.29.0/start/changelog#v622)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-53)
  - [v6.2.1](https://reactrouter.com/6.29.0/start/changelog#v621)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-54)
  - [v6.2.0](https://reactrouter.com/6.29.0/start/changelog#v620)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-26)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-55)
  - [v6.1.1](https://reactrouter.com/6.29.0/start/changelog#v611)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-56)
  - [v6.1.0](https://reactrouter.com/6.29.0/start/changelog#v610)
    - [Minor Changes](https://reactrouter.com/6.29.0/start/changelog#minor-changes-27)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-57)
  - [v6.0.2](https://reactrouter.com/6.29.0/start/changelog#v602)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-58)
  - [v6.0.1](https://reactrouter.com/6.29.0/start/changelog#v601)
    - [Patch Changes](https://reactrouter.com/6.29.0/start/changelog#patch-changes-59)
  - [v6.0.0](https://reactrouter.com/6.29.0/start/changelog#v600)

## v6.29.0

Date: 2025-01-30

### Minor Changes

- Provide the request `signal` as a parameter to `patchRoutesOnNavigation` ( [#12900](https://github.com/remix-run/react-router/pull/12900))

  - This can be used to abort any manifest fetches if the in-flight navigation/fetcher is aborted

### Patch Changes

- Do not log v7 deprecation warnings in production builds ( [#12794](https://github.com/remix-run/react-router/pull/12794))
- Properly bubble headers when throwing a `data()` result ( [#12845](https://github.com/remix-run/react-router/pull/12845))
- Optimize route matching by skipping redundant `matchRoutes` calls when possible ( [#12169](https://github.com/remix-run/react-router/pull/12169))
- Strip search parameters from `patchRoutesOnNavigation` `path` param for fetcher calls ( [#12899](https://github.com/remix-run/react-router/pull/12899))

**Full Changelog**: [`v6.28.2...v6.29.0`](https://github.com/remix-run/react-router/compare/react-router@6.28.2...react-router@6.29.0)

## v6.28.2

Date: 2025-01-16

### Patch Changes

- Fix manual fetcher `key` usage when not opted into `future.v7_fetcherPersist` ( [#12674](https://github.com/remix-run/react-router/pull/12674))
- Fix issue with fetcher data cleanup in the data layer on fetcher unmount ( [#12674](https://github.com/remix-run/react-router/pull/12674))

**Full Changelog**: [`v6.28.1...v6.28.2`](https://github.com/remix-run/react-router/compare/react-router@6.28.1...react-router@6.28.2)

## v6.28.1

Date: 2024-12-20

### Patch Changes

- Allow users to opt out of v7 deprecation warnings by setting flags to `false` ( [#12441](https://github.com/remix-run/react-router/pull/12441))

**Full Changelog**: [`v6.28.0...v6.28.1`](https://github.com/remix-run/react-router/compare/react-router@6.28.0...react-router@6.28.1)

## v6.28.0

Date: 2024-11-06

### What's Changed

- In preparation for v7 we've added deprecation warnings for any future flags that you have not yet opted into. Please use the flags to better prepare for eventually upgrading to v7.

### Minor Changes

- Log deprecation warnings for v7 flags ( [#11750](https://github.com/remix-run/react-router/pull/11750))

  - Add deprecation warnings to `json`/ `defer` in favor of returning raw objects

    - These methods will be removed in React Router v7

### Patch Changes

- Update JSDoc URLs for new website structure (add /v6/ segment) ( [#12141](https://github.com/remix-run/react-router/pull/12141))

**Full Changelog**: [`v6.27.0...v6.28.0`](https://github.com/remix-run/react-router/compare/react-router@6.27.0...react-router@6.28.0)

## v6.27.0

Date: 2024-10-11

### What's Changed

#### Stabilized APIs

This release stabilizes a handful of "unstable" APIs in preparation for the [pending](https://x.com/remix_run/status/1841926034868077009) React Router v7 release (see [these](https://remix.run/blog/merging-remix-and-react-router) [posts](https://remix.run/blog/incremental-path-to-react-19) for more info):

- `unstable_dataStrategy` → `dataStrategy` ( `createBrowserRouter` and friends) ( [Docs](https://reactrouter.com/v6/routers/create-browser-router#optsdatastrategy))
- `unstable_patchRoutesOnNavigation` → `patchRoutesOnNavigation` ( `createBrowserRouter` and friends) ( [Docs](https://reactrouter.com/v6/routers/create-browser-router#optspatchroutesonnavigation))
- `unstable_flushSync` → `flushSync` ( `useSubmit`, `fetcher.load`, `fetcher.submit`) ( [Docs](https://reactrouter.com/v6/hooks/use-submit#optionsflushsync))
- `unstable_viewTransition` → `viewTransition` ( `<Link>`, `<Form>`, `useNavigate`, `useSubmit`) ( [Docs](https://reactrouter.com/v6/components/link#viewtransition))

### Minor Changes

- Stabilize the `unstable_flushSync` option for navigations and fetchers ( [#11989](https://github.com/remix-run/react-router/pull/11989))
- Stabilize the `unstable_viewTransition` option for navigations and the corresponding `unstable_useViewTransitionState` hook ( [#11989](https://github.com/remix-run/react-router/pull/11989))
- Stabilize `unstable_dataStrategy` ( [#11974](https://github.com/remix-run/react-router/pull/11974))
- Stabilize `unstable_patchRoutesOnNavigation` ( [#11973](https://github.com/remix-run/react-router/pull/11973))

  - Add new `PatchRoutesOnNavigationFunctionArgs` type for convenience ( [#11967](https://github.com/remix-run/react-router/pull/11967))

### Patch Changes

- Fix bug when submitting to the current contextual route (parent route with an index child) when an `?index` param already exists from a prior submission ( [#12003](https://github.com/remix-run/react-router/pull/12003))
- Fix `useFormAction` bug - when removing `?index` param it would not keep other non-Remix `index` params ( [#12003](https://github.com/remix-run/react-router/pull/12003))
- Fix bug with fetchers not persisting `preventScrollReset` through redirects during concurrent fetches ( [#11999](https://github.com/remix-run/react-router/pull/11999))
- Avoid unnecessary `console.error` on fetcher abort due to back-to-back revalidation calls ( [#12050](https://github.com/remix-run/react-router/pull/12050))
- Fix bugs with `partialHydration` when hydrating with errors ( [#12070](https://github.com/remix-run/react-router/pull/12070))
- Remove internal cache to fix issues with interrupted `patchRoutesOnNavigation` calls ( [#12055](https://github.com/remix-run/react-router/pull/12055))

  - ⚠️ This may be a breaking change if you were relying on this behavior in the `unstable_` API
  - We used to cache in-progress calls to `patchRoutesOnNavigation` internally so that multiple navigations with the same start/end would only execute the function once and use the same promise
  - However, this approach was at odds with `patch` short circuiting if a navigation was interrupted (and the `request.signal` aborted) since the first invocation's `patch` would no-op
  - This cache also made some assumptions as to what a valid cache key might be - and is oblivious to any other application-state changes that may have occurred
  - So, the cache has been removed because in _most_ cases, repeated calls to something like `import()` for async routes will already be cached automatically - and if not it's easy enough for users to implement this cache in userland
- Remove internal `discoveredRoutes` FIFO queue from `unstable_patchRoutesOnNavigation` ( [#11977](https://github.com/remix-run/react-router/pull/11977))

  - ⚠️ This may be a breaking change if you were relying on this behavior in the `unstable_` API
  - This was originally implemented as an optimization but it proved to be a bit too limiting
  - If you need this optimization you can implement your own cache inside `patchRoutesOnNavigation`
- Fix types for `RouteObject` within `PatchRoutesOnNavigationFunction`'s `patch` method so it doesn't expect agnostic route objects passed to `patch` ( [#11967](https://github.com/remix-run/react-router/pull/11967))
- Expose errors thrown from `patchRoutesOnNavigation` directly to `useRouteError` instead of wrapping them in a 400 `ErrorResponse` instance ( [#12111](https://github.com/remix-run/react-router/pull/12111))

**Full Changelog**: [`v6.26.2...v6.27.0`](https://github.com/remix-run/react-router/compare/react-router@6.26.2...react-router@6.27.0)

## v6.26.2

Date: 2024-09-09

### Patch Changes

- Update the `unstable_dataStrategy` API to allow for more advanced implementations ( [#11943](https://github.com/remix-run/react-router/pull/11943))

  - ⚠️ If you have already adopted `unstable_dataStrategy`, please review carefully as this includes breaking changes to this API
  - Rename `unstable_HandlerResult` to `unstable_DataStrategyResult`
  - Change the return signature of `unstable_dataStrategy` from a parallel array of `unstable_DataStrategyResult[]` (parallel to `matches`) to a key/value object of `routeId => unstable_DataStrategyResult`
    - This allows more advanced control over revalidation behavior because you can opt-into or out-of revalidating data that may not have been revalidated by default (via `match.shouldLoad`)
  - You should now return/throw a result from your `handlerOverride` instead of returning a `DataStrategyResult`
    - The return value (or thrown error) from your `handlerOverride` will be wrapped up into a `DataStrategyResult` and returned fromm `match.resolve`
    - Therefore, if you are aggregating the results of `match.resolve()` into a final results object you should not need to think about the `DataStrategyResult` type
    - If you are manually filling your results object from within your `handlerOverride`, then you will need to assign a `DataStrategyResult` as the value so React Router knows if it's a successful execution or an error (see examples in the documentation for details)
  - Added a new `fetcherKey` parameter to `unstable_dataStrategy` to allow differentiation from navigational and fetcher calls
- Preserve opted-in view transitions through redirects ( [#11925](https://github.com/remix-run/react-router/pull/11925))
- Preserve pending view transitions through a router revalidation call ( [#11917](https://github.com/remix-run/react-router/pull/11917))
- Fix blocker usage when `blocker.proceed` is called quickly/synchronously ( [#11930](https://github.com/remix-run/react-router/pull/11930))

**Full Changelog**: [`v6.26.1...v6.26.2`](https://github.com/remix-run/react-router/compare/react-router@6.26.1...react-router@6.26.2)

## v6.26.1

Date: 2024-08-15

### Patch Changes

- Rename `unstable_patchRoutesOnMiss` to `unstable_patchRoutesOnNavigation` to match new behavior ( [#11888](https://github.com/remix-run/react-router/pull/11888))
- Update `unstable_patchRoutesOnNavigation` logic so that we call the method when we match routes with dynamic param or splat segments in case there exists a higher-scoring static route that we've not yet discovered ( [#11883](https://github.com/remix-run/react-router/pull/11883))

  - We also now leverage an internal FIFO queue of previous paths we've already called `unstable_patchRoutesOnNavigation` against so that we don't re-call on subsequent navigations to the same path

**Full Changelog**: [`v6.26.0...v6.26.1`](https://github.com/remix-run/react-router/compare/react-router@6.26.0...react-router@6.26.1)

## v6.26.0

Date: 2024-08-01

### Minor Changes

- Add a new `replace(url, init?)` alternative to `redirect(url, init?)` that performs a `history.replaceState` instead of a `history.pushState` on client-side navigation redirects ( [#11811](https://github.com/remix-run/react-router/pull/11811))
- Add a new `unstable_data()` API for usage with Remix Single Fetch ( [#11836](https://github.com/remix-run/react-router/pull/11836))

  - This API is not intended for direct usage in React Router SPA applications
  - It is primarily intended for usage with `createStaticHandler.query()` to allow loaders/actions to return arbitrary data along with custom `status`/ `headers` without forcing the serialization of data into a `Response` instance
  - This allows for more advanced serialization tactics via `unstable_dataStrategy` such as serializing via `turbo-stream` in Remix Single Fetch
  - ⚠️ This removes the `status` field from `HandlerResult`
    - If you need to return a specific `status` from `unstable_dataStrategy` you should instead do so via `unstable_data()`

### Patch Changes

- Fix internal cleanup of interrupted fetchers to avoid invalid revalidations on navigations ( [#11839](https://github.com/remix-run/react-router/pull/11839))
- Fix initial hydration behavior when using `future.v7_partialHydration` along with `unstable_patchRoutesOnMiss` ( [#11838](https://github.com/remix-run/react-router/pull/11838))

  - During initial hydration, `router.state.matches` will now include any partial matches so that we can render ancestor `HydrateFallback` components

**Full Changelog**: [`v6.25.1...v6.26.0`](https://github.com/remix-run/react-router/compare/react-router@6.25.1...react-router@6.26.0)

## v6.25.1

Date: 2024-07-17

### Patch Changes

- Memoize some `RouterProvider` internals to reduce unnecessary re-renders ( [#11803](https://github.com/remix-run/react-router/pull/11803))

**Full Changelog**: [`v6.25.0...v6.25.1`](https://github.com/remix-run/react-router/compare/react-router@6.25.0...react-router@6.25.1)

## v6.25.0

Date: 2024-07-16

### What's Changed

#### Stabilized `v7_skipActionErrorRevalidation`

This release stabilizes the `future.unstable_skipActionErrorRevalidation` flag into [`future.v7_skipActionErrorRevalidation`](https://reactrouter.com/v6/upgrading/future#v7_skipactionstatusrevalidation) in preparation for the upcoming React Router v7 release.

- When this flag is enabled, actions that return/throw a `4xx/5xx` `Response` will not trigger a revalidation by default
- This also stabilizes `shouldRevalidate`'s `unstable_actionStatus` parameter to `actionStatus`

### Minor Changes

- Stabilize `future.unstable_skipActionErrorRevalidation` as `future.v7_skipActionErrorRevalidation` ( [#11769](https://github.com/remix-run/react-router/pull/11769))

### Patch Changes

- Fix regression and properly decode paths inside `useMatch` so matches/params reflect decoded params ( [#11789](https://github.com/remix-run/react-router/pull/11789))
- Fix bubbling of errors thrown from `unstable_patchRoutesOnMiss` ( [#11786](https://github.com/remix-run/react-router/pull/11786))
- Fix hydration in SSR apps using `unstable_patchRoutesOnMiss` that matched a splat route on the server ( [#11790](https://github.com/remix-run/react-router/pull/11790))

**Full Changelog**: [`v6.24.1...v6.25.0`](https://github.com/remix-run/react-router/compare/react-router@6.24.1...react-router@6.25.0)

## v6.24.1

Date: 2024-07-03

### Patch Changes

- Remove `polyfill.io` reference from warning message because the domain was sold and has since been determined to serve malware ( [#11741](https://github.com/remix-run/react-router/pull/11741))

  - See [https://sansec.io/research/polyfill-supply-chain-attack](https://sansec.io/research/polyfill-supply-chain-attack)
- Export `NavLinkRenderProps` type for easier typing of custom `NavLink` callback ( [#11553](https://github.com/remix-run/react-router/pull/11553))
- When using `future.v7_relativeSplatPath`, properly resolve relative paths in splat routes that are children of pathless routes ( [#11633](https://github.com/remix-run/react-router/pull/11633))
- Fog of War (unstable): Trigger a new `router.routes` identity/reflow during route patching ( [#11740](https://github.com/remix-run/react-router/pull/11740))
- Fog of War (unstable): Fix initial matching when a splat route matches ( [#11759](https://github.com/remix-run/react-router/pull/11759))

**Full Changelog**: [`v6.24.0...v6.24.1`](https://github.com/remix-run/react-router/compare/react-router@6.24.0...react-router@6.24.1)

## v6.24.0

Date: 2024-06-24

### What's Changed

#### Lazy Route Discovery (a.k.a. "Fog of War")

We're really excited to release our new API for "Lazy Route Discovery" in `v6.24.0`! For some background information, please check out the original [RFC](https://github.com/remix-run/react-router/discussions/11113). The **tl;dr;** is that ever since we introduced the Data APIs in v6.4 via `<RouterProvider>`, we've been a little bummed that one of the tradeoffs was the lack of a compelling code-splitting story mirroring what we had in the `<BrowserRouter>`/ `<Routes>` apps. We took a baby-step towards improving that story with `route.lazy` in `v6.9.0`, but with `v6.24.0` we've gone the rest of the way.

With "Fog of War", you can now load portions of the route tree lazily via the new `unstable_patchRoutesOnMiss` option passed to `createBrowserRouter` (and it's memory/hash counterparts). This gives you a way to hook into spots where React Router is unable to match a given path and patch new routes into the route tree during the navigation (or fetcher call).

Here's a very small example, but please refer to the [documentation](https://reactrouter.com/v6/routers/create-browser-router#optsunstable_patchroutesonmiss) for more information and use cases:

```
const router = createBrowserRouter(
  [\
    {\
      id: "root",\
      path: "/",\
      Component: RootComponent,\
    },\
  ],
  {
    async unstable_patchRoutesOnMiss({ path, patch }) {
      if (path === "/a") {
        // Load the `a` route (`{ path: 'a', Component: A }`)
        let route = await getARoute();
        // Patch the `a` route in as a new child of the `root` route
        patch("root", [route]);
      }
    },
  }
);

```

Copy code to clipboard

### Minor Changes

- Add support for Lazy Route Discovery (a.k.a. "Fog of War") ( [#11626](https://github.com/remix-run/react-router/pull/11626))

### Patch Changes

- Fix `fetcher.submit` types - remove incorrect `navigate`/ `fetcherKey`/ `unstable_viewTransition` options because they are only relevant for `useSubmit` ( [#11631](https://github.com/remix-run/react-router/pull/11631))
- Allow falsy `location.state` values passed to `<StaticRouter>` ( [#11495](https://github.com/remix-run/react-router/pull/11495))

**Full Changelog**: [`v6.23.1...v6.24.0`](https://github.com/remix-run/react-router/compare/react-router@6.23.1...react-router@6.24.0)

## v6.23.1

Date: 2024-05-10

### Patch Changes

- Allow `undefined` to be resolved through `<Await>` ( [#11513](https://github.com/remix-run/react-router/pull/11513))
- Add defensive `document` check when checking for `document.startViewTransition` availability ( [#11544](https://github.com/remix-run/react-router/pull/11544))
- Change the `react-router-dom/server` import back to `react-router-dom` instead of `index.ts` ( [#11514](https://github.com/remix-run/react-router/pull/11514))
- `@remix-run/router` \- Support `unstable_dataStrategy` on `staticHandler.queryRoute` ( [#11515](https://github.com/remix-run/react-router/pull/11515))

**Full Changelog**: [`v6.23.0...v6.23.1`](https://github.com/remix-run/react-router/compare/react-router@6.23.0...react-router@6.23.1)

## v6.23.0

Date: 2024-04-23

### What's Changed

#### Data Strategy (unstable)

The new `unstable_dataStrategy` API is a low-level API designed for advanced use-cases where you need to take control over the data strategy for your `loader`/ `action` functions. The default implementation is today's behavior, to fetch all loaders in parallel, but this option allows users to implement more advanced data flows including Remix ["Single Fetch"](https://remix.run/docs/guides/single-fetch), user-land middleware/context APIs, automatic loader caching, and more. Please see the [docs](https://reactrouter.com/v6/routers/create-browser-router#unstable_datastrategy) for more information.

**Note:** This is a low-level API intended for advanced use-cases. This overrides React Router's internal handling of `loader`/ `action` execution, and if done incorrectly will break your app code. Please use with caution and perform the appropriate testing.

#### Skip Action Error Revalidation (unstable)

Currently, all active `loader`'s revalidate after any `action` submission, regardless of the `action` result. However, in the majority of cases a `4xx`/ `5xx` response from an `action` means that no data was actually changed and the revalidation is unnecessary. We've introduced a new `future.unstable_skipActionErrorRevalidation` flag that changes the behavior here, and we plan to make this the default in future version of React Router.

With this flag enabled, `action`'s that return/throw a `4xx`/ `5xx` response status will no longer automatically revalidate. If you need to revalidate after a `4xx`/ `5xx` result with this flag enabled, you can still do that via returning `true` from `shouldRevalidate` \- which now also receives a new `unstable_actionStatus` argument alongside `actionResult` so you can make decision based on the status of the `action` response without having to encode it into the action data.

### Minor Changes

- Add a new `unstable_dataStrategy` configuration option ( [#11098](https://github.com/remix-run/react-router/pull/11098), [#11377](https://github.com/remix-run/react-router/pull/11377))
- `@remix-run/router` \- Add a new `future.unstable_skipActionRevalidation` future flag ( [#11098](https://github.com/remix-run/react-router/pull/11098))
- `@remix-run/router` \- SSR: Added a new `skipLoaderErrorBubbling` options to the `staticHandler.query` method to disable error bubbling by the static handler for use in Remix's Single Fetch implementation ( [#11098](https://github.com/remix-run/react-router/pull/11098), ( [#11377](https://github.com/remix-run/react-router/pull/11377)))

**Full Changelog**: [`v6.22.3...v6.23.0`](https://github.com/remix-run/react-router/compare/react-router@6.22.3...react-router@6.23.0)

## v6.22.3

Date: 2024-03-07

### Patch Changes

- Fix a `future.v7_partialHydration` bug that would re-run loaders below the boundary on hydration if SSR loader errors bubbled to a parent boundary ( [#11324](https://github.com/remix-run/react-router/pull/11324))
- Fix a `future.v7_partialHydration` bug that would consider the router uninitialized if a route did not have a loader ( [#11325](https://github.com/remix-run/react-router/pull/11325))

**Full Changelog**: [`v6.22.2...v6.22.3`](https://github.com/remix-run/react-router/compare/react-router@6.22.2...react-router@6.22.3)

## v6.22.2

Date: 2024-02-28

### Patch Changes

- Preserve hydrated errors during partial hydration runs ( [#11305](https://github.com/remix-run/react-router/pull/11305))

**Full Changelog**: [`v6.22.1...v6.22.2`](https://github.com/remix-run/react-router/compare/react-router@6.22.1...react-router@6.22.2)

## v6.22.1

Date: 2024-02-16

### Patch Changes

- Fix encoding/decoding issues with pre-encoded dynamic parameter values ( [#11199](https://github.com/remix-run/react-router/pull/11199))

**Full Changelog**: [`v6.22.0...v6.22.1`](https://github.com/remix-run/react-router/compare/react-router@6.22.0...react-router@6.22.1)

## v6.22.0

Date: 2024-02-01

### What's Changed

#### Core Web Vitals Technology Report Flag

In 2021, the HTTP Archive launched the [Core Web Vitals Technology Report dashboard](https://discuss.httparchive.org/t/new-dashboard-the-core-web-vitals-technology-report/2178):

> By combining the powers of real-user experiences in the Chrome UX Report 26 (CrUX) dataset with web technology detections in HTTP Archive 30, we can get a glimpse into how architectural decisions like choices of CMS platform or JavaScript framework play a role in sites’ CWV performance.

They use a tool called [`wappalyzer`](https://github.com/HTTPArchive/wappalyzer) to identify what technologies a given website is using by looking for certain scripts, global JS variables, or other identifying characteristics. For example, for Remix applications, they [look for the global `__remixContext`](https://github.com/HTTPArchive/wappalyzer/blob/c2a24ee7c2d07bf9c521f02584ae2dcf603ac0b7/src/technologies/r.json#L1328) variable to identify that a website is using Remix.

It was brought to our attention that React Router was unable to be reliably identified because there are no identifying global aspects. They are currently [looking for external scripts with `react-router`](https://github.com/HTTPArchive/wappalyzer/blob/c2a24ee7c2d07bf9c521f02584ae2dcf603ac0b7/src/technologies/r.json#L637) in the name. This will identify sites using React Router from a CDN such as `unpkg` \- but it will miss the **vast** majority of sites that are installing React Router from the npm registry and bundling it into their JS files. This results in [drastically under-reporting](https://lookerstudio.google.com/s/pixHkNmGbN4) the usage of React Router on the web.

Starting with version `6.22.0`, sites using `react-router-dom` will begin adding a `window.__reactRouterVersion` variable that will be set to a string value of the SemVer major version number (i.e., `window.__reactRouterVersion = "6";`) so that they can be properly identified.

### Minor Changes

- Include a `window.__reactRouterVersion` for CWV Report detection ( [#11222](https://github.com/remix-run/react-router/pull/11222))
- Add a `createStaticHandler` `future.v7_throwAbortReason` flag to throw `request.signal.reason` (defaults to a `DOMException`) when a request is aborted instead of an `Error` such as `new Error("query() call aborted: GET /path")` ( [#11104](https://github.com/remix-run/react-router/pull/11104))

  - Please note that `DOMException` was added in Node v17 so you will not get a `DOMException` on Node 16 and below.

### Patch Changes

- Respect the `ErrorResponse` status code if passed to `getStaticContextFormError` ( [#11213](https://github.com/remix-run/react-router/pull/11213))

**Full Changelog**: [`v6.21.3...v6.22.0`](https://github.com/remix-run/react-router/compare/react-router@6.21.3...react-router@6.22.0)

## v6.21.3

Date: 2024-01-18

### Patch Changes

- Fix `NavLink` `isPending` when a `basename` is used ( [#11195](https://github.com/remix-run/react-router/pull/11195))
- Remove leftover `unstable_` prefix from `Blocker`/ `BlockerFunction` types ( [#11187](https://github.com/remix-run/react-router/pull/11187))

**Full Changelog**: [`v6.21.2...v6.21.3`](https://github.com/remix-run/react-router/compare/react-router@6.21.2...react-router@6.21.3)

## v6.21.2

Date: 2024-01-11

### Patch Changes

- Leverage `useId` for internal fetcher keys when available ( [#11166](https://github.com/remix-run/react-router/pull/11166))
- Fix bug where dashes were not picked up in dynamic parameter names ( [#11160](https://github.com/remix-run/react-router/pull/11160))
- Do not attempt to deserialize empty JSON responses ( [#11164](https://github.com/remix-run/react-router/pull/11164))

**Full Changelog**: [`v6.21.1...v6.21.2`](https://github.com/remix-run/react-router/compare/react-router@6.21.1...react-router@6.21.2)

## v6.21.1

Date: 2023-12-21

### Patch Changes

- Fix bug with `route.lazy` not working correctly on initial SPA load when `v7_partialHydration` is specified ( [#11121](https://github.com/remix-run/react-router/pull/11121))
- Fix bug preventing revalidation from occurring for persisted fetchers unmounted during the `submitting` phase ( [#11102](https://github.com/remix-run/react-router/pull/11102))
- De-dup relative path logic in `resolveTo` ( [#11097](https://github.com/remix-run/react-router/pull/11097))

**Full Changelog**: [`v6.21.0...v6.21.1`](https://github.com/remix-run/react-router/compare/react-router@6.21.0...react-router@6.21.1)

## v6.21.0

Date: 2023-12-13

### What's Changed

#### `future.v7_relativeSplatPath`

We fixed a splat route path-resolution bug in `6.19.0`, but later determined a large number of applications were relying on the buggy behavior, so we reverted the fix in `6.20.1` (see [#10983](https://github.com/remix-run/react-router/issues/10983), [#11052](https://github.com/remix-run/react-router/issues/11052), [#11078](https://github.com/remix-run/react-router/issues/11078)).

The buggy behavior is that the default behavior when resolving relative paths inside a splat route would _ignore_ any splat ( `*`) portion of the current route path. When the future flag is enabled, splat portions are included in relative path logic within splat routes.

For more information, please refer to the [`useResolvedPath` docs](https://reactrouter.com/v6/hooks/use-resolved-path#splat-paths) and/or the [detailed changelog entry](https://github.com/remix-run/react-router/blob/main/packages/react-router-dom/CHANGELOG.md#6210).

#### Partial Hydration

We added a new `future.v7_partialHydration` future flag for the `@remix-run/router` that enables partial hydration of a data router when Server-Side Rendering. This allows you to provide `hydrationData.loaderData` that has values for _some_ initially matched route loaders, but not all. When this flag is enabled, the router will call `loader` functions for routes that do not have hydration loader data during `router.initialize()`, and it will render down to the deepest provided `HydrateFallback` (up to the first route without hydration data) while it executes the unhydrated routes. ( [#11033](https://github.com/remix-run/react-router/pull/11033))

### Minor Changes

- Add a new `future.v7_relativeSplatPath` flag to implement a breaking bug fix to relative routing when inside a splat route. ( [#11087](https://github.com/remix-run/react-router/pull/11087))
- Add a new `future.v7_partialHydration` future flag that enables partial hydration of a data router when Server-Side Rendering ( [#11033](https://github.com/remix-run/react-router/pull/11033))

### Patch Changes

- Properly handle falsy error values in `ErrorBoundary`'s ( [#11071](https://github.com/remix-run/react-router/pull/11071))
- Catch and bubble errors thrown when trying to unwrap responses from `loader`/ `action` functions ( [#11061](https://github.com/remix-run/react-router/pull/11061))
- Fix `relative="path"` issue when rendering `Link`/ `NavLink` outside of matched routes ( [#11062](https://github.com/remix-run/react-router/pull/11062))

**Full Changelog**: [`v6.20.1...v6.21.0`](https://github.com/remix-run/react-router/compare/react-router@6.20.1...react-router@6.21.0)

## v6.20.1

Date: 2023-12-01

### Patch Changes

- Revert the `useResolvedPath` fix for splat routes due to a large number of applications that were relying on the buggy behavior (see [#11052](https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329)) ( [#11078](https://github.com/remix-run/react-router/pull/11078))

  - We plan to re-introduce this fix behind a future flag in the next minor version (see [this comment](https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329))
  - This fix was included in versions `6.19.0` and `6.20.0`. If you are upgrading from `6.18.0` or earlier, you would not have been impacted by this fix.

**Full Changelog**: [`v6.20.0...v6.20.1`](https://github.com/remix-run/react-router/compare/react-router@6.20.0...react-router@6.20.1)

## v6.20.0

Date: 2023-11-22

> \[!WARNING\]
> Please use version `6.20.1` or later instead of `6.20.0`. We discovered that a large number of apps were relying on buggy behavior that was fixed in this release ( [#11045](https://github.com/remix-run/react-router/pull/11045)). We reverted the fix in `6.20.1` and will be re-introducing it behind a future flag in a subsequent release. See [#11052](https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329) for more details.

### Minor Changes

- Export the `PathParam` type from the public API ( [#10719](https://github.com/remix-run/react-router/pull/10719))

### Patch Changes

- Do not revalidate unmounted fetchers when `v7_fetcherPersist` is enabled ( [#11044](https://github.com/remix-run/react-router/pull/11044))
- Fix bug with `resolveTo` path resolution in splat routes ( [#11045](https://github.com/remix-run/react-router/pull/11045))

  - This is a follow up to [#10983](https://github.com/remix-run/react-router/pull/10983) to handle the few other code paths using `getPathContributingMatches`
  - This removes the `UNSAFE_getPathContributingMatches` export from `@remix-run/router` since we no longer need this in the `react-router`/ `react-router-dom` layers

**Full Changelog**: [`v6.19.0...v6.20.0`](https://github.com/remix-run/react-router/compare/react-router@6.19.0...react-router@6.20.0)

## v6.19.0

Date: 2023-11-16

> \[!WARNING\]
> Please use version `6.20.1` or later instead of `6.19.0`. We discovered that a large number of apps were relying on buggy behavior that was fixed in this release ( [#10983](https://github.com/remix-run/react-router/pull/10983)). We reverted the fix in `6.20.1` and will be re-introducing it behind a future flag in a subsequent release. See [#11052](https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329) for more details.

### What's Changed

#### `unstable_flushSync` API

This release brings a new `unstable_flushSync` option to the imperative APIs ( `useSubmit`, `useNavigate`, `fetcher.submit`, `fetcher.load`) to let users opt-into synchronous DOM updates for pending/optimistic UI.

```
function handleClick() {
  submit(data, { flushSync: true });
  // Everything is flushed to the DOM so you can focus/scroll to your pending/optimistic UI
  setFocusAndOrScrollToNewlyAddedThing();
}

```

Copy code to clipboard

### Minor Changes

- Add `unstable_flushSync` option to `useNavigate`/ `useSubmit`/ `fetcher.load`/ `fetcher.submit` to opt-out of `React.startTransition` and into `ReactDOM.flushSync` for state updates ( [#11005](https://github.com/remix-run/react-router/pull/11005))
- Remove the `unstable_` prefix from the [`useBlocker`](https://reactrouter.com/v6/hooks/use-blocker) hook as it's been in use for enough time that we are confident in the API ( [#10991](https://github.com/remix-run/react-router/pull/10991))

  - We do not plan to remove the prefix from `unstable_usePrompt` due to differences in how browsers handle `window.confirm` that prevent React Router from guaranteeing consistent/correct behavior

### Patch Changes

- Fix `useActionData` so it returns proper contextual action data and not _any_ action data in the tree ( [#11023](https://github.com/remix-run/react-router/pull/11023))

- Fix bug in `useResolvedPath` that would cause `useResolvedPath(".")` in a splat route to lose the splat portion of the URL path. ( [#10983](https://github.com/remix-run/react-router/pull/10983))
  - ⚠️ This fixes a quite long-standing bug specifically for `"."` paths inside a splat route which incorrectly dropped the splat portion of the URL. If you are relative routing via `"."` inside a splat route in your application you should double check that your logic is not relying on this buggy behavior and update accordingly.
- Fix issue where a changing fetcher `key` in a `useFetcher` that remains mounted wasn't getting picked up ( [#11009](https://github.com/remix-run/react-router/pull/11009))

- Fix `useFormAction` which was incorrectly inheriting the `?index` query param from child route `action` submissions ( [#11025](https://github.com/remix-run/react-router/pull/11025))

- Fix `NavLink` `active` logic when `to` location has a trailing slash ( [#10734](https://github.com/remix-run/react-router/pull/10734))

- Fix types so `unstable_usePrompt` can accept a `BlockerFunction` in addition to a `boolean` ( [#10991](https://github.com/remix-run/react-router/pull/10991))

- Fix `relative="path"` bug where relative path calculations started from the full location pathname, instead of from the current contextual route pathname. ( [#11006](https://github.com/remix-run/react-router/pull/11006))



```
<Route path="/a">
    <Route path="/b" element={<Component />}>
      <Route path="/c" />
    </Route>
</Route>;

function Component() {
    return (
      <>
        {/* This is now correctly relative to /a/b, not /a/b/c */}
        <Link to=".." relative="path" />
        <Outlet />
      </>
    );
}

```

Copy code to clipboard


**Full Changelog**: [`6.18.0...6.19.0`](https://github.com/remix-run/react-router/compare/react-router@6.18.0...react-router@6.19.0)

## v6.18.0

Date: 2023-10-31

### What's Changed

#### New Fetcher APIs

Per this [RFC](https://github.com/remix-run/remix/discussions/7698), we've introduced some new APIs that give you more granular control over your fetcher behaviors.

- You may now specify your own fetcher identifier via `useFetcher({ key: string })`, which allows you to access the same fetcher instance from different components in your application without prop-drilling
- Fetcher keys are now exposed on the fetchers returned from `useFetchers` so that they can be looked up by `key`
- `Form` and `useSubmit` now support optional `navigate`/ `fetcherKey` props/params to allow kicking off a fetcher submission under the hood with an optionally user-specified `key`
  - `<Form method="post" navigate={false} fetcherKey="my-key">`
  - `submit(data, { method: "post", navigate: false, fetcherKey: "my-key" })`
  - Invoking a fetcher in this way is ephemeral and stateless
  - If you need to access the state of one of these fetchers, you will need to leverage `useFetchers()` or `useFetcher({ key })` to look it up elsewhere

#### Persistence Future Flag ( `future.v7_fetcherPersist`)

Per the same [RFC](https://github.com/remix-run/remix/discussions/7698) as above, we've introduced a new `future.v7_fetcherPersist` flag that allows you to opt-into the new fetcher persistence/cleanup behavior. Instead of being immediately cleaned up on unmount, fetchers will persist until they return to an `idle` state. This makes pending/optimistic UI _much_ easier in scenarios where the originating fetcher needs to unmount.

- This is sort of a long-standing bug fix as the `useFetchers()` API was always supposed to only reflect **in-flight** fetcher information for pending/optimistic UI -- it was not intended to reflect fetcher data or hang onto fetchers after they returned to an `idle` state
- Keep an eye out for the following specific behavioral changes when opting into this flag and check your app for compatibility:
  - Fetchers that complete _while still mounted_ will no longer appear in `useFetchers()` after completion - they served no purpose in there since you can access the data via `useFetcher().data`
  - Fetchers that previously unmounted _while in-flight_ will not be immediately aborted and will instead be cleaned up once they return to an `idle` state

    - They will remain exposed via `useFetchers` while in-flight so you can still access pending/optimistic data after unmount
    - If a fetcher is no longer mounted when it completes, then it's result will not be post processed - e.g., redirects will not be followed and errors will not bubble up in the UI
    - However, if a fetcher was re-mounted elsewhere in the tree using the same `key`, then it's result will be processed, even if the originating fetcher was unmounted

### Minor Changes

- Add fetcher `key` APIs and `navigate=false` options ( [#10960](https://github.com/remix-run/react-router/pull/10960))
- Add `future.v7_fetcherPersist` flag ( [#10962](https://github.com/remix-run/react-router/pull/10962))
- Add support for optional path segments in `matchPath` ( [#10768](https://github.com/remix-run/react-router/pull/10768))

### Patch Changes

- Fix the `future` prop on `BrowserRouter`, `HashRouter` and `MemoryRouter` so that it accepts a `Partial<FutureConfig>` instead of requiring all flags to be included ( [#10962](https://github.com/remix-run/react-router/pull/10962))
- Fix `router.getFetcher`/ `router.deleteFetcher` type definitions which incorrectly specified `key` as an optional parameter ( [#10960](https://github.com/remix-run/react-router/pull/10960))

**Full Changelog**: [`6.17.0...6.18.0`](https://github.com/remix-run/react-router/compare/react-router@6.17.0...react-router@6.18.0)

## v6.17.0

Date: 2023-10-16

### What's Changed

#### View Transitions 🚀

We're excited to release experimental support for the [View Transitions API](https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition) in React Router! You can now trigger navigational DOM updates to be wrapped in `document.startViewTransition` to enable CSS animated transitions on SPA navigations in your application.

The simplest approach to enabling a View Transition in your React Router app is via the new [`<Link unstable_viewTransition>`](https://reactrouter.com/v6/components/link#unstable_viewtransition) prop. This will cause the navigation DOM update to be wrapped in `document.startViewTransition` which will enable transitions for the DOM update. Without any additional CSS styles, you'll get a basic cross-fade animation for your page.

If you need to apply more fine-grained styles for your animations, you can leverage the [`unstable_useViewTransitionState`](https://reactrouter.com/v6/hooks/use-view-transition-state) hook which will tell you when a transition is in progress and you can use that to apply classes or styles:

```
function ImageLink(to, src, alt) {
  const isTransitioning = unstable_useViewTransitionState(to);
  return (
    <Link to={to} unstable_viewTransition>
      <img
        src={src}
        alt={alt}
        style={{
          viewTransitionName: isTransitioning ? "image-expand" : "",
        }}
      />
    </Link>
  );
}

```

Copy code to clipboard

You can also use the [`<NavLink unstable_viewTransition>`](https://reactrouter.com/v6/components/nav-link#unstable_viewtransition) shorthand which will manage the hook usage for you and automatically add a `transitioning` class to the `<a>` during the transition:

```
a.transitioning img {
  view-transition-name: "image-expand";
}

```

Copy code to clipboard

```
<NavLink to={to} unstable_viewTransition>
  <img src={src} alt={alt} />
</NavLink>

```

Copy code to clipboard

For an example usage of View Transitions, check out [our fork](https://github.com/brophdawg11/react-router-records) of the awesome [Astro Records](https://github.com/Charca/astro-records) demo.

For more information on using the View Transitions API, please refer to the [Smooth and simple transitions with the View Transitions API](https://developer.chrome.com/docs/web-platform/view-transitions/) guide from the Google Chrome team.

### Minor Changes

- Add support for view transitions ( [#10916](https://github.com/remix-run/react-router/pull/10916))

### Patch Changes

- Log a warning and fail gracefully in `ScrollRestoration` when `sessionStorage` is unavailable ( [#10848](https://github.com/remix-run/react-router/pull/10848))
- Fix `RouterProvider` `future` prop type to be a `Partial<FutureConfig>` so that not all flags must be specified ( [#10900](https://github.com/remix-run/react-router/pull/10900))
- Allow 404 detection to leverage root route error boundary if path contains a URL segment ( [#10852](https://github.com/remix-run/react-router/pull/10852))
- Fix `ErrorResponse` type to avoid leaking internal field ( [#10876](https://github.com/remix-run/react-router/pull/10876))

**Full Changelog**: [`6.16.0...6.17.0`](https://github.com/remix-run/react-router/compare/react-router@6.16.0...react-router@6.17.0)

## v6.16.0

Date: 2023-09-13

### Minor Changes

- In order to move towards stricter TypeScript support in the future, we're aiming to replace current usages of `any` with `unknown` on exposed typings for user-provided data. To do this in Remix v2 without introducing breaking changes in React Router v6, we have added generics to a number of shared types. These continue to default to `any` in React Router and are overridden with `unknown` in Remix. In React Router v7 we plan to move these to `unknown` as a breaking change. ( [#10843](https://github.com/remix-run/react-router/pull/10843))

  - `Location` now accepts a generic for the `location.state` value
  - `ActionFunctionArgs`/ `ActionFunction`/ `LoaderFunctionArgs`/ `LoaderFunction` now accept a generic for the `context` parameter (only used in SSR usages via `createStaticHandler`)
  - The return type of `useMatches` (now exported as `UIMatch`) accepts generics for `match.data` and `match.handle` \- both of which were already set to `unknown`
- Move the `@private` class export `ErrorResponse` to an `UNSAFE_ErrorResponseImpl` export since it is an implementation detail and there should be no construction of `ErrorResponse` instances in userland. This frees us up to export a `type ErrorResponse` which correlates to an instance of the class via `InstanceType`. Userland code should only ever be using `ErrorResponse` as a type and should be type-narrowing via `isRouteErrorResponse`. ( [#10811](https://github.com/remix-run/react-router/pull/10811))
- Export `ShouldRevalidateFunctionArgs` interface ( [#10797](https://github.com/remix-run/react-router/pull/10797))
- Removed private/internal APIs only required for the Remix v1 backwards compatibility layer and no longer needed in Remix v2 ( `_isFetchActionRedirect`, `_hasFetcherDoneAnything`) ( [#10715](https://github.com/remix-run/react-router/pull/10715))

### Patch Changes

- Properly encode rendered URIs in server rendering to avoid hydration errors ( [#10769](https://github.com/remix-run/react-router/pull/10769))
- Add method/url to error message on aborted `query`/ `queryRoute` calls ( [#10793](https://github.com/remix-run/react-router/pull/10793))
- Fix a race-condition with loader/action-thrown errors on `route.lazy` routes ( [#10778](https://github.com/remix-run/react-router/pull/10778))
- Fix type for `actionResult` on the arguments object passed to `shouldRevalidate` ( [#10779](https://github.com/remix-run/react-router/pull/10779))

**Full Changelog**: [`v6.15.0...v6.16.0`](https://github.com/remix-run/react-router/compare/react-router@6.15.0...react-router@6.16.0)

## v6.15.0

Date: 2023-08-10

### Minor Changes

- Add's a new `redirectDocument()` function which allows users to specify that a redirect from a `loader`/ `action` should trigger a document reload (via `window.location`) instead of attempting to navigate to the redirected location via React Router ( [#10705](https://github.com/remix-run/react-router/pull/10705))

### Patch Changes

- Ensure `useRevalidator` is referentially stable across re-renders if revalidations are not actively occurring ( [#10707](https://github.com/remix-run/react-router/pull/10707))
- Ensure hash history always includes a leading slash on hash pathnames ( [#10753](https://github.com/remix-run/react-router/pull/10753))
- Fixes an edge-case affecting web extensions in Firefox that use `URLSearchParams` and the `useSearchParams` hook ( [#10620](https://github.com/remix-run/react-router/pull/10620))
- Reorder effects in `unstable_usePrompt` to avoid throwing an exception if the prompt is unblocked and a navigation is performed synchronously ( [#10687](https://github.com/remix-run/react-router/pull/10687), [#10718](https://github.com/remix-run/react-router/pull/10718))
- SSR: Do not include hash in `useFormAction()` for unspecified actions since it cannot be determined on the server and causes hydration issues ( [#10758](https://github.com/remix-run/react-router/pull/10758))
- SSR: Fix an issue in `queryRoute` that was not always identifying thrown `Response` instances ( [#10717](https://github.com/remix-run/react-router/pull/10717))
- `react-router-native`: Update `@ungap/url-search-params` dependency from `^0.1.4` to `^0.2.2` ( [#10590](https://github.com/remix-run/react-router/pull/10590))

**Full Changelog**: [`v6.14.2...v6.15.0`](https://github.com/remix-run/react-router/compare/react-router@6.14.2...react-router@6.15.0)

## v6.14.2

Date: 2023-07-17

### Patch Changes

- Add missing `<Form state>` prop to populate `history.state` on submission navigations ( [#10630](https://github.com/remix-run/react-router/pull/10630))
- Trigger an error if a `defer` promise resolves/rejects with `undefined` in order to match the behavior of loaders and actions which must return a value or `null` ( [#10690](https://github.com/remix-run/react-router/pull/10690))
- Properly handle fetcher redirects interrupted by normal navigations ( [#10674](https://github.com/remix-run/react-router/pull/10674))
- Initial-load fetchers should not automatically revalidate on GET navigations ( [#10688](https://github.com/remix-run/react-router/pull/10688))
- Properly decode element id when emulating hash scrolling via `<ScrollRestoration>` ( [#10682](https://github.com/remix-run/react-router/pull/10682))
- Typescript: Enhance the return type of `Route.lazy` to prohibit returning an empty object ( [#10634](https://github.com/remix-run/react-router/pull/10634))
- SSR: Support proper hydration of `Error` subclasses such as `ReferenceError`/ `TypeError` ( [#10633](https://github.com/remix-run/react-router/pull/10633))

**Full Changelog**: [`v6.14.1...v6.14.2`](https://github.com/remix-run/react-router/compare/react-router@6.14.1...react-router@6.14.2)

## v6.14.1

Date: 2023-06-30

### Patch Changes

- Fix loop in `unstable_useBlocker` when used with an unstable blocker function ( [#10652](https://github.com/remix-run/react-router/pull/10652))
- Fix issues with reused blockers on subsequent navigations ( [#10656](https://github.com/remix-run/react-router/pull/10656))
- Updated dependencies:
  - `@remix-run/router@1.7.1`

**Full Changelog**: [`v6.14.0...v6.14.1`](https://github.com/remix-run/react-router/compare/react-router@6.14.0...react-router@6.14.1)

## v6.14.0

Date: 2023-06-23

### What's Changed

#### JSON/Text Submissions

`6.14.0` adds support for JSON and Text submissions via `useSubmit`/ `fetcher.submit` since it's not always convenient to have to serialize into `FormData` if you're working in a client-side SPA. To opt-into these encodings you just need to specify the proper `formEncType`:

**Opt-into `application/json` encoding:**

```
function Component() {
  let navigation = useNavigation();
  let submit = useSubmit();
  submit({ key: "value" }, { method: "post", encType: "application/json" });
  // navigation.formEncType => "application/json"
  // navigation.json        => { key: "value" }
}

async function action({ request }) {
  // request.headers.get("Content-Type") => "application/json"
  // await request.json()                => { key: "value" }
}

```

Copy code to clipboard

**Opt-into `text/plain` encoding:**

```
function Component() {
  let navigation = useNavigation();
  let submit = useSubmit();
  submit("Text submission", { method: "post", encType: "text/plain" });
  // navigation.formEncType => "text/plain"
  // navigation.text        => "Text submission"
}

async function action({ request }) {
  // request.headers.get("Content-Type") => "text/plain"
  // await request.text()                => "Text submission"
}

```

Copy code to clipboard

**⚠️ Default Behavior Will Change in v7**

Please note that to avoid a breaking change, the default behavior will still encode a simple key/value JSON object into a `FormData` instance:

```
function Component() {
  let navigation = useNavigation();
  let submit = useSubmit();
  submit({ key: "value" }, { method: "post" });
  // navigation.formEncType => "application/x-www-form-urlencoded"
  // navigation.formData    => FormData instance
}

async function action({ request }) {
  // request.headers.get("Content-Type") => "application/x-www-form-urlencoded"
  // await request.formData()            => FormData instance
}

```

Copy code to clipboard

This behavior will likely change in v7 so it's best to make any JSON object submissions explicit with `formEncType: "application/x-www-form-urlencoded"` or `formEncType: "application/json"` to ease your eventual v7 migration path.

### Minor Changes

- Add support for `application/json` and `text/plain` encodings for `useSubmit`/ `fetcher.submit`. To reflect these additional types, `useNavigation`/ `useFetcher` now also contain `navigation.json`/ `navigation.text` and `fetcher.json`/ `fetcher.text` which include the json/text submission if applicable. ( [#10413](https://github.com/remix-run/react-router/pull/10413))

### Patch Changes

- When submitting a form from a `submitter` element, prefer the built-in `new FormData(form, submitter)` instead of the previous manual approach in modern browsers (those that support the new `submitter` parameter) ( [#9865](https://github.com/remix-run/react-router/pull/9865))

  - For browsers that don't support it, we continue to just append the submit button's entry to the end, and we also add rudimentary support for `type="image"` buttons
  - If developers want full spec-compliant support for legacy browsers, they can use the `formdata-submitter-polyfill`
- Call `window.history.pushState/replaceState` _before_ updating React Router state (instead of after) so that `window.location` matches `useLocation` during synchronous React 17 rendering ( [#10448](https://github.com/remix-run/react-router/pull/10448))

  - ⚠️ Note: generally apps should not be relying on `window.location` and should always reference `useLocation` when possible, as `window.location` will not be in sync 100% of the time (due to `popstate` events, concurrent mode, etc.)
- Avoid calling `shouldRevalidate` for fetchers that have not yet completed a data load ( [#10623](https://github.com/remix-run/react-router/pull/10623))
- Strip `basename` from the `location` provided to `<ScrollRestoration getKey>` to match the `useLocation` behavior ( [#10550](https://github.com/remix-run/react-router/pull/10550))
- Strip `basename` from locations provided to `unstable_useBlocker` functions to match the `useLocation` behavior ( [#10573](https://github.com/remix-run/react-router/pull/10573))
- Fix `unstable_useBlocker` key issues in `StrictMode` ( [#10573](https://github.com/remix-run/react-router/pull/10573))
- Fix `generatePath` when passed a numeric `0` value parameter ( [#10612](https://github.com/remix-run/react-router/pull/10612))
- Fix `tsc --skipLibCheck:false` issues on React 17 ( [#10622](https://github.com/remix-run/react-router/pull/10622))
- Upgrade `typescript` to 5.1 ( [#10581](https://github.com/remix-run/react-router/pull/10581))

**Full Changelog**: [`v6.13.0...v6.14.0`](https://github.com/remix-run/react-router/compare/react-router@6.13.0...react-router@6.14.0)

## v6.13.0

Date: 2023-06-14

### What's Changed

`6.13.0` is really a patch release in spirit but comes with a SemVer minor bump since we added a new future flag.

#### `future.v7_startTransition`

The **tl;dr;** is that `6.13.0` is the same as [`6.12.0`](https://github.com/remix-run/react-router/releases/tag/react-router%406.12.0) bue we've moved the usage of `React.startTransition` behind an opt-in `future.v7_startTransition` [future flag](https://reactrouter.com/v6/guides/api-development-strategy) because we found that there are applications in the wild that are currently using `Suspense` in ways that are incompatible with `React.startTransition`.

Therefore, in `6.13.0` the default behavior will no longer leverage `React.startTransition`:

```
<BrowserRouter>
  <Routes>{/*...*/}</Routes>
</BrowserRouter>

<RouterProvider router={router} />

```

Copy code to clipboard

If you wish to enable `React.startTransition`, pass the future flag to your router component:

```
<BrowserRouter future={{ v7_startTransition: true }}>
  <Routes>{/*...*/}</Routes>
</BrowserRouter>

<RouterProvider router={router} future={{ v7_startTransition: true }}/>

```

Copy code to clipboard

We recommend folks adopt this flag sooner rather than later to be better compatible with React concurrent mode, but if you run into issues you can continue without the use of `React.startTransition` until v7. Issues usually boil down to creating net-new promises during the render cycle, so if you run into issues when opting into `React.startTransition`, you should either lift your promise creation out of the render cycle or put it behind a `useMemo`.

### Minor Changes

- Move `React.startTransition` usage behinds a future flag ( [#10596](https://github.com/remix-run/react-router/pull/10596))

### Patch Changes

- Work around webpack/terser `React.startTransition` minification bug in production mode ( [#10588](https://github.com/remix-run/react-router/pull/10588))

**Full Changelog**: [`v6.12.1...v6.13.0`](https://github.com/remix-run/react-router/compare/react-router@6.12.1...react-router@6.13.0)

## v6.12.1

Date: 2023-06-08

> \[!WARNING\]
> Please use version `6.13.0` or later instead of `6.12.0`/ `6.12.1`. These versions suffered from some Webpack build/minification issues resulting failed builds or invalid minified code in your production bundles. See [#10569](https://github.com/remix-run/react-router/pull/10569) and [#10579](https://github.com/remix-run/react-router/issues/10579) for more details.

### Patch Changes

- Adjust feature detection of `React.startTransition` to fix webpack + react 17 compilation error ( [#10569](https://github.com/remix-run/react-router/pull/10569))

**Full Changelog**: [`v6.12.0...v6.12.1`](https://github.com/remix-run/react-router/compare/react-router@6.12.0...react-router@6.12.1)

## v6.12.0

Date: 2023-06-06

> \[!WARNING\]
> Please use version `6.13.0` or later instead of `6.12.0`/ `6.12.1`. These versions suffered from some Webpack build/minification issues resulting failed builds or invalid minified code in your production bundles. See [#10569](https://github.com/remix-run/react-router/pull/10569) and [#10579](https://github.com/remix-run/react-router/issues/10579) for more details.

### What's Changed

#### `React.startTransition` support

With `6.12.0` we've added better support for suspending components by wrapping the internal router state updates in [`React.startTransition`](https://react.dev/reference/react/startTransition). This means that, for example, if one of your components in a destination route suspends and you have not provided a [`Suspense`](https://react.dev/reference/react/Suspense) boundary to show a fallback, React will delay the rendering of the new UI and show the old UI until that asynchronous operation resolves. This could be useful for waiting for things such as waiting for images or CSS files to load (and technically, yes, you could use it for data loading but we'd still recommend using loaders for that 😀). For a quick overview of this usage, check out [Ryan's demo on Twitter](https://twitter.com/remix_run/status/1658976420767604736).

### Minor Changes

- Wrap internal router state updates with `React.startTransition` ( [#10438](https://github.com/remix-run/react-router/pull/10438))

### Patch Changes

- Allow fetcher revalidations to complete if submitting fetcher is deleted ( [#10535](https://github.com/remix-run/react-router/pull/10535))
- Re-throw `DOMException` ( `DataCloneError`) when attempting to perform a `PUSH` navigation with non-serializable state. ( [#10427](https://github.com/remix-run/react-router/pull/10427))
- Ensure revalidations happen when hash is present ( [#10516](https://github.com/remix-run/react-router/pull/10516))
- Upgrade `jest` and `jsdom` ( [#10453](https://github.com/remix-run/react-router/pull/10453))
- Updated dependencies:
  - `@remix-run/router@1.6.3` ( [Changelog](https://github.com/remix-run/react-router/blob/main/packages/router/CHANGELOG.md#163))

**Full Changelog**: [`v6.11.2...v6.12.0`](https://github.com/remix-run/react-router/compare/react-router@6.11.2...react-router@6.12.0)

## v6.11.2

Date: 2023-05-17

### Patch Changes

- Fix `basename` duplication in descendant `<Routes>` inside a `<RouterProvider>` ( [#10492](https://github.com/remix-run/react-router/pull/10492))
- Fix bug where initial data load would not kick off when hash is present ( [#10493](https://github.com/remix-run/react-router/pull/10493))
- Export `SetURLSearchParams` type ( [#10444](https://github.com/remix-run/react-router/pull/10444))
- Fix Remix HMR-driven error boundaries by properly reconstructing new routes and `manifest` in `_internalSetRoutes` ( [#10437](https://github.com/remix-run/react-router/pull/10437))

**Full Changelog**: [`v6.11.1...v6.11.2`](https://github.com/remix-run/react-router/compare/react-router@6.11.1...react-router@6.11.2)

## v6.11.1

Date: 2023-05-03

### Patch Changes

- Fix usage of `Component` API within descendant `<Routes>` ( [#10434](https://github.com/remix-run/react-router/pull/10434))
- Fix bug when calling `useNavigate` from `<Routes>` inside a `<RouterProvider>` ( [#10432](https://github.com/remix-run/react-router/pull/10432))
- Fix usage of `<Navigate>` in strict mode when using a data router ( [#10435](https://github.com/remix-run/react-router/pull/10435))
- Fix `basename` handling when navigating without a path ( [#10433](https://github.com/remix-run/react-router/pull/10433))
- "Same hash" navigations no longer re-run loaders to match browser behavior (i.e. `/path#hash -> /path#hash`) ( [#10408](https://github.com/remix-run/react-router/pull/10408))

**Full Changelog**: [`v6.11.0...v6.11.1`](https://github.com/remix-run/react-router/compare/react-router@6.11.0...react-router@6.11.1)

## v6.11.0

Date: 2023-04-28

### Minor Changes

- Enable `basename` support in `useFetcher` ( [#10336](https://github.com/remix-run/react-router/pull/10336))

  - If you were previously working around this issue by manually prepending the `basename` then you will need to remove the manually prepended `basename` from your `fetcher` calls ( `fetcher.load('/basename/route') -> fetcher.load('/route')`)
- Updated dependencies:
  - `@remix-run/router@1.6.0` ( [Changelog](https://github.com/remix-run/react-router/blob/main/packages/router/CHANGELOG.md#160))

### Patch Changes

- When using a `RouterProvider`, `useNavigate`/ `useSubmit`/ `fetcher.submit` are now stable across location changes, since we can handle relative routing via the `@remix-run/router` instance and get rid of our dependence on `useLocation()` ( [#10336](https://github.com/remix-run/react-router/pull/10336))

  - When using `BrowserRouter`, these hooks remain unstable across location changes because they still rely on `useLocation()`
- Fetchers should no longer revalidate on search params changes or routing to the same URL, and will only revalidate on `action` submissions or `router.revalidate` calls ( [#10344](https://github.com/remix-run/react-router/pull/10344))
- Fix inadvertent re-renders when using `Component` instead of `element` on a route definition ( [#10287](https://github.com/remix-run/react-router/pull/10287))
- Fail gracefully on `<Link to="//">` and other invalid URL values ( [#10367](https://github.com/remix-run/react-router/pull/10367))
- Switched from `useSyncExternalStore` to `useState` for internal `@remix-run/router` router state syncing in `<RouterProvider>`. We found some [subtle bugs](https://codesandbox.io/s/use-sync-external-store-loop-9g7b81) where router state updates got propagated _before_ other normal `useState` updates, which could lead to foot guns in `useEffect` calls. ( [#10377](https://github.com/remix-run/react-router/pull/10377), [#10409](https://github.com/remix-run/react-router/pull/10409))
- Log loader/action errors caught by the default error boundary to the console in dev for easier stack trace evaluation ( [#10286](https://github.com/remix-run/react-router/pull/10286))
- Fix bug preventing rendering of descendant `<Routes>` when `RouterProvider` errors existed ( [#10374](https://github.com/remix-run/react-router/pull/10374))
- Fix detection of `useNavigate` in the render cycle by setting the `activeRef` in a layout effect, allowing the `navigate` function to be passed to child components and called in a `useEffect` there ( [#10394](https://github.com/remix-run/react-router/pull/10394))
- Allow `useRevalidator()` to resolve a loader-driven error boundary scenario ( [#10369](https://github.com/remix-run/react-router/pull/10369))
- Enhance `LoaderFunction`/ `ActionFunction` return type to prevent `undefined` from being a valid return value ( [#10267](https://github.com/remix-run/react-router/pull/10267))
- Ensure proper 404 error on `fetcher.load` call to a route without a `loader` ( [#10345](https://github.com/remix-run/react-router/pull/10345))
- Decouple `AbortController` usage between revalidating fetchers and the thing that triggered them such that the unmount/deletion of a revalidating fetcher doesn't impact the ongoing triggering navigation/revalidation ( [#10271](https://github.com/remix-run/react-router/pull/10271))

**Full Changelog**: [`v6.10.0...v6.11.0`](https://github.com/remix-run/react-router/compare/react-router@6.10.0...react-router@6.11.0)

## v6.10.0

Date: 2023-03-29

### What's Changed

We recently published a post over on the Remix Blog titled ["Future Proofing Your Remix App"](https://remix.run/blog/future-flags) that goes through our strategy to ensure smooth upgrades for your Remix and React Router apps going forward. React Router `6.10.0` adds support for these flags (for data routers) which you can specify when you create your router:

```
const router = createBrowserRouter(routes, {
  future: {
    // specify future flags here
  },
});

```

Copy code to clipboard

You can also check out the docs [here](https://reactrouter.com/en/dev/guides/api-development-strategy) and [here](https://reactrouter.com/en/dev/routers/create-browser-router#future).

### Minor Changes

#### `future.v7_normalizeFormMethod`

The first future flag being introduced is `future.v7_normalizeFormMethod` which will normalize the exposed `useNavigation()/useFetcher()` `formMethod` fields as uppercase HTTP methods to align with the `fetch()` (and some Remix) behavior. ( [#10207](https://github.com/remix-run/react-router/pull/10207))

- When `future.v7_normalizeFormMethod` is unspecified or set to `false` (default v6 behavior),

  - `useNavigation().formMethod` is lowercase
  - `useFetcher().formMethod` is lowercase
- When `future.v7_normalizeFormMethod === true`:

  - `useNavigation().formMethod` is UPPERCASE
  - `useFetcher().formMethod` is UPPERCASE

### Patch Changes

- Fix `createStaticHandler` to also check for `ErrorBoundary` on routes in addition to `errorElement` ( [#10190](https://github.com/remix-run/react-router/pull/10190))
- Fix route ID generation when using Fragments in `createRoutesFromElements` ( [#10193](https://github.com/remix-run/react-router/pull/10193))
- Provide fetcher submission to `shouldRevalidate` if the fetcher action redirects ( [#10208](https://github.com/remix-run/react-router/pull/10208))
- Properly handle `lazy()` errors during router initialization ( [#10201](https://github.com/remix-run/react-router/pull/10201))
- Remove `instanceof` check for `DeferredData` to be resilient to ESM/CJS boundaries in SSR bundling scenarios ( [#10247](https://github.com/remix-run/react-router/pull/10247))
- Update to latest `@remix-run/web-fetch@4.3.3` ( [#10216](https://github.com/remix-run/react-router/pull/10216))

**Full Changelog**: [`v6.9.0...v6.10.0`](https://github.com/remix-run/react-router/compare/react-router@6.9.0...react-router@6.10.0)

## v6.9.0

Date: 2023-03-10

### What's Changed

#### `Component`/ `ErrorBoundary` route properties

React Router now supports an alternative way to define your route `element` and `errorElement` fields as React Components instead of React Elements. You can instead pass a React Component to the new `Component` and `ErrorBoundary` fields if you choose. There is no functional difference between the two, so use whichever approach you prefer 😀. You shouldn't be defining both, but if you do `Component`/ `ErrorBoundary` will "win"

**Example JSON Syntax**

```
// Both of these work the same:
const elementRoutes = [{\
  path: '/',\
  element: <Home />,\
  errorElement: <HomeError />,\
}]

const componentRoutes = [{\
  path: '/',\
  Component: Home,\
  ErrorBoundary: HomeError,\
}]

function Home() { ... }
function HomeError() { ... }

```

Copy code to clipboard

**Example JSX Syntax**

```
// Both of these work the same:
const elementRoutes = createRoutesFromElements(
  <Route path='/' element={<Home />} errorElement={<HomeError /> } />
);

const componentRoutes = createRoutesFromElements(
  <Route path='/' Component={Home} ErrorBoundary={HomeError} />
);

function Home() { ... }
function HomeError() { ... }

```

Copy code to clipboard

#### Introducing Lazy Route Modules

In order to keep your application bundles small and support code-splitting of your routes, we've introduced a new `lazy()` route property. This is an async function that resolves the non-route-matching portions of your route definition ( `loader`, `action`, `element`/ `Component`, `errorElement`/ `ErrorBoundary`, `shouldRevalidate`, `handle`).

Lazy routes are resolved on initial load and during the `loading` or `submitting` phase of a navigation or fetcher call. You cannot lazily define route-matching properties ( `path`, `index`, `children`) since we only execute your lazy route functions after we've matched known routes.

Your `lazy` functions will typically return the result of a dynamic import.

```
// In this example, we assume most folks land on the homepage so we include that
// in our critical-path bundle, but then we lazily load modules for /a and /b so
// they don't load until the user navigates to those routes
let routes = createRoutesFromElements(
  <Route path="/" element={<Layout />}>
    <Route index element={<Home />} />
    <Route path="a" lazy={() => import("./a")} />
    <Route path="b" lazy={() => import("./b")} />
  </Route>
);

```

Copy code to clipboard

Then in your lazy route modules, export the properties you want defined for the route:

```
export async function loader({ request }) {
  let data = await fetchData(request);
  return json(data);
}

// Export a `Component` directly instead of needing to create a React Element from it
export function Component() {
  let data = useLoaderData();

  return (
    <>
      <h1>You made it!</h1>
      <p>{data}</p>
    </>
  );
}

// Export an `ErrorBoundary` directly instead of needing to create a React Element from it
export function ErrorBoundary() {
  let error = useRouteError();
  return isRouteErrorResponse(error) ? (
    <h1>
      {error.status} {error.statusText}
    </h1>
  ) : (
    <h1>{error.message || error}</h1>
  );
}

```

Copy code to clipboard

An example of this in action can be found in the [`examples/lazy-loading-router-provider`](https://github.com/remix-run/react-router/tree/main/examples/lazy-loading-router-provider) directory of the repository. For more info, check out the [`lazy` docs](https://reactrouter.com/v6/route/lazy).

🙌 Huge thanks to @rossipedia for the [Initial Proposal](https://github.com/remix-run/react-router/discussions/9826) and [POC Implementation](https://github.com/remix-run/react-router/pull/9830).

### Minor Changes

- Add support for `route.Component`/ `route.ErrorBoundary` properties ( [#10045](https://github.com/remix-run/react-router/pull/10045))
- Add support for `route.lazy` ( [#10045](https://github.com/remix-run/react-router/pull/10045))

### Patch Changes

- Improve memoization for context providers to avoid unnecessary re-renders ( [#9983](https://github.com/remix-run/react-router/pull/9983))
- Fix `generatePath` incorrectly applying parameters in some cases ( [#10078](https://github.com/remix-run/react-router/pull/10078))
- `[react-router-dom-v5-compat]` Add missed data router API re-exports ( [#10171](https://github.com/remix-run/react-router/pull/10171))

**Full Changelog**: [`v6.8.2...v6.9.0`](https://github.com/remix-run/react-router/compare/react-router@6.8.2...react-router@6.9.0)

## v6.8.2

Date: 2023-02-27

### Patch Changes

- Treat same-origin absolute URLs in `<Link to>` as external if they are outside of the router `basename` ( [#10135](https://github.com/remix-run/react-router/pull/10135))
- Correctly perform a hard redirect for same-origin absolute URLs outside of the router `basename` ( [#10076](https://github.com/remix-run/react-router/pull/10076))
- Fix SSR of absolute `<Link to>` urls ( [#10112](https://github.com/remix-run/react-router/pull/10112))
- Properly escape HTML characters in `StaticRouterProvider` serialized hydration data ( [#10068](https://github.com/remix-run/react-router/pull/10068))
- Fix `useBlocker` to return `IDLE_BLOCKER` during SSR ( [#10046](https://github.com/remix-run/react-router/pull/10046))
- Ensure status code and headers are maintained for `defer` loader responses in `createStaticHandler`'s `query()` method ( [#10077](https://github.com/remix-run/react-router/pull/10077))
- Change `invariant` to an `UNSAFE_invariant` export since it's only intended for internal use ( [#10066](https://github.com/remix-run/react-router/pull/10066))

**Full Changelog**: [`v6.8.1...v6.8.2`](https://github.com/remix-run/react-router/compare/react-router@6.8.1...react-router@6.8.2)

## v6.8.1

Date: 2023-02-06

### Patch Changes

- Remove inaccurate console warning for POP navigations and update active blocker logic ( [#10030](https://github.com/remix-run/react-router/pull/10030))
- Only check for differing origin on absolute URL redirects ( [#10033](https://github.com/remix-run/react-router/pull/10033))
- Improved absolute url detection in `Link` component (now also supports `mailto:` urls) ( [#9994](https://github.com/remix-run/react-router/pull/9994))
- Fix partial object (search or hash only) pathnames losing current path value ( [#10029](https://github.com/remix-run/react-router/pull/10029))

**Full Changelog**: [`v6.8.0...v6.8.1`](https://github.com/remix-run/react-router/compare/react-router@6.8.0...react-router@6.8.1)

## v6.8.0

Date: 2023-01-26

### Minor Changes

Support absolute URLs in `<Link to>`. If the URL is for the current origin, it will still do a client-side navigation. If the URL is for a different origin then it will do a fresh document request for the new origin. ( [#9900](https://github.com/remix-run/react-router/pull/9900))

```
<Link to="https://neworigin.com/some/path">    {/* Document request */}
<Link to="//neworigin.com/some/path">          {/* Document request */}
<Link to="https://www.currentorigin.com/path"> {/* Client-side navigation */}

```

Copy code to clipboard

### Patch Changes

- Fixes 2 separate issues for revalidating fetcher `shouldRevalidate` calls ( [#9948](https://github.com/remix-run/react-router/pull/9948))

  - The `shouldRevalidate` function was only being called for _explicit_ revalidation scenarios (after a mutation, manual `useRevalidator` call, or an `X-Remix-Revalidate` header used for cookie setting in Remix). It was not properly being called on _implicit_ revalidation scenarios that also apply to navigation `loader` revalidation, such as a change in search params or clicking a link for the page we're already on. It's now correctly called in those additional scenarios.
  - The parameters being passed were incorrect and inconsistent with one another since the `current*`/ `next*` parameters reflected the static `fetcher.load` URL (and thus were identical). Instead, they should have reflected the navigation that triggered the revalidation (as the `form*` parameters did). These parameters now correctly reflect the triggering navigation.
- Fix bug with search params removal via `useSearchParams` ( [#9969](https://github.com/remix-run/react-router/pull/9969))
- Respect `preventScrollReset` on `<fetcher.Form>` ( [#9963](https://github.com/remix-run/react-router/pull/9963))
- Fix navigation for hash routers on manual URL changes ( [#9980](https://github.com/remix-run/react-router/pull/9980))
- Use `pagehide` instead of `beforeunload` for `<ScrollRestoration>`. This has better cross-browser support, specifically on Mobile Safari. ( [#9945](https://github.com/remix-run/react-router/pull/9945))
- Do not short circuit on hash change only mutation submissions ( [#9944](https://github.com/remix-run/react-router/pull/9944))
- Remove `instanceof` check from `isRouteErrorResponse` to avoid bundling issues on the server ( [#9930](https://github.com/remix-run/react-router/pull/9930))
- Detect when a `defer` call only contains critical data and remove the `AbortController` ( [#9965](https://github.com/remix-run/react-router/pull/9965))
- Send the name as the value when url-encoding `File` `FormData` entries ( [#9867](https://github.com/remix-run/react-router/pull/9867))
- `react-router-dom-v5-compat` \- Fix SSR `useLayoutEffect` `console.error` when using `CompatRouter` ( [#9820](https://github.com/remix-run/react-router/pull/9820))

**Full Changelog**: [`v6.7.0...v6.8.0`](https://github.com/remix-run/react-router/compare/react-router@6.7.0...react-router@6.8.0)

## v6.7.0

Date: 2023-01-18

### Minor Changes

- Add `unstable_useBlocker`/ `unstable_usePrompt` hooks for blocking navigations within the app's location origin ( [#9709](https://github.com/remix-run/react-router/pull/9709), [#9932](https://github.com/remix-run/react-router/pull/9932))
- Add `preventScrollReset` prop to `<Form>` ( [#9886](https://github.com/remix-run/react-router/pull/9886))

### Patch Changes

- Added pass-through event listener options argument to `useBeforeUnload` ( [#9709](https://github.com/remix-run/react-router/pull/9709))
- Fix `generatePath` when optional params are present ( [#9764](https://github.com/remix-run/react-router/pull/9764))
- Update `<Await>` to accept `ReactNode` as children function return result ( [#9896](https://github.com/remix-run/react-router/pull/9896))
- Improved absolute redirect url detection in actions/loaders ( [#9829](https://github.com/remix-run/react-router/pull/9829))
- Fix URL creation with memory histories ( [#9814](https://github.com/remix-run/react-router/pull/9814))
- Fix scroll reset if a submission redirects ( [#9886](https://github.com/remix-run/react-router/pull/9886))
- Fix 404 bug with same-origin absolute redirects ( [#9913](https://github.com/remix-run/react-router/pull/9913))
- Streamline `jsdom` bug workaround in tests ( [#9824](https://github.com/remix-run/react-router/pull/9824))

**Full Changelog**: [`v6.6.2...v6.7.0`](https://github.com/remix-run/react-router/compare/react-router@6.6.2...react-router@6.7.0)

## v6.6.2

Date: 2023-01-09

### Patch Changes

- Ensure `useId` consistency during SSR ( [#9805](https://github.com/remix-run/react-router/pull/9805))

**Full Changelog**: [`v6.6.1...v6.6.2`](https://github.com/remix-run/react-router/compare/react-router@6.6.1...react-router@6.6.2)

## v6.6.1

Date: 2022-12-23

### Patch Changes

- Include submission info in `shouldRevalidate` on action redirects ( [#9777](https://github.com/remix-run/react-router/pull/9777), [#9782](https://github.com/remix-run/react-router/pull/9782))
- Reset `actionData` on action redirect to current location ( [#9772](https://github.com/remix-run/react-router/pull/9772))

**Full Changelog**: [`v6.6.0...v6.6.1`](https://github.com/remix-run/react-router/compare/react-router@6.6.0...react-router@6.6.1)

## v6.6.0

Date: 2022-12-21

### What's Changed

This minor release is primarily to stabilize our SSR APIs for Data Routers now that we've wired up the new `RouterProvider` in Remix as part of the [React Router-ing Remix](https://remix.run/blog/react-routering-remix) work.

### Minor Changes

- Remove `unstable_` prefix from `createStaticHandler`/ `createStaticRouter`/ `StaticRouterProvider` ( [#9738](https://github.com/remix-run/react-router/pull/9738))
- Add `useBeforeUnload()` hook ( [#9664](https://github.com/remix-run/react-router/pull/9664))

### Patch Changes

- Support uppercase `<Form method>` and `useSubmit` method values ( [#9664](https://github.com/remix-run/react-router/pull/9664))
- Fix `<button formmethod>` form submission overriddes ( [#9664](https://github.com/remix-run/react-router/pull/9664))
- Fix explicit `replace` on submissions and `PUSH` on submission to new paths ( [#9734](https://github.com/remix-run/react-router/pull/9734))
- Prevent `useLoaderData` usage in `errorElement` ( [#9735](https://github.com/remix-run/react-router/pull/9735))
- Proper hydration of `Error` objects from `StaticRouterProvider` ( [#9664](https://github.com/remix-run/react-router/pull/9664))
- Skip initial scroll restoration for SSR apps with `hydrationData` ( [#9664](https://github.com/remix-run/react-router/pull/9664))
- Fix a few bugs where loader/action data wasn't properly cleared on errors ( [#9735](https://github.com/remix-run/react-router/pull/9735))

**Full Changelog**: [`v6.5.0...v6.6.0`](https://github.com/remix-run/react-router/compare/react-router@6.5.0...react-router@6.6.0)

## v6.5.0

Date: 2022-12-16

### What's Changed

This release introduces support for [Optional Route Segments](https://github.com/remix-run/react-router/issues/9546). Now, adding a `?` to the end of any path segment will make that entire segment optional. This works for both static segments and dynamic parameters.

**Optional Params Examples**

- `<Route path=":lang?/about>` will match:

  - `/:lang/about`
  - `/about`
- `<Route path="/multistep/:widget1?/widget2?/widget3?">` will match:

  - `/multistep`
  - `/multistep/:widget1`
  - `/multistep/:widget1/:widget2`
  - `/multistep/:widget1/:widget2/:widget3`

**Optional Static Segment Example**

- `<Route path="/home?">` will match:

  - `/`
  - `/home`
- `<Route path="/fr?/about">` will match:

  - `/about`
  - `/fr/about`

### Minor Changes

- Allows optional routes and optional static segments ( [#9650](https://github.com/remix-run/react-router/pull/9650))

### Patch Changes

- Stop incorrectly matching on partial named parameters, i.e. `<Route path="prefix-:param">`, to align with how splat parameters work. If you were previously relying on this behavior then it's recommended to extract the static portion of the path at the `useParams` call site: ( [#9506](https://github.com/remix-run/react-router/pull/9506))

```
// Old behavior at URL /prefix-123
<Route path="prefix-:id" element={<Comp /> }>

function Comp() {
  let params = useParams(); // { id: '123' }
  let id = params.id; // "123"
  ...
}

// New behavior at URL /prefix-123
<Route path=":id" element={<Comp /> }>

function Comp() {
  let params = useParams(); // { id: 'prefix-123' }
  let id = params.id.replace(/^prefix-/, ''); // "123"
  ...
}

```

Copy code to clipboard

- Persist `headers` on `loader` `request`'s after SSR document `action` request ( [#9721](https://github.com/remix-run/react-router/pull/9721))
- Fix requests sent to revalidating loaders so they reflect a GET request ( [#9660](https://github.com/remix-run/react-router/pull/9660))
- Fix issue with deeply nested optional segments ( [#9727](https://github.com/remix-run/react-router/pull/9727))
- GET forms now expose a submission on the loading navigation ( [#9695](https://github.com/remix-run/react-router/pull/9695))
- Fix error boundary tracking for multiple errors bubbling to the same boundary ( [#9702](https://github.com/remix-run/react-router/pull/9702))

**Full Changelog**: [`v6.4.5...v6.5.0`](https://github.com/remix-run/react-router/compare/react-router@6.4.5...react-router@6.5.0)

## v6.4.5

Date: 2022-12-07

### Patch Changes

- Fix requests sent to revalidating loaders so they reflect a `GET` request ( [#9680](https://github.com/remix-run/react-router/pull/9680))
- Remove `instanceof Response` checks in favor of `isResponse` ( [#9690](https://github.com/remix-run/react-router/pull/9690))
- Fix `URL` creation in Cloudflare Pages or other non-browser-environments ( [#9682](https://github.com/remix-run/react-router/pull/9682), [#9689](https://github.com/remix-run/react-router/pull/9689))
- Add `requestContext` support to static handler `query`/ `queryRoute` ( [#9696](https://github.com/remix-run/react-router/pull/9696))

  - Note that the unstable API of `queryRoute(path, routeId)` has been changed to `queryRoute(path, { routeId, requestContext })`

**Full Changelog**: [`v6.4.4...v6.4.5`](https://github.com/remix-run/react-router/compare/react-router@6.4.4...react-router@6.4.5)

## v6.4.4

Date: 2022-11-30

### Patch Changes

- Throw an error if an `action`/ `loader` function returns `undefined` as revalidations need to know whether the loader has previously been executed. `undefined` also causes issues during SSR stringification for hydration. You should always ensure your `loader`/ `action` returns a value, and you may return `null` if you don't wish to return anything. ( [#9511](https://github.com/remix-run/react-router/pull/9511))
- Properly handle redirects to external domains ( [#9590](https://github.com/remix-run/react-router/pull/9590), [#9654](https://github.com/remix-run/react-router/pull/9654))
- Preserve the HTTP method on 307/308 redirects ( [#9597](https://github.com/remix-run/react-router/pull/9597))
- Support `basename` in static data routers ( [#9591](https://github.com/remix-run/react-router/pull/9591))
- Enhanced `ErrorResponse` bodies to contain more descriptive text in internal 403/404/405 scenarios
- Fix issues with encoded characters in `NavLink` and descendant `<Routes>` ( [#9589](https://github.com/remix-run/react-router/pull/9589), [#9647](https://github.com/remix-run/react-router/pull/9647))
- Properly serialize/deserialize `ErrorResponse` instances when using built-in hydration ( [#9593](https://github.com/remix-run/react-router/pull/9593))
- Support `basename` in static data routers ( [#9591](https://github.com/remix-run/react-router/pull/9591))
- Updated dependencies:
  - `@remix-run/router@1.0.4`
  - `react-router@6.4.4`

**Full Changelog**: [`v6.4.3...v6.4.4`](https://github.com/remix-run/react-router/compare/react-router-dom@6.4.3...react-router-dom@6.4.4)

## v6.4.3

Date: 2022-11-01

### Patch Changes

- Generate correct `<a href>` values when using `createHashRouter` ( [#9409](https://github.com/remix-run/react-router/pull/9409))
- Better handle encoding/matching with special characters in URLs and route paths ( [#9477](https://github.com/remix-run/react-router/pull/9477), [#9496](https://github.com/remix-run/react-router/pull/9496))
- Generate correct `formAction` pathnames when an `index` route also has a `path` ( [#9486](https://github.com/remix-run/react-router/pull/9486))
- Respect `relative=path` prop on `NavLink` ( [#9453](https://github.com/remix-run/react-router/pull/9453))
- Fix `NavLink` behavior for root urls ( [#9497](https://github.com/remix-run/react-router/pull/9497))
- `useRoutes` should be able to return `null` when passing `locationArg` ( [#9485](https://github.com/remix-run/react-router/pull/9485))
- Fix `initialEntries` type in `createMemoryRouter` ( [#9498](https://github.com/remix-run/react-router/pull/9498))
- Support `basename` and relative routing in `loader`/ `action` redirects ( [#9447](https://github.com/remix-run/react-router/pull/9447))
- Ignore pathless layout routes when looking for proper submission `action` function ( [#9455](https://github.com/remix-run/react-router/pull/9455))
- Add UMD build for `@remix-run/router` ( [#9446](https://github.com/remix-run/react-router/pull/9446))
- Fix `createURL` in local file execution in Firefox ( [#9464](https://github.com/remix-run/react-router/pull/9464))

**Full Changelog**: [`v6.4.2...v6.4.3`](https://github.com/remix-run/react-router/compare/react-router@6.4.2...react-router@6.4.3)

## v6.4.2

Date: 2022-10-06

### Patch Changes

- Respect `basename` in `useFormAction` ( [#9352](https://github.com/remix-run/react-router/pull/9352))
- Fix `IndexRouteObject` and `NonIndexRouteObject` types to make `hasErrorElement` optional ( [#9394](https://github.com/remix-run/react-router/pull/9394))
- Enhance console error messages for invalid usage of data router hooks ( [#9311](https://github.com/remix-run/react-router/pull/9311))
- If an index route has children, it will result in a runtime error. We have strengthened our `RouteObject`/ `RouteProps` types to surface the error in TypeScript. ( [#9366](https://github.com/remix-run/react-router/pull/9366))

**Full Changelog**: [`v6.4.1...v6.4.2`](https://github.com/remix-run/react-router/compare/react-router@6.4.1...react-router@6.4.2)

## v6.4.1

Date: 2022-09-22

### Patch Changes

- Preserve state from `initialEntries` ( [#9288](https://github.com/remix-run/react-router/pull/9288))
- Preserve `?index` for fetcher get submissions to index routes ( [#9312](https://github.com/remix-run/react-router/pull/9312))

**Full Changelog**: [`v6.4.0...v6.4.1`](https://github.com/remix-run/react-router/compare/react-router@6.4.0...react-router@6.4.1)

## v6.4.0

Date: 2022-09-13

### What's Changed

#### Remix Data APIs

Whoa this is a big one! `6.4.0` brings all the data loading and mutation APIs over from Remix. Here's a quick high level overview, but it's recommended you go check out the [docs](https://reactrouter.com/), especially the [feature overview](https://reactrouter.com/en/6.4.0/start/overview) and the [tutorial](https://reactrouter.com/en/6.4.0/start/tutorial).

**New `react-router` APIs**

- Create your router with `createMemoryRouter`
- Render your router with `<RouterProvider>`
- Load data with a Route `loader` and mutate with a Route `action`
- Handle errors with Route `errorElement`
- Defer non-critical data with `defer` and `Await`

**New `react-router-dom` APIs**

- Create your router with `createBrowserRouter`/ `createHashRouter`
- Submit data with the new `<Form>` component
- Perform in-page data loads and mutations with `useFetcher()`
- Defer non-critical data with `defer` and `Await`
- Manage scroll position with `<ScrollRestoration>`
- Perform path-relative navigations with `<Link relative="path">` ( [#9160](https://github.com/remix-run/react-router/pull/9160))

### Patch Changes

- Path resolution is now trailing slash agnostic ( [#8861](https://github.com/remix-run/react-router/pull/8861))
- `useLocation` returns the scoped location inside a `<Routes location>` component ( [#9094](https://github.com/remix-run/react-router/pull/9094))
- Respect the `<Link replace>` prop if it is defined ( [#8779](https://github.com/remix-run/react-router/pull/8779))

**Full Changelog**: [`v6.3.0...v6.4.0`](https://github.com/remix-run/react-router/compare/v6.3.0...react-router%406.4.0)

## v6.3.0

Date: 2022-03-31

### Minor Changes

- Added the v5 to v6 backwards compatibility package 💜 ( [#8752](https://github.com/remix-run/react-router/pull/8752)). The official guide can be found [in this discussion](https://github.com/remix-run/react-router/discussions/8753)

**Full Changelog**: [`v6.2.2...v6.3.0`](https://github.com/remix-run/react-router/compare/v6.2.2...v6.3.0)

## v6.2.2

Date: 2022-02-28

### Patch Changes

- Fixed nested splat routes that begin with special URL-safe characters ( [#8563](https://github.com/remix-run/react-router/pull/8563))
- Fixed a bug where index routes were missing route context in some cases ( [#8497](https://github.com/remix-run/react-router/pull/8497))

**Full Changelog**: [`v6.2.1...v6.2.2`](https://github.com/remix-run/react-router/compare/v6.2.1...v6.2.2)

## v6.2.1

Date: 2021-12-17

### Patch Changes

- This release updates the internal `history` dependency to `5.2.0`.

**Full Changelog**: [`v6.2.0...v6.2.1`](https://github.com/remix-run/react-router/compare/v6.2.0...v6.2.1)

## v6.2.0

Date: 2021-12-17

### Minor Changes

- We now use statically analyzable CJS exports. This enables named imports in Node ESM scripts ( [See the commit](https://github.com/remix-run/react-router/commit/29c7fc8b5f853b0b06ecd0f5682a9bbe6eca0715)).

### Patch Changes

- Fixed the `RouteProps` `element` type, which should be a `ReactNode` ( [#8473](https://github.com/remix-run/react-router/pull/8473))
- Fixed a bug with `useOutlet` for top-level routes ( [#8483](https://github.com/remix-run/react-router/pull/8483))

**Full Changelog**: [`v6.1.1...v6.2.0`](https://github.com/remix-run/react-router/compare/v6.1.1...v6.2.0)

## v6.1.1

Date: 2021-12-11

### Patch Changes

- In v6.1.0 we inadvertently shipped a new, undocumented API that will likely introduce bugs ( [#7586](https://github.com/remix-run/react-router/pull/7586)). We have flagged `HistoryRouter` as `unstable_HistoryRouter`, as this API will likely need to change before a new major release.

**Full Changelog**: [`v6.1.0...v6.1.1`](https://github.com/remix-run/react-router/compare/v6.1.0...v6.1.1)

## v6.1.0

Date: 2021-12-10

### Minor Changes

- `<Outlet>` can now receive a `context` prop. This value is passed to child routes and is accessible via the new `useOutletContext` hook. See [the API docs](https://reactrouter.com/docs/en/v6/api#useoutletcontext) for details. ( [#8461](https://github.com/remix-run/react-router/pull/8461))
- `<NavLink>` can now receive a child function for access to its props. ( [#8164](https://github.com/remix-run/react-router/pull/8164))
- Improved TypeScript signature for `useMatch` and `matchPath`. For example, when you call `useMatch("foo/:bar/:baz")`, the path is parsed and the return type will be `PathMatch<"bar" | "baz">`. ( [#8030](https://github.com/remix-run/react-router/pull/8030))

### Patch Changes

- Fixed a bug that broke support for base64 encoded IDs on nested routes ( [#8291](https://github.com/remix-run/react-router/pull/8291))
- A few error message improvements ( [#8202](https://github.com/remix-run/react-router/pull/8202))

**Full Changelog**: [`v6.0.2...v6.1.0`](https://github.com/remix-run/react-router/compare/v6.0.2...v6.1.0)

## v6.0.2

Date: 2021-11-09

### Patch Changes

- Added the `reloadDocument` prop to `<Link>`. This allows `<Link>` to function like a normal anchor tag by reloading the document after navigation while maintaining the relative `to` resolution ( [#8283](https://github.com/remix-run/react-router/pull/8283))

**Full Changelog**: [`v6.0.1...v6.0.2`](https://github.com/remix-run/react-router/compare/v6.0.1...v6.0.2)

## v6.0.1

Date: 2021-11-05

### Patch Changes

- Add a default `<StaticRouter location>` value ( [#8243](https://github.com/remix-run/react-router/pull/8243))
- Add invariant for using `<Route>` inside `<Routes>` to help people make the change ( [#8238](https://github.com/remix-run/react-router/pull/8238))

**Full Changelog**: [`v6.0.0...v6.0.1`](https://github.com/remix-run/react-router/compare/v6.0.0...v6.0.1)

## v6.0.0

Date: 2021-11-03

React Router v6 is here!

Please go read [our blog post for more information on all the great stuff in v6](https://remix.run/blog/react-router-v6) including [notes about how to upgrade from React Router v5](https://remix.run/blog/react-router-v6#upgrading-to-react-router-v6) and Reach Router.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [@react-router/cloudflare](https://api.reactrouter.com/v7/modules/_react_router_cloudflare.html)

# Module @react-router/cloudflare

Cloudflare platform abstractions for React Router

```bash
npm install @react-router/cloudflare @cloudflare/workers-types
Copy
```

### Index

### Interfaces

[createPagesFunctionHandlerParams](https://api.reactrouter.com/v7/interfaces/_react_router_cloudflare.createPagesFunctionHandlerParams.html)

### Type Aliases

[GetLoadContextFunction](https://api.reactrouter.com/v7/types/_react_router_cloudflare.GetLoadContextFunction.html) [RequestHandler](https://api.reactrouter.com/v7/types/_react_router_cloudflare.RequestHandler.html)

### Functions

[createPagesFunctionHandler](https://api.reactrouter.com/v7/functions/_react_router_cloudflare.createPagesFunctionHandler.html) [createRequestHandler](https://api.reactrouter.com/v7/functions/_react_router_cloudflare.createRequestHandler.html) [createWorkersKVSessionStorage](https://api.reactrouter.com/v7/functions/_react_router_cloudflare.createWorkersKVSessionStorage.html)

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/upgrading/router-provider) [dev](https://reactrouter.com/dev/upgrading/router-provider)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Framework Adoption from RouterProvider

On this page

- [Features](https://reactrouter.com/upgrading/router-provider#features)
- [Prerequisites](https://reactrouter.com/upgrading/router-provider#prerequisites)
- [1\. Move route definitions into route modules](https://reactrouter.com/upgrading/router-provider#1-move-route-definitions-into-route-modules)
- [2\. Install the Vite plugin](https://reactrouter.com/upgrading/router-provider#2-install-the-vite-plugin)
- [3\. Add the React Router config](https://reactrouter.com/upgrading/router-provider#3-add-the-react-router-config)
- [4\. Add the Root entry point](https://reactrouter.com/upgrading/router-provider#4-add-the-root-entry-point)
- [5\. Add client entry module (optional)](https://reactrouter.com/upgrading/router-provider#5-add-client-entry-module-optional)
- [6\. Migrate your routes](https://reactrouter.com/upgrading/router-provider#6-migrate-your-routes)
- [7\. Boot the app](https://reactrouter.com/upgrading/router-provider#7-boot-the-app)
- [Enable SSR and/or Pre-rendering](https://reactrouter.com/upgrading/router-provider#enable-ssr-andor-pre-rendering)

- [Features](https://reactrouter.com/upgrading/router-provider#features)
- [Prerequisites](https://reactrouter.com/upgrading/router-provider#prerequisites)
- [1\. Move route definitions into route modules](https://reactrouter.com/upgrading/router-provider#1-move-route-definitions-into-route-modules)
- [2\. Install the Vite plugin](https://reactrouter.com/upgrading/router-provider#2-install-the-vite-plugin)
- [3\. Add the React Router config](https://reactrouter.com/upgrading/router-provider#3-add-the-react-router-config)
- [4\. Add the Root entry point](https://reactrouter.com/upgrading/router-provider#4-add-the-root-entry-point)
- [5\. Add client entry module (optional)](https://reactrouter.com/upgrading/router-provider#5-add-client-entry-module-optional)
- [6\. Migrate your routes](https://reactrouter.com/upgrading/router-provider#6-migrate-your-routes)
- [7\. Boot the app](https://reactrouter.com/upgrading/router-provider#7-boot-the-app)
- [Enable SSR and/or Pre-rendering](https://reactrouter.com/upgrading/router-provider#enable-ssr-andor-pre-rendering)

# Framework Adoption from RouterProvider

If you are not using `<RouterProvider>` please see [Framework Adoption from Component Routes](https://reactrouter.com/upgrading/component-routes) instead.

The React Router Vite plugin adds framework features to React Router. This guide will help you adopt the plugin in your app. If you run into any issues, please reach out for help on [Twitter](https://x.com/remix_run) or [Discord](https://rmx.as/discord).

## Features

The Vite plugin adds:

- Route loaders, actions, and automatic data revalidation
- Typesafe Routes Modules
- Automatic route code-splitting
- Automatic scroll restoration across navigations
- Optional Static pre-rendering
- Optional Server rendering

The initial setup requires the most work. However, once complete, you can adopt new features incrementally.

## Prerequisites

To use the Vite plugin, your project requires:

- Node.js 20+ (if using Node as your runtime)
- Vite 5+

## 1\. Move route definitions into route modules

The React Router Vite plugin renders its own `RouterProvider`, so you can't render an existing `RouterProvider` within it. Instead, you will need to format all of your route definitions to match the [Route Module API](https://reactrouter.com/start/framework/route-module).

This step will take the longest, however there are several benefits to doing this regardless of adopting the React Router Vite plugin:

- Route modules will be lazy loaded, decreasing the initial bundle size of your app
- Route definitions will be uniform, simplifying your app's architecture
- Moving to route modules is incremental, you can migrate one route at a time

**👉 Move your route definitions into route modules**

Export each piece of your route definition as a separate named export, following the [Route Module API](https://reactrouter.com/start/framework/route-module).

```
export async function clientLoader() {
  return {
    title: "About",
  };
}

export default function About() {
  let data = useLoaderData();
  return <div>{data.title}</div>;
}

// clientAction, ErrorBoundary, etc.

```

Copy code to clipboard

**👉 Create a convert function**

Create a helper function to convert route module definitions into the format expected by your data router:

```
function convert(m: any) {
  let {
    clientLoader,
    clientAction,
    default: Component,
    ...rest
  } = m;
  return {
    ...rest,
    loader: clientLoader,
    action: clientAction,
    Component,
  };
}

```

Copy code to clipboard

**👉 Lazy load and convert your route modules**

Instead of importing your route modules directly, lazy load and convert them to the format expected by your data router.

Not only does your route definition now conform to the Route Module API, but you also get the benefits of code-splitting your routes.

```
let router = createBrowserRouter([\
  // ... other routes\
  {\
    path: "about",\
-   loader: aboutLoader,\
-   Component: About,\
+   lazy: () => import("./routes/about").then(convert),\
  },\
  // ... other routes\
]);

```

Copy code to clipboard

Repeat this process for each route in your app.

## 2\. Install the Vite plugin

Once all of your route definitions are converted to route modules, you can adopt the React Router Vite plugin.

**👉 Install the React Router Vite plugin**

```
npm install -D @react-router/dev

```

Copy code to clipboard

**👉 Install a runtime adapter**

We will assume you are using Node as your runtime.

```
npm install @react-router/node

```

Copy code to clipboard

**👉 Swap out the React plugin for React Router**

```
-import react from '@vitejs/plugin-react'
+import { reactRouter } from "@react-router/dev/vite";
import { defineConfig } from "vite";

export default defineConfig({
  plugins: [\
-    react()\
+    reactRouter()\
  ],
});

```

Copy code to clipboard

## 3\. Add the React Router config

**👉 Create a `react-router.config.ts` file**

Add the following to the root of your project. In this config you can tell React Router about your project, like where to find the app directory and to not use SSR (server-side rendering) for now.

```
touch react-router.config.ts

```

Copy code to clipboard

```
import type { Config } from "@react-router/dev/config";

export default {
  appDirectory: "src",
  ssr: false,
} satisfies Config;

```

Copy code to clipboard

## 4\. Add the Root entry point

In a typical Vite app, the `index.html` file is the entry point for bundling. The React Router Vite plugin moves the entry point to a `root.tsx` file so you can use React to render the shell of your app instead of static HTML, and eventually upgrade to Server Rendering if you want.

**👉 Move your existing `index.html` to `root.tsx`**

For example, if your current `index.html` looks like this:

```
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0"
    />
    <title>My App</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

```

Copy code to clipboard

You would move that markup into `src/root.tsx` and delete `index.html`:

```
touch src/root.tsx

```

Copy code to clipboard

```
import {
  Links,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from "react-router";

export function Layout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        <meta charSet="UTF-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1.0"
        />
        <title>My App</title>
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

export default function Root() {
  return <Outlet />;
}

```

Copy code to clipboard

**👉 Move everything above `RouterProvider` to `root.tsx`**

Any global styles, context providers, etc. should be moved into `root.tsx` so they can be shared across all routes.

For example, if your `App.tsx` looks like this:

```
import "./index.css";

export default function App() {
  return (
    <OtherProviders>
      <AppLayout>
        <RouterProvider router={router} />
      </AppLayout>
    </OtherProviders>
  );
}

```

Copy code to clipboard

You would move everything above the `RouterProvider` into `root.tsx`.

```
+import "./index.css";

// ... other imports and Layout

export default function Root() {
  return (
+   <OtherProviders>
+     <AppLayout>
        <Outlet />
+     </AppLayout>
+   </OtherProviders>
  );
}

```

Copy code to clipboard

## 5\. Add client entry module (optional)

In the typical Vite app the `index.html` file points to `src/main.tsx` as the client entry point. React Router uses a file named `src/entry.client.tsx` instead.

If no `entry.client.tsx` exists, the React Router Vite plugin will use a default, hidden one.

**👉 Make `src/entry.client.tsx` your entry point**

If your current `src/main.tsx` looks like this:

```
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router";
import App from "./App";

const router = createBrowserRouter([\
  // ... route definitions\
]);

ReactDOM.createRoot(
  document.getElementById("root")!
).render(
  <React.StrictMode>
    <RouterProvider router={router} />;
  </React.StrictMode>
);

```

Copy code to clipboard

You would rename it to `entry.client.tsx` and change it to this:

```
import React from "react";
import ReactDOM from "react-dom/client";
import { HydratedRouter } from "react-router/dom";

ReactDOM.hydrateRoot(
  document,
  <React.StrictMode>
    <HydratedRouter />
  </React.StrictMode>
);

```

Copy code to clipboard

- Use `hydrateRoot` instead of `createRoot`
- Render a `<HydratedRouter>` instead of your `<App/>` component
- Note: We are no longer creating the routes and manually passing them to `<RouterProvider />`. We will migrate our route definitions in the next step.

## 6\. Migrate your routes

The React Router Vite plugin uses a `routes.ts` file to configure your routes. The format will be pretty similar to the definitions of your data router.

**👉 Move definitions to a `routes.ts` file**

```
touch src/routes.ts src/catchall.tsx

```

Copy code to clipboard

Move your route definitions to `routes.ts`. Note that the schemas don't match exactly, so you will get type errors; we'll fix this next.

```
+import type { RouteConfig } from "@react-router/dev/routes";

-const router = createBrowserRouter([\
+export default [\
  {\
    path: "/",\
    lazy: () => import("./routes/layout").then(convert),\
    children: [\
      {\
        index: true,\
        lazy: () => import("./routes/home").then(convert),\
      },\
      {\
        path: "about",\
        lazy: () => import("./routes/about").then(convert),\
      },\
      {\
        path: "todos",\
        lazy: () => import("./routes/todos").then(convert),\
        children: [\
          {\
            path: ":id",\
            lazy: () =>\
              import("./routes/todo").then(convert),\
          },\
        ],\
      },\
    ],\
  },\
-]);\
+] satisfies RouteConfig;

```

Copy code to clipboard

**👉 Replace the `lazy` loader with a `file` loader**

```
export default [\
  {\
    path: "/",\
-   lazy: () => import("./routes/layout").then(convert),\
+   file: "./routes/layout.tsx",\
    children: [\
      {\
        index: true,\
-       lazy: () => import("./routes/home").then(convert),\
+       file: "./routes/home.tsx",\
      },\
      {\
        path: "about",\
-       lazy: () => import("./routes/about").then(convert),\
+       file: "./routes/about.tsx",\
      },\
      {\
        path: "todos",\
-       lazy: () => import("./routes/todos").then(convert),\
+       file: "./routes/todos.tsx",\
        children: [\
          {\
            path: ":id",\
-           lazy: () => import("./routes/todo").then(convert),\
+           file: "./routes/todo.tsx",\
          },\
        ],\
      },\
    ],\
  },\
] satisfies RouteConfig;

```

Copy code to clipboard

[View our guide on configuring routes](https://reactrouter.com/start/framework/routing) to learn more about the `routes.ts` file and helper functions to further simplify the route definitions.

## 7\. Boot the app

At this point you should be fully migrated to the React Router Vite plugin. Go ahead and update your `dev` script and run the app to make sure everything is working.

**👉 Add `dev` script and run the app**

```
"scripts": {
  "dev": "react-router dev"
}

```

Copy code to clipboard

Now make sure you can boot your app at this point before moving on:

```
npm run dev

```

Copy code to clipboard

You will probably want to add `.react-router/` to your `.gitignore` file to avoid tracking unnecessary files in your repository.

```txt
.react-router/

```

You can checkout [Type Safety](https://reactrouter.com/how-to/route-module-type-safety) to learn how to fully setup and use autogenerated type safety for params, loader data, and more.

## Enable SSR and/or Pre-rendering

If you want to enable server rendering and static pre-rendering, you can do so with the `ssr` and `prerender` options in the bundler plugin. For SSR you'll need to also deploy the server build to a server. See [Deploying](https://reactrouter.com/start/deploying) for more information.

```
import type { Config } from "@react-router/dev/config";

export default {
  ssr: true,
  async prerender() {
    return ["/", "/about", "/contact"];
  },
} satisfies Config;

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/upgrading/router-provider.md)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [@react-router/dev](https://api.reactrouter.com/v7/modules/_react_router_dev.html)

# Module @react-router/dev

Dev tools and CLI for React Router that enables framework features through bundler integration like server rendering, code splitting, HMR, etc.

```sh
npm install @react-router/dev
Copy
```

### Index

### Modules

[config](https://api.reactrouter.com/v7/modules/_react_router_dev.config.html) [routes](https://api.reactrouter.com/v7/modules/_react_router_dev.routes.html) [vite](https://api.reactrouter.com/v7/modules/_react_router_dev.vite.html) [vite/cloudflare](https://api.reactrouter.com/v7/modules/_react_router_dev.vite_cloudflare.html)

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR![React Router logo](<Base64-Image-Removed>)

[Remix](https://remix.run/)

/

[React Router](https://github.com/remix-run/react-router)

[Core](https://v5.reactrouter.com/core) [Web](https://v5.reactrouter.com/web) [Native](https://v5.reactrouter.com/native)

Announcements

[The Future of React Router](https://reacttraining.com/blog/reach-react-router-future/)

Guides

[Philosophy](https://v5.reactrouter.com/core/guides/philosophy) [Quick Start](https://v5.reactrouter.com/core/guides/quick-start) [Testing](https://v5.reactrouter.com/core/guides/testing) [Deep Redux Integration](https://v5.reactrouter.com/core/guides/deep-redux-integration) [Static Routes](https://v5.reactrouter.com/core/guides/static-routes)

API

[Hooks](https://v5.reactrouter.com/core/api/Hooks)

[useHistory](https://v5.reactrouter.com/core/api/Hooks/usehistory) [useLocation](https://v5.reactrouter.com/core/api/Hooks/uselocation) [useParams](https://v5.reactrouter.com/core/api/Hooks/useparams) [useRouteMatch](https://v5.reactrouter.com/core/api/Hooks/useroutematch)

[<MemoryRouter>](https://v5.reactrouter.com/core/api/MemoryRouter)

[initialEntries: array](https://v5.reactrouter.com/core/api/MemoryRouter/initialentries-array) [initialIndex: number](https://v5.reactrouter.com/core/api/MemoryRouter/initialindex-number) [getUserConfirmation: func](https://v5.reactrouter.com/core/api/MemoryRouter/getuserconfirmation-func) [keyLength: number](https://v5.reactrouter.com/core/api/MemoryRouter/keylength-number) [children: node](https://v5.reactrouter.com/core/api/MemoryRouter/children-node)

[<Prompt>](https://v5.reactrouter.com/core/api/Prompt)

[message: string](https://v5.reactrouter.com/core/api/Prompt/message-string) [message: func](https://v5.reactrouter.com/core/api/Prompt/message-func) [when: bool](https://v5.reactrouter.com/core/api/Prompt/when-bool)

[<Redirect>](https://v5.reactrouter.com/core/api/Redirect)

[to: string](https://v5.reactrouter.com/core/api/Redirect/to-string) [to: object](https://v5.reactrouter.com/core/api/Redirect/to-object) [push: bool](https://v5.reactrouter.com/core/api/Redirect/push-bool) [from: string](https://v5.reactrouter.com/core/api/Redirect/from-string) [exact: bool](https://v5.reactrouter.com/core/api/Redirect/exact-bool) [strict: bool](https://v5.reactrouter.com/core/api/Redirect/strict-bool) [sensitive: bool](https://v5.reactrouter.com/core/api/Redirect/sensitive-bool)

[<Route>](https://v5.reactrouter.com/core/api/Route)

[Route render methods](https://v5.reactrouter.com/core/api/Route/route-render-methods) [Route props](https://v5.reactrouter.com/core/api/Route/route-props) [component](https://v5.reactrouter.com/core/api/Route/component) [render: func](https://v5.reactrouter.com/core/api/Route/render-func) [children: func](https://v5.reactrouter.com/core/api/Route/children-func) [path: string \| string\[\]](https://v5.reactrouter.com/core/api/Route/path-string-string) [exact: bool](https://v5.reactrouter.com/core/api/Route/exact-bool) [strict: bool](https://v5.reactrouter.com/core/api/Route/strict-bool) [location: object](https://v5.reactrouter.com/core/api/Route/location-object) [sensitive: bool](https://v5.reactrouter.com/core/api/Route/sensitive-bool)

[<Router>](https://v5.reactrouter.com/core/api/Router)

[history: object](https://v5.reactrouter.com/core/api/Router/history-object) [children: node](https://v5.reactrouter.com/core/api/Router/children-node)

[<StaticRouter>](https://v5.reactrouter.com/core/api/StaticRouter)

[basename: string](https://v5.reactrouter.com/core/api/StaticRouter/basename-string) [location: string](https://v5.reactrouter.com/core/api/StaticRouter/location-string) [location: object](https://v5.reactrouter.com/core/api/StaticRouter/location-object) [context: object](https://v5.reactrouter.com/core/api/StaticRouter/context-object) [children: node](https://v5.reactrouter.com/core/api/StaticRouter/children-node)

[<Switch>](https://v5.reactrouter.com/core/api/Switch)

[location: object](https://v5.reactrouter.com/core/api/Switch/location-object) [children: node](https://v5.reactrouter.com/core/api/Switch/children-node)

[history](https://v5.reactrouter.com/core/api/history)

[history is mutable](https://v5.reactrouter.com/core/api/history/history-is-mutable)

[location](https://v5.reactrouter.com/core/api/location)

[match](https://v5.reactrouter.com/core/api/match)

[null matches](https://v5.reactrouter.com/core/api/match/null-matches)

[withRouter](https://v5.reactrouter.com/core/api/withRouter)

[Component.WrappedComponent](https://v5.reactrouter.com/core/api/withRouter/componentwrappedcomponent) [wrappedComponentRef: func](https://v5.reactrouter.com/core/api/withRouter/wrappedcomponentref-func)

[generatePath](https://v5.reactrouter.com/core/api/generatePath)

[pattern: string](https://v5.reactrouter.com/core/api/generatePath/pattern-string) [params: object](https://v5.reactrouter.com/core/api/generatePath/params-object)

# [Philosophy](https://v5.reactrouter.com/core/guides/philosophy)

This guide’s purpose is to explain the mental model to have when using React Router. We call it “Dynamic Routing”, which is quite different from the “Static Routing” you’re probably more familiar with.

## [Static Routing](https://v5.reactrouter.com/core/guides/philosophy/static-routing)

If you’ve used Rails, Express, Ember, Angular etc. you’ve used static routing. In these frameworks, you declare your routes as part of your app’s initialization before any rendering takes place. React Router pre-v4 was also static (mostly). Let’s take a look at how to configure routes in express:

```js
// Express Style routing:
app.get("/", handleIndex);
app.get("/invoices", handleInvoices);
app.get("/invoices/:id", handleInvoice);
app.get("/invoices/:id/edit", handleInvoiceEdit);

app.listen();

```

Note how the routes are declared before the app listens. The client side routers we’ve used are similar. In Angular you declare your routes up front and then import them to the top-level `AppModule` before rendering:

```js
// Angular Style routing:
const appRoutes: Routes = [\
  {\
    path: "crisis-center",\
    component: CrisisListComponent\
  },\
  {\
    path: "hero/:id",\
    component: HeroDetailComponent\
  },\
  {\
    path: "heroes",\
    component: HeroListComponent,\
    data: { title: "Heroes List" }\
  },\
  {\
    path: "",\
    redirectTo: "/heroes",\
    pathMatch: "full"\
  },\
  {\
    path: "**",\
    component: PageNotFoundComponent\
  }\
];

@NgModule({
  imports: [RouterModule.forRoot(appRoutes)]
})
export class AppModule {}

```

Ember has a conventional `routes.js` file that the build reads and
imports into the application for you. Again, this happens before
your app renders.

```js
// Ember Style Router:
Router.map(function() {
  this.route("about");
  this.route("contact");
  this.route("rentals", function() {
    this.route("show", { path: "/:rental_id" });
  });
});

export default Router;

```

Though the APIs are different, they all share the model of “static routes”. React Router also followed that lead up until v4.

To be successful with React Router, you need to forget all that! :O

## [Backstory](https://v5.reactrouter.com/core/guides/philosophy/backstory)

To be candid, we were pretty frustrated with the direction we’d taken React Router by v2. We (Michael and Ryan) felt limited by the API, recognized we were reimplementing parts of React (lifecycles, and more), and it just didn’t match the mental model React has given us for composing UI.

We were walking through the hallway of a hotel just before a workshop discussing what to do about it. We asked each other: “What would it look like if we built the router using the patterns we teach in our workshops?”

It was only a matter of hours into development that we had a proof-of-concept that we knew was the future we wanted for routing. We ended up with API that wasn’t “outside” of React, an API that composed, or naturally fell into place, with the rest of React. We think you’ll love it.

## [Dynamic Routing](https://v5.reactrouter.com/core/guides/philosophy/dynamic-routing)

When we say dynamic routing, we mean routing that takes place **as your app is rendering**, not in a configuration or convention outside of a running app. That means almost everything is a component in React Router. Here’s a 60 second review of the API to see how it works:

First, grab yourself a `Router` component for the environment you’re targeting and render it at the top of your app.

```jsx
// react-native
import { NativeRouter } from "react-router-native";

// react-dom (what we'll use here)
import { BrowserRouter } from "react-router-dom";

ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  el
);

```

Next, grab the link component to link to a new location:

```jsx
const App = () => (
  <div>
    <nav>
      <Link to="/dashboard">Dashboard</Link>
    </nav>
  </div>
);

```

Finally, render a `Route` to show some UI when the user visits
`/dashboard`.

```jsx
const App = () => (
  <div>
    <nav>
      <Link to="/dashboard">Dashboard</Link>
    </nav>
    <div>
      <Route path="/dashboard" component={Dashboard} />
    </div>
  </div>
);

```

The `Route` will render `<Dashboard {...props}/>` where `props` are some router specific things that look like `{ match, location, history }`. If the user is **not** at `/dashboard` then the `Route` will render `null`. That’s pretty much all there is to it.

## [Nested Routes](https://v5.reactrouter.com/core/guides/philosophy/nested-routes)

Lots of routers have some concept of “nested routes”. If you’ve used versions of React Router previous to v4, you’ll know it did too! When you move from a static route configuration to dynamic, rendered routes, how do you “nest routes”? Well, how do you nest a `div`?

```jsx
const App = () => (
  <BrowserRouter>
    {/* here's a div */}
    <div>
      {/* here's a Route */}
      <Route path="/tacos" component={Tacos} />
    </div>
  </BrowserRouter>
);

// when the url matches `/tacos` this component renders
const Tacos = ({ match }) => (
  // here's a nested div
  <div>
    {/* here's a nested Route,
        match.url helps us make a relative path */}
    <Route path={match.url + "/carnitas"} component={Carnitas} />
  </div>
);

```

See how the router has no “nesting” API? `Route` is just a component, just like `div`. So to nest a `Route` or a `div`, you just … do it.

Let’s get trickier.

## [Responsive Routes](https://v5.reactrouter.com/core/guides/philosophy/responsive-routes)

Consider a user navigates to `/invoices`. Your app is adaptive to different screen sizes, they have a narrow viewport, and so you only show them the list of invoices and a link to the invoice dashboard. They can navigate deeper from there.

```asciidoc
Small Screen
url: /invoices

+----------------------+
|                      |
|      Dashboard       |
|                      |
+----------------------+
|                      |
|      Invoice 01      |
|                      |
+----------------------+
|                      |
|      Invoice 02      |
|                      |
+----------------------+
|                      |
|      Invoice 03      |
|                      |
+----------------------+
|                      |
|      Invoice 04      |
|                      |
+----------------------+

```

On a larger screen we’d like to show a master-detail view where the navigation is on the left and the dashboard or specific invoices show up on the right.

```asciidoc
Large Screen
url: /invoices/dashboard

+----------------------+---------------------------+
|                      |                           |
|      Dashboard       |                           |
|                      |   Unpaid:             5   |
+----------------------+                           |
|                      |   Balance:   $53,543.00   |
|      Invoice 01      |                           |
|                      |   Past Due:           2   |
+----------------------+                           |
|                      |                           |
|      Invoice 02      |                           |
|                      |   +-------------------+   |
+----------------------+   |                   |   |
|                      |   |  +    +     +     |   |
|      Invoice 03      |   |  | +  |     |     |   |
|                      |   |  | |  |  +  |  +  |   |
+----------------------+   |  | |  |  |  |  |  |   |
|                      |   +--+-+--+--+--+--+--+   |
|      Invoice 04      |                           |
|                      |                           |
+----------------------+---------------------------+

```

Now pause for a minute and think about the `/invoices` url for both screen sizes. Is it even a valid route for a large screen? What should we put on the right side?

```asciidoc
Large Screen
url: /invoices
+----------------------+---------------------------+
|                      |                           |
|      Dashboard       |                           |
|                      |                           |
+----------------------+                           |
|                      |                           |
|      Invoice 01      |                           |
|                      |                           |
+----------------------+                           |
|                      |                           |
|      Invoice 02      |             ???           |
|                      |                           |
+----------------------+                           |
|                      |                           |
|      Invoice 03      |                           |
|                      |                           |
+----------------------+                           |
|                      |                           |
|      Invoice 04      |                           |
|                      |                           |
+----------------------+---------------------------+

```

On a large screen, `/invoices` isn’t a valid route, but on a small screen it is! To make things more interesting, consider somebody with a giant phone. They could be looking at `/invoices` in portrait orientation and then rotate their phone to landscape. Suddenly, we have enough room to show the master-detail UI, so you ought to redirect right then!

React Router’s previous versions’ static routes didn’t really have a composable answer for this. When routing is dynamic, however, you can declaratively compose this functionality. If you start thinking about routing as UI, not as static configuration, your intuition will lead you to the following code:

```js
const App = () => (
  <AppLayout>
    <Route path="/invoices" component={Invoices} />
  </AppLayout>
);

const Invoices = () => (
  <Layout>
    {/* always show the nav */}
    <InvoicesNav />

    <Media query={PRETTY_SMALL}>
      {screenIsSmall =>
        screenIsSmall ? (
          // small screen has no redirect
          <Switch>
            <Route
              exact
              path="/invoices/dashboard"
              component={Dashboard}
            />
            <Route path="/invoices/:id" component={Invoice} />
          </Switch>
        ) : (
          // large screen does!
          <Switch>
            <Route
              exact
              path="/invoices/dashboard"
              component={Dashboard}
            />
            <Route path="/invoices/:id" component={Invoice} />
            <Redirect from="/invoices" to="/invoices/dashboard" />
          </Switch>
        )
      }
    </Media>
  </Layout>
);

```

As the user rotates their phone from portrait to landscape, this code will automatically redirect them to the dashboard. _The set of valid routes change depending on the dynamic nature of a mobile device in a user’s hands_.

This is just one example. There are many others we could discuss but we’ll sum it up with this advice: To get your intuition in line with React Router’s, think about components, not static routes. Think about how to solve the problem with React’s declarative composability because nearly every “React Router question” is probably a “React question”.![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/explanation/race-conditions) [dev](https://reactrouter.com/dev/explanation/race-conditions)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Race Conditions

# Race Conditions

While impossible to eliminate every possible race condition in your application, React Router automatically handles the most common race conditions found in web user interfaces.

## Browser Behavior

React Router's handling of network concurrency is heavily inspired by the behavior of web browsers when processing documents.

Consider clicking a link to a new document, and then clicking a different link before the new page has finished loading. The browser will:

1. cancel the first request
2. immediately process the new navigation

The same behavior applies to form submissions. When a pending form submission is interrupted by a new one, the first is canceled and the new submission is immediately processed.

## React Router Behavior

Like the browser, interrupted navigations with links and form submissions will cancel in flight data requests and immediately process the new event.

Fetchers are a bit more nuanced since they are not singleton events like navigation. Fetchers can't interrupt other fetcher instances, but they can interrupt themselves and the behavior is the same as everything else: cancel the interrupted request and immediately process the new one.

Fetchers do, however, interact with each other when it comes to revalidation. After a fetcher's action request returns to the browser, a revalidation for all page data is sent. This means multiple revalidation requests can be in-flight at the same time. React Router will commit all "fresh" revalidation responses and cancel any stale requests. A stale request is any request that started _earlier_ than one that has returned.

This management of the network prevents the most common UI bugs caused by network race conditions.

Since networks are unpredictable, and your server still processes these cancelled requests, your backend may still experience race conditions and have potential data integrity issues. These risks are the same risks as using default browser behavior with plain HTML `<forms>`, which we consider to be low, and outside the scope of React Router.

## Practical Benefits

Consider building a type-ahead combobox. As the user types, you send a request to the server. As they type each new character you send a new request. It's important to not show the user results for a value that's not in the text field anymore.

When using a fetcher, this is automatically managed for you. Consider this pseudo-code:

```
// route("/city-search", "./search-cities.ts")
export async function loader({ request }) {
  const { searchParams } = new URL(request.url);
  return searchCities(searchParams.get("q"));
}

```

Copy code to clipboard

```
export function CitySearchCombobox() {
  const fetcher = useFetcher();

  return (
    <fetcher.Form action="/city-search">
      <Combobox aria-label="Cities">
        <ComboboxInput
          name="q"
          onChange={(event) =>
            // submit the form onChange to get the list of cities
            fetcher.submit(event.target.form)
          }
        />

        {fetcher.data ? (
          <ComboboxPopover className="shadow-popup">
            {fetcher.data.length > 0 ? (
              <ComboboxList>
                {fetcher.data.map((city) => (
                  <ComboboxOption
                    key={city.id}
                    value={city.name}
                  />
                ))}
              </ComboboxList>
            ) : (
              <span>No results found</span>
            )}
          </ComboboxPopover>
        ) : null}
      </Combobox>
    </fetcher.Form>
  );
}

```

Copy code to clipboard

Calls to `fetcher.submit` will cancel pending requests on that fetcher automatically. This ensures you never show the user results for a request for a different input value.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/explanation/race-conditions.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

useSubmit

# `useSubmit`

The imperative version of `<Form>` that lets you, the programmer, submit a form instead of the user.

This feature only works if using a data router, see [Picking a Router](https://reactrouter.com/6.30.0/routers/picking-a-router)

For example, submitting the form every time a value changes inside the form:

```
import { useSubmit, Form } from "react-router-dom";

function SearchField() {
  let submit = useSubmit();
  return (
    <Form
      onChange={(event) => {
        submit(event.currentTarget);
      }}
    >
      <input type="text" name="search" />
      <button type="submit">Search</button>
    </Form>
  );
}

```

Copy code to clipboard

This can also be useful if you'd like to automatically sign someone out of your website after a period of inactivity. In this case, we've defined inactivity as the user hasn't navigated to any other pages after 5 minutes.

```
import { useSubmit, useLocation } from "react-router-dom";
import { useEffect } from "react";

function AdminPage() {
  useSessionTimeout();
  return <div>{/* ... */}</div>;
}

function useSessionTimeout() {
  const submit = useSubmit();
  const location = useLocation();

  useEffect(() => {
    const timer = setTimeout(() => {
      submit(null, { method: "post", action: "/logout" });
    }, 5 * 60_000);

    return () => clearTimeout(timer);
  }, [submit, location]);
}

```

Copy code to clipboard

## Submit target

The first argument to submit accepts many different values.

You can submit any form or form input element:

```
// input element events
<input onChange={(event) => submit(event.currentTarget)} />;

// React refs
let ref = useRef();
<button ref={ref} />;
submit(ref.current);

```

Copy code to clipboard

You can submit `FormData`:

```
let formData = new FormData();
formData.append("cheese", "gouda");
submit(formData);

```

Copy code to clipboard

Or you can submit `URLSearchParams`:

```
let searchParams = new URLSearchParams();
searchParams.append("cheese", "gouda");
submit(searchParams);

```

Copy code to clipboard

Or anything that the `URLSearchParams` constructor accepts:

```
submit("cheese=gouda&toasted=yes");
submit([\
  ["cheese", "gouda"],\
  ["toasted", "yes"],\
]);

```

Copy code to clipboard

The default behavior if you submit a JSON object for a POST submission is to encode the data into `FormData`:

```
submit(
  { key: "value" },
  {
    method: "post",
    encType: "application/x-www-form-urlencoded",
  }
);
// will serialize into request.formData() in your action
// and will show up on useNavigation().formData during the navigation

```

Copy code to clipboard

Or you can opt-into JSON encoding:

```
submit(
  { key: "value" },
  { method: "post", encType: "application/json" }
);
// will serialize into request.json() in your action
// and will show up on useNavigation().json during the navigation

submit('{"key":"value"}', {
  method: "post",
  encType: "application/json",
});
// will encode into request.json() in your action
// and will show up on useNavigation().json during the navigation

```

Copy code to clipboard

Or plain text:

```
submit("value", { method: "post", encType: "text/plain" });
// will serialize into request.text() in your action
// and will show up on useNavigation().text during the navigation

```

Copy code to clipboard

## Submit options

The second argument is a set of options that map (mostly) directly to form submission attributes:

```
submit(null, {
  method: "post",
  action: "/logout",
});

// same as
<Form action="/logout" method="post" />;

```

Copy code to clipboard

Please see the [Splat Paths](https://reactrouter.com/6.30.0/hooks/use-resolved-path#splat-paths) section on the `useResolvedPath` docs for a note on the behavior of the `future.v7_relativeSplatPath` future flag for relative `useSubmit()` `action` behavior within splat routes

Because submissions are navigations, the options may also contain the other navigation related props from [`<Form>`](https://reactrouter.com/6.30.0/components/form) such as:

- `fetcherKey`
- `navigate`
- `preventScrollReset`
- `relative`
- `replace`
- `state`
- `viewTransition`

### `options.flushSync`

The `flushSync` option tells React Router DOM to wrap the initial state update for this submission in a [`ReactDOM.flushSync`](https://react.dev/reference/react-dom/flushSync) call instead of the default [`React.startTransition`](https://react.dev/reference/react/startTransition). This allows you to perform synchronous DOM actions immediately after the update is flushed to the DOM.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/framework/route-module) [dev](https://reactrouter.com/dev/start/framework/route-module)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Route Module

On this page

- [Component ( `default`)](https://reactrouter.com/start/framework/route-module#component-default)
- [Props passed to the Component](https://reactrouter.com/start/framework/route-module#props-passed-to-the-component)
- [Using props](https://reactrouter.com/start/framework/route-module#using-props)
- [`loader`](https://reactrouter.com/start/framework/route-module#loader)
- [`clientLoader`](https://reactrouter.com/start/framework/route-module#clientloader)
- [`action`](https://reactrouter.com/start/framework/route-module#action)
- [`clientAction`](https://reactrouter.com/start/framework/route-module#clientaction)
- [`ErrorBoundary`](https://reactrouter.com/start/framework/route-module#errorboundary)
- [`HydrateFallback`](https://reactrouter.com/start/framework/route-module#hydratefallback)
- [`headers`](https://reactrouter.com/start/framework/route-module#headers)
- [`handle`](https://reactrouter.com/start/framework/route-module#handle)
- [`links`](https://reactrouter.com/start/framework/route-module#links)
- [`meta`](https://reactrouter.com/start/framework/route-module#meta)
- [`shouldRevalidate`](https://reactrouter.com/start/framework/route-module#shouldrevalidate)

- [Component ( `default`)](https://reactrouter.com/start/framework/route-module#component-default)
- [Props passed to the Component](https://reactrouter.com/start/framework/route-module#props-passed-to-the-component)
- [Using props](https://reactrouter.com/start/framework/route-module#using-props)
- [`loader`](https://reactrouter.com/start/framework/route-module#loader)
- [`clientLoader`](https://reactrouter.com/start/framework/route-module#clientloader)
- [`action`](https://reactrouter.com/start/framework/route-module#action)
- [`clientAction`](https://reactrouter.com/start/framework/route-module#clientaction)
- [`ErrorBoundary`](https://reactrouter.com/start/framework/route-module#errorboundary)
- [`HydrateFallback`](https://reactrouter.com/start/framework/route-module#hydratefallback)
- [`headers`](https://reactrouter.com/start/framework/route-module#headers)
- [`handle`](https://reactrouter.com/start/framework/route-module#handle)
- [`links`](https://reactrouter.com/start/framework/route-module#links)
- [`meta`](https://reactrouter.com/start/framework/route-module#meta)
- [`shouldRevalidate`](https://reactrouter.com/start/framework/route-module#shouldrevalidate)

# Route Module

The files referenced in `routes.ts` are called Route Modules.

```
route("teams/:teamId", "./team.tsx"),
//           route module ^^^^^^^^

```

Copy code to clipboard

Route modules are the foundation of React Router's framework features, they define:

- automatic code-splitting
- data loading
- actions
- revalidation
- error boundaries
- and more

This guide is a quick overview of every route module feature. The rest of the getting started guides will cover these features in more detail.

## Component ( `default`)

The `default` export in a route module defines the component that will render when the route matches.

```
export default function MyRouteComponent() {
  return (
    <div>
      <h1>Look ma!</h1>
      <p>
        I'm still using React Router after like 10 years.
      </p>
    </div>
  );
}

```

Copy code to clipboard

### Props passed to the Component

When the component is rendered, it is provided the props defined in `Route.ComponentProps` that React Router will automatically generate for you. These props include:

1. `loaderData`: The data returned from the `loader` function in this route module
2. `actionData`: The data returned from the `action` function in this route module
3. `params`: An object containing the route parameters (if any).
4. `matches`: An array of all the matches in the current route tree.

You can use these props in place of hooks like `useLoaderData` or `useParams`. This may be preferrable because they will be automatically typed correctly for the route.

### Using props

```
import type { Route } from "./+types/route-name";

export default function MyRouteComponent({
  loaderData,
  actionData,
  params,
  matches,
}: Route.ComponentProps) {
  return (
    <div>
      <h1>Welcome to My Route with Props!</h1>
      <p>Loader Data: {JSON.stringify(loaderData)}</p>
      <p>Action Data: {JSON.stringify(actionData)}</p>
      <p>Route Parameters: {JSON.stringify(params)}</p>
      <p>Matched Routes: {JSON.stringify(matches)}</p>
    </div>
  );
}

```

Copy code to clipboard

## `loader`

Route loaders provide data to route components before they are rendered. They are only called on the server when server rendering or during the build with pre-rendering.

```
export async function loader() {
  return { message: "Hello, world!" };
}

export default function MyRoute({ loaderData }) {
  return <h1>{loaderData.message}</h1>;
}

```

Copy code to clipboard

See also:

- [`loader` params](https://api.reactrouter.com/v7/interfaces/react_router.LoaderFunctionArgs)

## `clientLoader`

Called only in the browser, route client loaders provide data to route components in addition to, or in place of, route loaders.

```
export async function clientLoader({ serverLoader }) {
  // call the server loader
  const serverData = await serverLoader();
  // And/or fetch data on the client
  const data = getDataFromClient();
  // Return the data to expose through useLoaderData()
  return data;
}

```

Copy code to clipboard

Client loaders can participate in initial page load hydration of server rendered pages by setting the `hydrate` property on the function:

```
export async function clientLoader() {
  // ...
}
clientLoader.hydrate = true as const;

```

Copy code to clipboard

By using `as const`, TypeScript will infer that the type for `clientLoader.hydrate` is `true` instead of `boolean`.
That way, React Router can derive types for `loaderData` based on the value of `clientLoader.hydrate`.

See also:

- [`clientLoader` params](https://api.reactrouter.com/v7/types/react_router.ClientLoaderFunctionArgs)

## `action`

Route actions allow server-side data mutations with automatic revalidation of all loader data on the page when called from `<Form>`, `useFetcher`, and `useSubmit`.

```
// route("/list", "./list.tsx")
import { Form } from "react-router";
import { TodoList } from "~/components/TodoList";

// this data will be loaded after the action completes...
export async function loader() {
  const items = await fakeDb.getItems();
  return { items };
}

// ...so that the list here is updated automatically
export default function Items({ loaderData }) {
  return (
    <div>
      <List items={loaderData.items} />
      <Form method="post" navigate={false} action="/list">
        <input type="text" name="title" />
        <button type="submit">Create Todo</button>
      </Form>
    </div>
  );
}

export async function action({ request }) {
  const data = await request.formData();
  const todo = await fakeDb.addItem({
    title: data.get("title"),
  });
  return { ok: true };
}

```

Copy code to clipboard

## `clientAction`

Like route actions but only called in the browser.

```
export async function clientAction({ serverAction }) {
  fakeInvalidateClientSideCache();
  // can still call the server action if needed
  const data = await serverAction();
  return data;
}

```

Copy code to clipboard

See also:

- [`clientAction` params](https://api.reactrouter.com/v7/types/react_router.ClientActionFunctionArgs)

## `ErrorBoundary`

When other route module APIs throw, the route module `ErrorBoundary` will render instead of the route component.

```
import {
  isRouteErrorResponse,
  useRouteError,
} from "react-router";

export function ErrorBoundary() {
  const error = useRouteError();

  if (isRouteErrorResponse(error)) {
    return (
      <div>
        <h1>
          {error.status} {error.statusText}
        </h1>
        <p>{error.data}</p>
      </div>
    );
  } else if (error instanceof Error) {
    return (
      <div>
        <h1>Error</h1>
        <p>{error.message}</p>
        <p>The stack trace is:</p>
        <pre>{error.stack}</pre>
      </div>
    );
  } else {
    return <h1>Unknown Error</h1>;
  }
}

```

Copy code to clipboard

## `HydrateFallback`

On initial page load, the route component renders only after the client loader is finished. If exported, a `HydrateFallback` can render immediately in place of the route component.

```
export async function clientLoader() {
  const data = await fakeLoadLocalGameData();
  return data;
}

export function HydrateFallback() {
  return <p>Loading Game...</p>;
}

export default function Component({ loaderData }) {
  return <Game data={loaderData} />;
}

```

Copy code to clipboard

## `headers`

Route headers define HTTP headers to be sent with the response when server rendering.

```
export function headers() {
  return {
    "X-Stretchy-Pants": "its for fun",
    "Cache-Control": "max-age=300, s-maxage=3600",
  };
}

```

Copy code to clipboard

## `handle`

Route handle allows apps to add anything to a route match in `useMatches` to create abstractions (like breadcrumbs, etc.).

```
export const handle = {
  its: "all yours",
};

```

Copy code to clipboard

## `links`

Route links define [`<link>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) s to be rendered in the document `<head>`.

```
export function links() {
  return [\
    {\
      rel: "icon",\
      href: "/favicon.png",\
      type: "image/png",\
    },\
    {\
      rel: "stylesheet",\
      href: "https://example.com/some/styles.css",\
    },\
    {\
      rel: "preload",\
      href: "/images/banner.jpg",\
      as: "image",\
    },\
  ];
}

```

Copy code to clipboard

All routes links will be aggregated and rendered through the `<Links />` component, usually rendered in your app root:

```
import { Links } from "react-router";

export default function Root() {
  return (
    <html>
      <head>
        <Links />
      </head>

      <body />
    </html>
  );
}

```

Copy code to clipboard

## `meta`

Route meta defines meta tags to be rendered in the `<head>` of the document.

```
export function meta() {
  return [\
    { title: "Very cool app" },\
    {\
      property: "og:title",\
      content: "Very cool app",\
    },\
    {\
      name: "description",\
      content: "This app is the best",\
    },\
  ];
}

```

Copy code to clipboard

All routes' meta will be aggregated and rendered through the `<Meta />` component, usually rendered in your app root:

```
import { Meta } from "react-router";

export default function Root() {
  return (
    <html>
      <head>
        <Meta />
      </head>

      <body />
    </html>
  );
}

```

Copy code to clipboard

**See also**

- [`meta` params](https://api.reactrouter.com/v7/interfaces/react_router.MetaArgs)

## `shouldRevalidate`

By default, all routes are revalidated after actions. This function allows a route to opt-out of revalidation for actions that don't affect its data.

```
import type { ShouldRevalidateFunctionArgs } from "react-router";

export function shouldRevalidate(
  arg: ShouldRevalidateFunctionArgs
) {
  return true;
}

```

Copy code to clipboard

* * *

Next: [Rendering Strategies](https://reactrouter.com/start/framework/rendering)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/framework/route-module.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/how-to/resource-routes) [dev](https://reactrouter.com/dev/how-to/resource-routes)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Resource Routes

# Resource Routes

When server rendering, routes can serve "resources" instead of rendering components, like images, PDFs, JSON payloads, webhooks, etc.

## Defining a Resource Route

A route becomes a resource route by convention when its module exports a loader or action but does not export a default component.

Consider a route that serves a PDF instead of UI:

```
route("/reports/pdf/:id", "pdf-report.ts");

```

Copy code to clipboard

```
import type { Route } from "./+types/pdf-report";

export async function loader({ params }: Route.LoaderArgs) {
  const report = await getReport(params.id);
  const pdf = await generateReportPDF(report);
  return new Response(pdf, {
    status: 200,
    headers: {
      "Content-Type": "application/pdf",
    },
  });
}

```

Copy code to clipboard

Note there is no default export. That makes this route a resource route.

## Linking to Resource Routes

When linking to resource routes, use `<a>` or `<Link reloadDocument>`, otherwise React Router will attempt to use client side routing and fetching the payload (you'll get a helpful error message if you make this mistake).

```
<Link reloadDocument to="/reports/pdf/123">
  View as PDF
</Link>

```

Copy code to clipboard

## Handling different request methods

GET requests are handled by the `loader`, while POST, PUT, PATCH, and DELETE are handled by the `action`:

```
import type { Route } from "./+types/resource";

export function loader(_: Route.LoaderArgs) {
  return Response.json({ message: "I handle GET" });
}

export function action(_: Route.ActionArgs) {
  return Response.json({
    message: "I handle everything else",
  });
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/how-to/resource-routes.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Migrating from @reach/router

On this page

- [Introduction](https://reactrouter.com/6.30.0/upgrading/reach#introduction)
- [Upgrading Overview](https://reactrouter.com/6.30.0/upgrading/reach#upgrading-overview)
- [First: Non-breaking Updates](https://reactrouter.com/6.30.0/upgrading/reach#first-non-breaking-updates)
- [Second: Breaking Updates](https://reactrouter.com/6.30.0/upgrading/reach#second-breaking-updates)
- [Non-Breaking Updates](https://reactrouter.com/6.30.0/upgrading/reach#non-breaking-updates)
- [Upgrade to React v16.8](https://reactrouter.com/6.30.0/upgrading/reach#upgrade-to-react-v168)
- [Upgrade to `@reach/router` v1.3.3](https://reactrouter.com/6.30.0/upgrading/reach#upgrade-to-reachrouter-v133)
- [Update route components to use hooks](https://reactrouter.com/6.30.0/upgrading/reach#update-route-components-to-use-hooks)
- [Add a LocationProvider](https://reactrouter.com/6.30.0/upgrading/reach#add-a-locationprovider)
- [Breaking updates](https://reactrouter.com/6.30.0/upgrading/reach#breaking-updates)
- [Install React Router v6](https://reactrouter.com/6.30.0/upgrading/reach#install-react-router-v6)
- [Update `LocationProvider` to `BrowserRouter`](https://reactrouter.com/6.30.0/upgrading/reach#update-locationprovider-to-browserrouter)
- [Update `Router` to `Routes`](https://reactrouter.com/6.30.0/upgrading/reach#update-router-to-routes)
- [Update `default` route prop](https://reactrouter.com/6.30.0/upgrading/reach#update-default-route-prop)
- [`<Redirect/>`, `redirectTo`, `isRedirect`](https://reactrouter.com/6.30.0/upgrading/reach#redirect-redirectto-isredirect)
- [`<Link getProps />`](https://reactrouter.com/6.30.0/upgrading/reach#link-getprops-)
- [`useMatch`](https://reactrouter.com/6.30.0/upgrading/reach#usematch)
- [`<Match />`](https://reactrouter.com/6.30.0/upgrading/reach#match-)
- [`<ServerLocation />`](https://reactrouter.com/6.30.0/upgrading/reach#serverlocation-)
- [Feedback!](https://reactrouter.com/6.30.0/upgrading/reach#feedback)

- [Introduction](https://reactrouter.com/6.30.0/upgrading/reach#introduction)
- [Upgrading Overview](https://reactrouter.com/6.30.0/upgrading/reach#upgrading-overview)
- [First: Non-breaking Updates](https://reactrouter.com/6.30.0/upgrading/reach#first-non-breaking-updates)
- [Second: Breaking Updates](https://reactrouter.com/6.30.0/upgrading/reach#second-breaking-updates)
- [Non-Breaking Updates](https://reactrouter.com/6.30.0/upgrading/reach#non-breaking-updates)
- [Upgrade to React v16.8](https://reactrouter.com/6.30.0/upgrading/reach#upgrade-to-react-v168)
- [Upgrade to `@reach/router` v1.3.3](https://reactrouter.com/6.30.0/upgrading/reach#upgrade-to-reachrouter-v133)
- [Update route components to use hooks](https://reactrouter.com/6.30.0/upgrading/reach#update-route-components-to-use-hooks)
- [Add a LocationProvider](https://reactrouter.com/6.30.0/upgrading/reach#add-a-locationprovider)
- [Breaking updates](https://reactrouter.com/6.30.0/upgrading/reach#breaking-updates)
- [Install React Router v6](https://reactrouter.com/6.30.0/upgrading/reach#install-react-router-v6)
- [Update `LocationProvider` to `BrowserRouter`](https://reactrouter.com/6.30.0/upgrading/reach#update-locationprovider-to-browserrouter)
- [Update `Router` to `Routes`](https://reactrouter.com/6.30.0/upgrading/reach#update-router-to-routes)
- [Update `default` route prop](https://reactrouter.com/6.30.0/upgrading/reach#update-default-route-prop)
- [`<Redirect/>`, `redirectTo`, `isRedirect`](https://reactrouter.com/6.30.0/upgrading/reach#redirect-redirectto-isredirect)
- [`<Link getProps />`](https://reactrouter.com/6.30.0/upgrading/reach#link-getprops-)
- [`useMatch`](https://reactrouter.com/6.30.0/upgrading/reach#usematch)
- [`<Match />`](https://reactrouter.com/6.30.0/upgrading/reach#match-)
- [`<ServerLocation />`](https://reactrouter.com/6.30.0/upgrading/reach#serverlocation-)
- [Feedback!](https://reactrouter.com/6.30.0/upgrading/reach#feedback)

# Migrating from Reach Router to React Router v6

This page is a work-in-progress. Please let us know where it
lacks so we can make the migration as smooth as possible!

## Introduction

When we set out to build React Router v6, from the perspective of `@reach/router` users, we had these goals:

- Keep the bundle size low (turns out we got it smaller than `@reach/router`)
- Keep the best parts of `@reach/router` (nested routes, and a simplified API via ranked path matching and `navigate`)
- Update the API to be idiomatic with modern React (AKA hooks).
- Provide better support for Concurrent Mode and Suspense.
- Stop doing not-good-enough focus management by default.

If we were to make a `@reach/router` v2, it would look pretty much exactly like React Router v6. So, the next version of `@reach/router` _is_ React Router v6. In other words, there will be no `@reach/router` v2, because it would be the same as React Router v6.

A lot of the API is actually identical between `@reach/router` 1.3 and React Router v6:

- Routes are ranked and matched
- The nested route config is there
- `navigate` has the same signature
- `Link` has the same signature
- All the hooks in 1.3 are identical (or nearly identical)

Most of the changes are just some renames. If you happen to write a codemod, please share it with us and we'll add it to this guide!

## Upgrading Overview

In this guide we'll show you how to upgrade each piece of your routing code. We'll do it incrementally so you can make some changes, ship, and then get back to migrating again when it's convenient. We'll also discuss a little bit about "why" the changes were made, what might look like a simple rename actually has bigger reasons behind it.

### First: Non-breaking Updates

We highly encourage you to do the following updates to your code before migrating to React Router v6. These changes don't have to be done all at once across your app, you can simply update one line, commit, and ship. Doing this will greatly reduce the effort when you get to the breaking changes in React Router v6.

1. Upgrade to React v16.8 or greater
2. Upgrade to `@reach/router` v1.3
3. Update route components to access data from hooks
4. Add a `<LocationProvider/>` to the top of the app

### Second: Breaking Updates

The following changes need to be done all at once across your app.

1. Upgrade to React Router v6
2. Update all `<Router>` elements to `<Routes>`
3. Change `<RouteElement default/>` to `<RouteElement path="*" />`
4. Fix `<Redirect />`
5. Implement `<Link getProps />` with hooks
6. Update `useMatch`, params are on `match.params`
7. Change `ServerLocation` to `StaticRouter`

## Non-Breaking Updates

### Upgrade to React v16.8

React Router v6 makes heavy use of [React\\
hooks](https://reactjs.org/docs/hooks-intro.html), so you'll need to be on
React 16.8 or greater before attempting the upgrade to React Router v6.

Once you've upgraded to React 16.8, you should deploy your app. Then you can
come back later and pick up where you left off.

### Upgrade to `@reach/router` v1.3.3

You should be able to simply install v1.3.3 and then deploy your app.

```sh
npm install @reach/router@latest

```

### Update route components to use hooks

You can do this step one route component at a time, commit, and deploy. You don't need to update the entire app at once.

In `@reach/router` v1.3 we added hooks to access route data in preparation for React Router v6. If you do this first you'll have a lot less to do when you upgrade to React Router v6.

```
// @reach/router v1.2
<Router>
  <User path="users/:userId/grades/:assignmentId" />
</Router>;

function User(props) {
  let {
    // route params were accessed from props
    userId,
    assignmentId,

    // as well as location and navigate
    location,
    navigate,
  } = props;

  // ...
}

// @reach/router v1.3 and React Router v6
import {
  useParams,
  useLocation,
  useNavigate,
} from "@reach/router";

function User() {
  // everything comes from a specific hook now
  let { userId, assignmentId } = useParams();
  let location = useLocation();
  let navigate = useNavigate();
  // ...
}

```

#### Justification

All of this data lives on context already, but accessing it from there was awkward for application code so we dumped it into your props. Hooks made accessing data from context simple so we no longer need to pollute your props with route information.

Not polluting props also helps with TypeScript a bit and also prevents you from wondering where a prop came from when looking at a component. If you're using data from the router, it's completely clear now.

Also, as a page grows, you naturally break it into multiple components and end up "prop drilling" that data all the way down the tree. Now you can access the route data anywhere in the tree. Not only is it more convenient, but it makes creating router-centric composable abstractions possible. If a custom hook needs the location, it can now simply ask for it with `useLocation()` etc..

### Add a LocationProvider

While `@reach/router` doesn't require a location provider at the top of the application tree, React Router v6 does, so might as well get ready for that now.

```
// before
ReactDOM.render(<App />, el);

// after
import { LocationProvider } from "@reach/router";

ReactDOM.render(
  <LocationProvider>
    <App />
  </LocationProvider>,
  el
);

```

#### Justification:

`@reach/router` uses a global, default history instance that has side effects in the module, which prevents the ability to tree-shake the module whether you use the global or not. Additionally, React Router provides other history types (like hash history) that `@reach/router` doesn't, so it always requires a top-level location provider (in React Router these are `<BrowserRouter/>` and friends).

Also, various modules like `Router`, `Link` and `useLocation` rendered outside a `<LocationProvider/>` set up their own URL listener. It's generally not a problem, but every little bit counts. Putting a `<LocationProvider />` at the top allows the app to have a single URL listener.

## Breaking updates

This next group of updates need to be done all at once. Fortunately most of it is just a simple rename.

You can pull a trick though and use both routers at the same time as you migrate, but you should absolutely not ship your app in this state because they are not interoperable. Your links from one won't work for the other. However, it is nice to be able to make a change and refresh the page to see that you did that one step correctly.

### Install React Router v6

```sh
npm install react-router@6 react-router-dom@6

```

### Update `LocationProvider` to `BrowserRouter`

```
// @reach/router
import { LocationProvider } from "@reach/router";

ReactDOM.render(
  <LocationProvider>
    <App />
  </LocationProvider>,
  el
);

// React Router v6
import { BrowserRouter } from "react-router-dom";

ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  el
);

```

### Update `Router` to `Routes`

You may have more than one, but usually there's just one somewhere near the top of your app. If you have multiple, go ahead and do this for each one.

```
// @reach/router
import { Router } from "@reach/router";

<Router>
  <Home path="/" />
  {/* ... */}
</Router>;

// React Router v6
import { Routes, Route } from "react-router-dom";

<Routes>
  <Route path="/" element={<Home />} />
  {/* ... */}
</Routes>;

```

### Update `default` route prop

The `default` prop told `@reach/router` to use that route if no other routes matched. In React Router v6 you can explain this behavior with a wildcard path.

```
// @reach/router
<Router>
  <Home path="/" />
  <NotFound default />
</Router>

// React Router v6
<Routes>
  <Route path="/" element={<Home />} />
  <Route path="*" element={<NotFound />} />
</Routes>

```

### `<Redirect/>`, `redirectTo`, `isRedirect`

Whew ... buckle up for this one. And please save your tomatoes for a homemade margherita pizza instead of throwing them at us.

We have removed the ability to redirect from React Router. So this means there is no `<Redirect/>`, `redirectTo`, or `isRedirect`, and no replacement APIs either. Please keep reading 😅

Don't confuse redirects with navigating while the user interacts with your app. Navigating in response to user interactions is still supported. When we talk about redirects, we're talking about redirecting while matching:

```
<Router>
  <Home path="/" />
  <Users path="/events" />
  <Redirect from="/dashboard" to="/events" />
</Router>

```

The way redirects work in `@reach/router` was a bit of an experiment. It "throws" redirects and catches it with `componentDidCatch`. This was cool because it caused the entire render tree to stop, and then start over with the new location. Discussions with the React team years ago when we first shipped this project led us to give it a shot.

After bumping into issues (like app level `componentDidCatch`'s needing to rethrow the redirect), we've decided not to do that anymore in React Router v6.

But we've gone a step farther and concluded that redirects are not even the job of React Router. Your dynamic web server or static file server should be handling this and sending an appropriate response status code like 301 or 302.

Having the ability to redirect while matching in React Router at best requires you to configure the redirects in two places (your server and your routes) and at worst encouraged people to only do it in React Router--which doesn't send a status code at all.

We use firebase hosting a lot, so as an example here's how we'd update one of our apps:

```
// @reach/router
<Router>
  <Home path="/" />
  <Users path="/events" />
  <Redirect from="/dashboard" to="/events" />
</Router>

```

```
// React Router v6
// firebase.json config file
{
  // ...
  "hosting": {
    "redirects": [\
      {\
        "source": "/dashboard",\
        "destination": "/events",\
        "type": 301\
      }\
    ]
  }
}

```

This works whether we're server rendering with a serverless function, or if we're using it as a static file server only. All web hosting services provide a way to configure this.

#### What about clicking Links that aren't updated?

If your app has a `<Link to="/events" />` still hanging around and the user
clicks it, the server isn't involved since you're using a client-side router.
You'll need to be more diligent about updating your links 😬.

Alternatively, if you want to allow for outdated links, _and you realize you need to configure your redirects on both the client and the server_, go ahead and copy and paste the `Redirect` component we were about to ship but then deleted.

```
import { useEffect } from "react";
import { useNavigate } from "react-router-dom";

function Redirect({ to }) {
  let navigate = useNavigate();
  useEffect(() => {
    navigate(to);
  });
  return null;
}

// usage
<Routes>
  <Route path="/" element={<Home />} />
  <Route path="/events" element={<Users />} />
  <Route
    path="/dashboard"
    element={<Redirect to="/events" />}
  />
</Routes>;

```

#### Justification

We figured by not providing any redirect API at all, people will be more likely to configure them correctly. We've been accidentally encouraging bad practice for years now and would like to stop 🙈.

### `<Link getProps />`

This prop getter was useful for styling links as "active". Deciding if a link is active is kind of subjective. Sometimes you want it to be active if the URL matches exactly, sometimes you want it active if it matches partially, and there are even more edge cases involving search params and location state.

```
// @reach/router
function SomeCustomLink() {
  return (
    <Link
      to="/some/where/cool"
      getProps={(obj) => {
        let {
          isCurrent,
          isPartiallyCurrent,
          href,
          location,
        } = obj;
        // do what you will
      }}
    />
  );
}

// React Router
import { useLocation, useMatch } from "react-router-dom";

function SomeCustomLink() {
  let to = "/some/where/cool";
  let match = useMatch(to);
  let { isExact } = useMatch(to);
  let location = useLocation();
  return <Link to={to} />;
}

```

Let's look at some less general examples.

```
// A custom nav link that is active when the URL matches the link's href exactly

// @reach/router
function ExactNavLink(props) {
  const isActive = ({ isCurrent }) => {
    return isCurrent ? { className: "active" } : {};
  };
  return <Link getProps={isActive} {...props} />;
}

// React Router v6
function ExactNavLink(props) {
  return (
    <Link
      // If you only need the active state for styling without
      // overriding the default isActive state, we provide it as
      // a named argument in a function that can be passed to
      // either `className` or `style` props
      className={({ isActive }) =>
        isActive ? "active" : ""
      }
      {...props}
    />
  );
}

// A link that is active when itself or deeper routes are current

// @reach/router
function PartialNavLink(props) {
  const isPartiallyActive = ({ isPartiallyCurrent }) => {
    return isPartiallyCurrent
      ? { className: "active" }
      : {};
  };
  return <Link getProps={isPartiallyActive} {...props} />;
}

// React Router v6
function PartialNavLink(props) {
  // add the wild card to match deeper URLs
  let match = useMatch(props.to + "/*");
  return (
    <Link className={match ? "active" : ""} {...props} />
  );
}

```

#### Justification

"Prop getters" are clunky and can almost always be replaced with a hook. This also allows you to use the other hooks, like `useLocation`, and do even more custom things, like making a link active with a search string:

```
function RecentPostsLink(props) {
  let match = useMatch("/posts");
  let location = useLocation();
  let isActive =
    match && location.search === "?view=recent";
  return (
    <Link className={isActive ? "active" : ""}>Recent</Link>
  );
}

```

### `useMatch`

The signature of `useMatch` is slightly different in React Router v6.

```
// @reach/router
let {
  uri,
  path,

  // params are merged into the object with uri and path
  eventId,
} = useMatch("/events/:eventId");

// React Router v6
let {
  url,
  path,

  // params get their own key on the match
  params: { eventId },
} = useMatch("/events/:eventId");

```

Also note the change from `uri -> url`.

#### Justification

Just feels cleaner to have the params be separate from URL and path.

Also, nobody knows the difference between URL and URI, so we didn't want to start a bunch of pedantic arguments about it. React Router always called it URL, and it's got more production apps, so we used URL instead of URI.

### `<Match />`

There is no `<Match/>` component in React Router v6. It used render props to compose behavior, but we've got hooks now.

If you like it, or just don't want to update your code, it's easy to backport:

```
function Match({ path, children }) {
  let match = useMatch(path);
  let location = useLocation();
  let navigate = useNavigate();
  return children({ match, location, navigate });
}

```

#### Justification

Render props are kinda gross (ew!) now that we have hooks.

### `<ServerLocation />`

Really simple rename here:

```
// @reach/router
import { ServerLocation } from "@reach/router";

createServer((req, res) => {
  let markup = ReactDOMServer.renderToString(
    <ServerLocation url={req.url}>
      <App />
    </ServerLocation>
  );
  req.send(markup);
});

// React Router v6
// note the import path from react-router-dom/server!
import { StaticRouter } from "react-router-dom/server";

createServer((req, res) => {
  let markup = ReactDOMServer.renderToString(
    <StaticRouter location={req.url}>
      <App />
    </StaticRouter>
  );
  req.send(markup);
});

```

## Feedback!

Please let us know if this guide helped:

_Open a Pull Request_: Please add any migration we missed that you needed.

_General Feedback_: [@remix\_run](https://twitter.com/remix_run) on Twitter, or email [hello@remix.run](mailto:hello@remix.run).

Thanks!

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [react-router](https://api.reactrouter.com/v7/modules/react_router.html)
- [Outlet](https://api.reactrouter.com/v7/functions/react_router.Outlet.html)

# Function Outlet

- Outlet(props): React.ReactElement \| null [Permalink](https://api.reactrouter.com/v7/functions/react_router.Outlet.html#Outlet)
- Renders the matching child route of a parent route or nothing if no child route matches.



```tsx
import { Outlet } from "react-router"

export default function SomeParent() {
    return (
      <div>
        <h1>Parent Content</h1>
        <Outlet />
      </div>
    );
}
Copy
```





#### Parameters



- props: [OutletProps](https://api.reactrouter.com/v7/interfaces/react_router.OutletProps.html)

#### Returns React.ReactElement \| null

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/library/url-values) [dev](https://reactrouter.com/dev/start/library/url-values)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

URL Values

# URL Values

## Route Params

Route params are the parsed values from a dynamic segment.

```
<Route path="/concerts/:city" element={<City />} />

```

Copy code to clipboard

In this case, `:city` is the dynamic segment. The parsed value for that city will be available from `useParams`

```
import { useParams } from "react-router";

function City() {
  let { city } = useParams();
  let data = useFakeDataLibrary(`/api/v2/cities/${city}`);
  // ...
}

```

Copy code to clipboard

## URL Search Params

Search params are the values after a `?` in the URL. They are accessible from `useSearchParams`, which returns an instance of [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)

```
function SearchResults() {
  let [searchParams] = useSearchParams();
  return (
    <div>
      <p>
        You searched for <i>{searchParams.get("q")}</i>
      </p>
      <FakeSearchResults />
    </div>
  );
}

```

Copy code to clipboard

## Location Object

React Router creates a custom `location` object with some useful information on it accessible with `useLocation`.

```
function useAnalytics() {
  let location = useLocation();
  useEffect(() => {
    sendFakeAnalytics(location.pathname);
  }, [location]);
}

function useScrollRestoration() {
  let location = useLocation();
  useEffect(() => {
    fakeRestoreScroll(location.key);
  }, [location]);
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/library/url-values.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/how-to/client-data) [dev](https://reactrouter.com/dev/how-to/client-data)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Client Data

On this page

- [Skip the Server Hop](https://reactrouter.com/how-to/client-data#skip-the-server-hop)
- [Fullstack State](https://reactrouter.com/how-to/client-data#fullstack-state)
- [Choosing Server or Client Data Loading](https://reactrouter.com/how-to/client-data#choosing-server-or-client-data-loading)
- [Client-Side Caching](https://reactrouter.com/how-to/client-data#client-side-caching)

- [Skip the Server Hop](https://reactrouter.com/how-to/client-data#skip-the-server-hop)
- [Fullstack State](https://reactrouter.com/how-to/client-data#fullstack-state)
- [Choosing Server or Client Data Loading](https://reactrouter.com/how-to/client-data#choosing-server-or-client-data-loading)
- [Client-Side Caching](https://reactrouter.com/how-to/client-data#client-side-caching)

# Client Data

You can fetch and mutate data directly in the browser using `clientLoader` and `clientAction` functions.

These functions are the primary mechanism for data handling when using [SPA mode](https://reactrouter.com/how-to/spa). This guide demonstrates common use cases for leveraging client data in Server-Side Rendering (SSR).

## Skip the Server Hop

When using React Router with a Backend-For-Frontend (BFF) architecture, you might want to bypass the React Router server and communicate directly with your backend API. This approach requires proper authentication handling and assumes no CORS restrictions. Here's how to implement this:

1. Load the data from server `loader` on the document load
2. Load the data from the `clientLoader` on all subsequent loads

In this scenario, React Router will _not_ call the `clientLoader` on hydration - and will only call it on subsequent navigations.

```
export async function loader({
  request,
}: Route.LoaderArgs) {
  const data = await fetchApiFromServer({ request }); // (1)
  return data;
}

export async function clientLoader({
  request,
}: Route.ClientLoaderArgs) {
  const data = await fetchApiFromClient({ request }); // (2)
  return data;
}

```

Copy code to clipboard

## Fullstack State

Sometimes you need to combine data from both the server and browser (like IndexedDB or browser SDKs) before rendering a component. Here's how to implement this pattern:

1. Load the partial data from server `loader` on the document load
2. Export a [`HydrateFallback`](https://reactrouter.com/start/framework/route-module#hydratefallback) component to render during SSR because we don't yet have a full set of data
3. Set `clientLoader.hydrate = true`, this instructs React Router to call the clientLoader as part of initial document hydration
4. Combine the server data with the client data in `clientLoader`

```
export async function loader({
  request,
}: Route.LoaderArgs) {
  const partialData = await getPartialDataFromDb({
    request,
  }); // (1)
  return partialData;
}

export async function clientLoader({
  request,
  serverLoader,
}: Route.ClientLoaderArgs) {
  const [serverData, clientData] = await Promise.all([\
    serverLoader(),\
    getClientData(request),\
  ]);
  return {
    ...serverData, // (4)
    ...clientData, // (4)
  };
}
clientLoader.hydrate = true as const; // (3)

export function HydrateFallback() {
  return <p>Skeleton rendered during SSR</p>; // (2)
}

export default function Component({
  // This will always be the combined set of server + client data
  loaderData,
}: Route.ComponentProps) {
  return <>...</>;
}

```

Copy code to clipboard

## Choosing Server or Client Data Loading

You can mix data loading strategies across your application, choosing between server-only or client-only data loading for each route. Here's how to implement both approaches:

1. Export a `loader` when you want to use server data
2. Export `clientLoader` and a `HydrateFallback` when you want to use client data

A route that only depends on a server loader looks like this:

```
export async function loader({
  request,
}: Route.LoaderArgs) {
  const data = await getServerData(request);
  return data;
}

export default function Component({
  loaderData, // (1) - server data
}: Route.ComponentProps) {
  return <>...</>;
}

```

Copy code to clipboard

A route that only depends on a client loader looks like this.

```
export async function clientLoader({
  request,
}: Route.ClientLoaderArgs) {
  const clientData = await getClientData(request);
  return clientData;
}
// Note: you do not have to set this explicitly - it is implied if there is no `loader`
clientLoader.hydrate = true;

// (2)
export function HydrateFallback() {
  return <p>Skeleton rendered during SSR</p>;
}

export default function Component({
  loaderData, // (2) - client data
}: Route.ComponentProps) {
  return <>...</>;
}

```

Copy code to clipboard

## Client-Side Caching

You can implement client-side caching (using memory, localStorage, etc.) to optimize server requests. Here's a pattern that demonstrates cache management:

1. Load the data from server `loader` on the document load
2. Set `clientLoader.hydrate = true` to prime the cache
3. Load subsequent navigations from the cache via `clientLoader`
4. Invalidate the cache in your `clientAction`

Note that since we are not exporting a `HydrateFallback` component, we will SSR the route component and then run the `clientLoader` on hydration, so it's important that your `loader` and `clientLoader` return the same data on initial load to avoid hydration errors.

```
export async function loader({
  request,
}: Route.LoaderArgs) {
  const data = await getDataFromDb({ request }); // (1)
  return data;
}

export async function action({
  request,
}: Route.ActionArgs) {
  await saveDataToDb({ request });
  return { ok: true };
}

let isInitialRequest = true;

export async function clientLoader({
  request,
  serverLoader,
}: Route.ClientLoaderArgs) {
  const cacheKey = generateKey(request);

  if (isInitialRequest) {
    isInitialRequest = false;
    const serverData = await serverLoader();
    cache.set(cacheKey, serverData); // (2)
    return serverData;
  }

  const cachedData = await cache.get(cacheKey);
  if (cachedData) {
    return cachedData; // (3)
  }

  const serverData = await serverLoader();
  cache.set(cacheKey, serverData);
  return serverData;
}
clientLoader.hydrate = true; // (2)

export async function clientAction({
  request,
  serverAction,
}: Route.ClientActionArgs) {
  const cacheKey = generateKey(request);
  cache.delete(cacheKey); // (4)
  const serverData = await serverAction();
  return serverData;
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/how-to/client-data.md)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [react-router](https://api.reactrouter.com/v7/modules/react_router.html)
- [Route](https://api.reactrouter.com/v7/functions/react_router.Route.html)

# Function Route

- Route(\_props): React.ReactElement \| null [Permalink](https://api.reactrouter.com/v7/functions/react_router.Route.html#Route)
- Configures an element to render when a pattern matches the current location.
It must be rendered within a [Routes](https://api.reactrouter.com/v7/functions/react_router.Routes.html) element. Note that these routes
do not participate in data loading, actions, code splitting, or any other
route module features.





#### Parameters



- \_props: [RouteProps](https://api.reactrouter.com/v7/types/react_router.RouteProps.html)

#### Returns React.ReactElement \| null

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/community/api-development-strategy) [dev](https://reactrouter.com/dev/community/api-development-strategy)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

API Development Strategy

# API Development Strategy

React Router is foundational to your application. We want to make sure that upgrading to new major versions is as smooth as possible while still allowing us to adjust and enhance the behavior and API as the React ecosystem advances.

Our strategy and motivations are discussed in more detail in our [Future Flags](https://remix.run/blog/future-flags) blog post.

## Future Flags

When an API changes in a breaking way, it is introduced in a future flag. This allows you to opt-in to one change a time before it becomes the default in the next major version.

- Without enabling the future flag, nothing changes about your app
- Enabling the flag changes the behavior for that feature

All current future flags are documented in the [Future Flags Guide](https://reactrouter.com/upgrading/future) to help you stay up-to-date.

## Unstable Flags

Unstable flags are for features still being designed and developed and made available to our users to help us get it right.

Unstable flags are not recommended for production:

- they will change without warning and without upgrade paths
- they will have bugs
- they aren't documented
- they may be scrapped completely

When you opt-in to an unstable flag you are becoming a contributor to the project, rather than a user. We appreciate your help, but please be aware of the new role!

Because unstable flags are experimental and not guaranteed to stick around, we ship them in SemVer patch releases because they're not new _stable_/ _documented_ APIs. When an unstable flag stabilizes into a Future Flag, that will be released in a SemVer minor release and will be properly documented and added to the [Future Flags Guide](https://reactrouter.com/upgrading/future).

To learn about current unstable flags, keep an eye on the [CHANGELOG](https://reactrouter.com/start/changelog).

### Example New Feature Flow

The decision flow for a new feature looks something like this (note this diagram is in relation to Remix v1/v2 but applies to React Router v6/v7 as well):

![Flowchart of the decision process for how to introduce a new feature](https://remix.run/docs-images/feature-flowchart.png)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/community/api-development-strategy.md)![React Router logo](<Base64-Image-Removed>)

[Remix](https://remix.run/)

/

[React Router](https://github.com/remix-run/react-router)

[Core](https://v5.reactrouter.com/core) [Web](https://v5.reactrouter.com/web) [Native](https://v5.reactrouter.com/native)

Announcements

[The Future of React Router](https://reacttraining.com/blog/reach-react-router-future/)

Examples

[Basic](https://v5.reactrouter.com/web/example/basic) [URL Parameters](https://v5.reactrouter.com/web/example/url-params) [Nesting](https://v5.reactrouter.com/web/example/nesting) [Redirects (Auth)](https://v5.reactrouter.com/web/example/auth-workflow) [Custom Link](https://v5.reactrouter.com/web/example/custom-link) [Preventing Transitions](https://v5.reactrouter.com/web/example/preventing-transitions) [No Match (404)](https://v5.reactrouter.com/web/example/no-match) [Recursive Paths](https://v5.reactrouter.com/web/example/recursive-paths) [Sidebar](https://v5.reactrouter.com/web/example/sidebar) [Animated Transitions](https://v5.reactrouter.com/web/example/animated-transitions) [Route Config](https://v5.reactrouter.com/web/example/route-config) [Modal Gallery](https://v5.reactrouter.com/web/example/modal-gallery) [StaticRouter Context](https://v5.reactrouter.com/web/example/static-router) [Query Parameters](https://v5.reactrouter.com/web/example/query-parameters)

Guides

[Quick Start](https://v5.reactrouter.com/web/guides/quick-start) [Primary Components](https://v5.reactrouter.com/web/guides/primary-components) [Server Rendering](https://v5.reactrouter.com/web/guides/server-rendering) [Code Splitting](https://v5.reactrouter.com/web/guides/code-splitting) [Scroll Restoration](https://v5.reactrouter.com/web/guides/scroll-restoration) [Philosophy](https://v5.reactrouter.com/web/guides/philosophy) [Testing](https://v5.reactrouter.com/web/guides/testing) [Deep Redux Integration](https://v5.reactrouter.com/web/guides/deep-redux-integration) [Static Routes](https://v5.reactrouter.com/web/guides/static-routes)

API

[Hooks](https://v5.reactrouter.com/web/api/Hooks)

[useHistory](https://v5.reactrouter.com/web/api/Hooks/usehistory) [useLocation](https://v5.reactrouter.com/web/api/Hooks/uselocation) [useParams](https://v5.reactrouter.com/web/api/Hooks/useparams) [useRouteMatch](https://v5.reactrouter.com/web/api/Hooks/useroutematch)

[<BrowserRouter>](https://v5.reactrouter.com/web/api/BrowserRouter)

[basename: string](https://v5.reactrouter.com/web/api/BrowserRouter/basename-string) [getUserConfirmation: func](https://v5.reactrouter.com/web/api/BrowserRouter/getuserconfirmation-func) [forceRefresh: bool](https://v5.reactrouter.com/web/api/BrowserRouter/forcerefresh-bool) [keyLength: number](https://v5.reactrouter.com/web/api/BrowserRouter/keylength-number) [children: node](https://v5.reactrouter.com/web/api/BrowserRouter/children-node)

[<HashRouter>](https://v5.reactrouter.com/web/api/HashRouter)

[basename: string](https://v5.reactrouter.com/web/api/HashRouter/basename-string) [getUserConfirmation: func](https://v5.reactrouter.com/web/api/HashRouter/getuserconfirmation-func) [hashType: string](https://v5.reactrouter.com/web/api/HashRouter/hashtype-string) [children: node](https://v5.reactrouter.com/web/api/HashRouter/children-node)

[<Link>](https://v5.reactrouter.com/web/api/Link)

[to: string](https://v5.reactrouter.com/web/api/Link/to-string) [to: object](https://v5.reactrouter.com/web/api/Link/to-object) [to: func](https://v5.reactrouter.com/web/api/Link/to-func) [replace: bool](https://v5.reactrouter.com/web/api/Link/replace-bool) [innerRef: func](https://v5.reactrouter.com/web/api/Link/innerref-func) [innerRef: RefObject](https://v5.reactrouter.com/web/api/Link/innerref-refobject) [component: React.Component](https://v5.reactrouter.com/web/api/Link/component-reactcomponent) [others](https://v5.reactrouter.com/web/api/Link/others)

[<NavLink>](https://v5.reactrouter.com/web/api/NavLink)

[className: string \| func](https://v5.reactrouter.com/web/api/NavLink/classname-string-func) [activeClassName: string](https://v5.reactrouter.com/web/api/NavLink/activeclassname-string) [style: object \| func](https://v5.reactrouter.com/web/api/NavLink/style-object-func) [activeStyle: object](https://v5.reactrouter.com/web/api/NavLink/activestyle-object) [exact: bool](https://v5.reactrouter.com/web/api/NavLink/exact-bool) [strict: bool](https://v5.reactrouter.com/web/api/NavLink/strict-bool) [isActive: func](https://v5.reactrouter.com/web/api/NavLink/isactive-func) [location: object](https://v5.reactrouter.com/web/api/NavLink/location-object) [aria-current: string](https://v5.reactrouter.com/web/api/NavLink/aria-current-string)

[<Prompt>](https://v5.reactrouter.com/web/api/Prompt)

[<MemoryRouter>](https://v5.reactrouter.com/web/api/MemoryRouter)

[initialEntries: array](https://v5.reactrouter.com/web/api/MemoryRouter/initialentries-array) [initialIndex: number](https://v5.reactrouter.com/web/api/MemoryRouter/initialindex-number) [getUserConfirmation: func](https://v5.reactrouter.com/web/api/MemoryRouter/getuserconfirmation-func) [keyLength: number](https://v5.reactrouter.com/web/api/MemoryRouter/keylength-number) [children: node](https://v5.reactrouter.com/web/api/MemoryRouter/children-node)

[<Redirect>](https://v5.reactrouter.com/web/api/Redirect)

[to: string](https://v5.reactrouter.com/web/api/Redirect/to-string) [to: object](https://v5.reactrouter.com/web/api/Redirect/to-object) [push: bool](https://v5.reactrouter.com/web/api/Redirect/push-bool) [from: string](https://v5.reactrouter.com/web/api/Redirect/from-string) [exact: bool](https://v5.reactrouter.com/web/api/Redirect/exact-bool) [strict: bool](https://v5.reactrouter.com/web/api/Redirect/strict-bool) [sensitive: bool](https://v5.reactrouter.com/web/api/Redirect/sensitive-bool)

[<Route>](https://v5.reactrouter.com/web/api/Route)

[Route render methods](https://v5.reactrouter.com/web/api/Route/route-render-methods) [Route props](https://v5.reactrouter.com/web/api/Route/route-props) [component](https://v5.reactrouter.com/web/api/Route/component) [render: func](https://v5.reactrouter.com/web/api/Route/render-func) [children: func](https://v5.reactrouter.com/web/api/Route/children-func) [path: string \| string\[\]](https://v5.reactrouter.com/web/api/Route/path-string-string) [exact: bool](https://v5.reactrouter.com/web/api/Route/exact-bool) [strict: bool](https://v5.reactrouter.com/web/api/Route/strict-bool) [location: object](https://v5.reactrouter.com/web/api/Route/location-object) [sensitive: bool](https://v5.reactrouter.com/web/api/Route/sensitive-bool)

[<Router>](https://v5.reactrouter.com/web/api/Router)

[history: object](https://v5.reactrouter.com/web/api/Router/history-object) [children: node](https://v5.reactrouter.com/web/api/Router/children-node)

[<StaticRouter>](https://v5.reactrouter.com/web/api/StaticRouter)

[basename: string](https://v5.reactrouter.com/web/api/StaticRouter/basename-string) [location: string](https://v5.reactrouter.com/web/api/StaticRouter/location-string) [location: object](https://v5.reactrouter.com/web/api/StaticRouter/location-object) [context: object](https://v5.reactrouter.com/web/api/StaticRouter/context-object) [children: node](https://v5.reactrouter.com/web/api/StaticRouter/children-node)

[<Switch>](https://v5.reactrouter.com/web/api/Switch)

[location: object](https://v5.reactrouter.com/web/api/Switch/location-object) [children: node](https://v5.reactrouter.com/web/api/Switch/children-node)

[generatePath](https://v5.reactrouter.com/web/api/generatePath)

[pattern: string](https://v5.reactrouter.com/web/api/generatePath/pattern-string) [params: object](https://v5.reactrouter.com/web/api/generatePath/params-object)

[history](https://v5.reactrouter.com/web/api/history)

[history is mutable](https://v5.reactrouter.com/web/api/history/history-is-mutable)

[location](https://v5.reactrouter.com/web/api/location)

[match](https://v5.reactrouter.com/web/api/match)

[null matches](https://v5.reactrouter.com/web/api/match/null-matches)

[matchPath](https://v5.reactrouter.com/web/api/matchPath)

[pathname](https://v5.reactrouter.com/web/api/matchPath/pathname) [props](https://v5.reactrouter.com/web/api/matchPath/props) [returns](https://v5.reactrouter.com/web/api/matchPath/returns)

[withRouter](https://v5.reactrouter.com/web/api/withRouter)

[Component.WrappedComponent](https://v5.reactrouter.com/web/api/withRouter/componentwrappedcomponent) [wrappedComponentRef: func](https://v5.reactrouter.com/web/api/withRouter/wrappedcomponentref-func)

# [Quick Start](https://v5.reactrouter.com/web/guides/quick-start)

To get started with React Router in a web app, you’ll need a React web app. If you need to create one, we recommend you try [Create React App](https://github.com/facebook/create-react-app). It’s a popular tool that works really well with React Router.

First, install `create-react-app` and make a new project with it.

```sh
npx create-react-app demo-app
cd demo-app

```

## [Installation](https://v5.reactrouter.com/web/guides/quick-start/installation)

You can install React Router from [the public npm registry](https://npm.im/react-router-dom) with either `npm` or [`yarn`](https://yarnpkg.com/). Since we’re building a web app, we’ll use `react-router-dom` in this guide.

```sh
yarn add react-router-dom

```

Next, copy/paste either of the following examples into `src/App.js`.

## [1st Example: Basic Routing](https://v5.reactrouter.com/web/guides/quick-start/1st-example-basic-routing)

In this example we have 3 “pages” handled by the router: a home page, an about page, and a users page. As you click around on the different `<Link>` s, the router renders the matching `<Route>`.

Note: Behind the scenes a `<Link>` renders an `<a>` with a real `href`, so people using the keyboard for navigation or screen readers will still be able to use this app.

```jsx
import React from "react";
import {
  BrowserRouter as Router,
  Switch,
  Route,
  Link
} from "react-router-dom";

export default function App() {
  return (
    <Router>
      <div>
        <nav>
          <ul>
            <li>
              <Link to="/">Home</Link>
            </li>
            <li>
              <Link to="/about">About</Link>
            </li>
            <li>
              <Link to="/users">Users</Link>
            </li>
          </ul>
        </nav>

        {/* A <Switch> looks through its children <Route>s and
            renders the first one that matches the current URL. */}
        <Switch>
          <Route path="/about">
            <About />
          </Route>
          <Route path="/users">
            <Users />
          </Route>
          <Route path="/">
            <Home />
          </Route>
        </Switch>
      </div>
    </Router>
  );
}

function Home() {
  return <h2>Home</h2>;
}

function About() {
  return <h2>About</h2>;
}

function Users() {
  return <h2>Users</h2>;
}

```

## [2nd Example: Nested Routing](https://v5.reactrouter.com/web/guides/quick-start/2nd-example-nested-routing)

This example shows how nested routing works. The route `/topics` loads the `Topics` component, which renders any further `<Route>`'s conditionally on the paths `:id` value.

```jsx
import React from "react";
import {
  BrowserRouter as Router,
  Switch,
  Route,
  Link,
  useRouteMatch,
  useParams
} from "react-router-dom";

export default function App() {
  return (
    <Router>
      <div>
        <ul>
          <li>
            <Link to="/">Home</Link>
          </li>
          <li>
            <Link to="/about">About</Link>
          </li>
          <li>
            <Link to="/topics">Topics</Link>
          </li>
        </ul>

        <Switch>
          <Route path="/about">
            <About />
          </Route>
          <Route path="/topics">
            <Topics />
          </Route>
          <Route path="/">
            <Home />
          </Route>
        </Switch>
      </div>
    </Router>
  );
}

function Home() {
  return <h2>Home</h2>;
}

function About() {
  return <h2>About</h2>;
}

function Topics() {
  let match = useRouteMatch();

  return (
    <div>
      <h2>Topics</h2>

      <ul>
        <li>
          <Link to={`${match.url}/components`}>Components</Link>
        </li>
        <li>
          <Link to={`${match.url}/props-v-state`}>
            Props v. State
          </Link>
        </li>
      </ul>

      {/* The Topics page has its own <Switch> with more routes
          that build on the /topics URL path. You can think of the
          2nd <Route> here as an "index" page for all topics, or
          the page that is shown when no topic is selected */}
      <Switch>
        <Route path={`${match.path}/:topicId`}>
          <Topic />
        </Route>
        <Route path={match.path}>
          <h3>Please select a topic.</h3>
        </Route>
      </Switch>
    </div>
  );
}

function Topic() {
  let { topicId } = useParams();
  return <h3>Requested topic ID: {topicId}</h3>;
}

```

## [Keep Going!](https://v5.reactrouter.com/web/guides/quick-start/keep-going)

Hopefully these examples give you a feel for what it’s like to create a web app with React Router. Keep reading to learn more about [the primary components](https://v5.reactrouter.com/web/guides/primary-components) in React Router!![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/library/installation) [dev](https://reactrouter.com/dev/start/library/installation)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Installation

# Installation

React Router v7 requires the following minimum versions:

- `node@20`
- `react@18`
- `react-dom@18`

You can start with a React template from Vite and choose "React", otherwise bootstrap your application however you prefer.

```
npx create-vite@latest

```

Copy code to clipboard

Next install React Router from npm:

```
npm i react-router

```

Copy code to clipboard

Finally, render a `<BrowserRouter>` around your application:

```
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router";
import App from "./app";

const root = document.getElementById("root");

ReactDOM.createRoot(root).render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
);

```

Copy code to clipboard

* * *

Next: [Routing](https://reactrouter.com/start/library/routing)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/library/installation.md)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [react-router](https://api.reactrouter.com/v7/modules/react_router.html)
- [Link](https://api.reactrouter.com/v7/functions/react_router.Link.html)

# Function Link

A progressively enhanced `<a href>` wrapper to enable navigation with client-side routing.

```tsx
import { Link } from "react-router";

<Link to="/dashboard">Dashboard</Link>;

<Link
  to={{
    pathname: "/some/path",
    search: "?query=string",
    hash: "#hash",
  }}
/>
Copy
```

- Link(props): ReactNode [Permalink](https://api.reactrouter.com/v7/functions/react_router.Link.html#Link)
- **NOTE**: Exotic components are not callable.





#### Parameters



- props: [LinkProps](https://api.reactrouter.com/v7/interfaces/react_router.LinkProps.html) & RefAttributes<HTMLAnchorElement>

#### Returns ReactNode

##### Index

### Properties

[$$typeof](https://api.reactrouter.com/v7/functions/react_router.Link.html#__typeof) [defaultProps?](https://api.reactrouter.com/v7/functions/react_router.Link.html#defaultProps) [displayName?](https://api.reactrouter.com/v7/functions/react_router.Link.html#displayName) [propTypes?](https://api.reactrouter.com/v7/functions/react_router.Link.html#propTypes)

## Properties

### `Readonly` $$typeof [Permalink](https://api.reactrouter.com/v7/functions/react_router.Link.html\#__typeof)

$$typeof:symbol

### `Optional` defaultProps [Permalink](https://api.reactrouter.com/v7/functions/react_router.Link.html\#defaultProps)

defaultProps?:Partial< [LinkProps](https://api.reactrouter.com/v7/interfaces/react_router.LinkProps.html) & RefAttributes<HTMLAnchorElement>>

### `Optional` displayName [Permalink](https://api.reactrouter.com/v7/functions/react_router.Link.html\#displayName)

displayName?:string

### `Optional` propTypes [Permalink](https://api.reactrouter.com/v7/functions/react_router.Link.html\#propTypes)

propTypes?:WeakValidationMap< [LinkProps](https://api.reactrouter.com/v7/interfaces/react_router.LinkProps.html) & RefAttributes<HTMLAnchorElement>>

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

### On This Page

Properties

[$$typeof](https://api.reactrouter.com/v7/functions/react_router.Link.html#__typeof) [defaultProps](https://api.reactrouter.com/v7/functions/react_router.Link.html#defaultProps) [displayName](https://api.reactrouter.com/v7/functions/react_router.Link.html#displayName) [propTypes](https://api.reactrouter.com/v7/functions/react_router.Link.html#propTypes)

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Main Concepts

On this page

- [Definitions](https://reactrouter.com/6.30.0/start/concepts#definitions)
- [History and Locations](https://reactrouter.com/6.30.0/start/concepts#history-and-locations)
- [History Object](https://reactrouter.com/6.30.0/start/concepts#history-object)
- [Locations](https://reactrouter.com/6.30.0/start/concepts#locations)
- [Matching](https://reactrouter.com/6.30.0/start/concepts#matching)
- [Defining Routes](https://reactrouter.com/6.30.0/start/concepts#defining-routes)
- [Match Params](https://reactrouter.com/6.30.0/start/concepts#match-params)
- [Ranking Routes](https://reactrouter.com/6.30.0/start/concepts#ranking-routes)
- [Pathless Routes](https://reactrouter.com/6.30.0/start/concepts#pathless-routes)
- [Route Matches](https://reactrouter.com/6.30.0/start/concepts#route-matches)
- [Rendering](https://reactrouter.com/6.30.0/start/concepts#rendering)
- [Outlets](https://reactrouter.com/6.30.0/start/concepts#outlets)
- [Index Routes](https://reactrouter.com/6.30.0/start/concepts#index-routes)
- [Layout Routes](https://reactrouter.com/6.30.0/start/concepts#layout-routes)
- [Navigating](https://reactrouter.com/6.30.0/start/concepts#navigating)
- [Link](https://reactrouter.com/6.30.0/start/concepts#link)
- [Navigate Function](https://reactrouter.com/6.30.0/start/concepts#navigate-function)
- [Data Access](https://reactrouter.com/6.30.0/start/concepts#data-access)
- [Review](https://reactrouter.com/6.30.0/start/concepts#review)

- [Definitions](https://reactrouter.com/6.30.0/start/concepts#definitions)
- [History and Locations](https://reactrouter.com/6.30.0/start/concepts#history-and-locations)
- [History Object](https://reactrouter.com/6.30.0/start/concepts#history-object)
- [Locations](https://reactrouter.com/6.30.0/start/concepts#locations)
- [Matching](https://reactrouter.com/6.30.0/start/concepts#matching)
- [Defining Routes](https://reactrouter.com/6.30.0/start/concepts#defining-routes)
- [Match Params](https://reactrouter.com/6.30.0/start/concepts#match-params)
- [Ranking Routes](https://reactrouter.com/6.30.0/start/concepts#ranking-routes)
- [Pathless Routes](https://reactrouter.com/6.30.0/start/concepts#pathless-routes)
- [Route Matches](https://reactrouter.com/6.30.0/start/concepts#route-matches)
- [Rendering](https://reactrouter.com/6.30.0/start/concepts#rendering)
- [Outlets](https://reactrouter.com/6.30.0/start/concepts#outlets)
- [Index Routes](https://reactrouter.com/6.30.0/start/concepts#index-routes)
- [Layout Routes](https://reactrouter.com/6.30.0/start/concepts#layout-routes)
- [Navigating](https://reactrouter.com/6.30.0/start/concepts#navigating)
- [Link](https://reactrouter.com/6.30.0/start/concepts#link)
- [Navigate Function](https://reactrouter.com/6.30.0/start/concepts#navigate-function)
- [Data Access](https://reactrouter.com/6.30.0/start/concepts#data-access)
- [Review](https://reactrouter.com/6.30.0/start/concepts#review)

# Main Concepts

This document needs to be updated for 6.4 data APIs

This document is a deep dive into the core concepts behind routing as implemented in React Router. It's pretty long, so if you're looking for a more practical guide check out our [quick start tutorial](https://reactrouter.com/6.30.0/start/tutorial).

You might be wondering what exactly React Router does. How can it help you build your app? What exactly is a **router**, anyway?

If you've ever had any of these questions, or you'd just like to dig into the fundamental pieces of routing, you're in the right place. This document contains detailed explanations of all the core concepts behind routing as implemented in React Router.

Please don't let this document overwhelm you! For everyday use, React Router is pretty simple. You don't need to go this deep to use it.

React Router isn't just about matching a url to a function or component: it's about building a full user interface that maps to the URL, so it might have more concepts in it than you're used to. We'll go into detail on the three main jobs of React Router:

1. Subscribing and manipulating the [history stack](https://reactrouter.com/6.30.0/start/concepts#history-stack)
2. Matching the [URL](https://reactrouter.com/6.30.0/start/concepts#url) to your [routes](https://reactrouter.com/6.30.0/start/concepts#route-config)
3. Rendering a nested UI from the [route matches](https://reactrouter.com/6.30.0/start/concepts#matches)

## Definitions

But first, some definitions! There are a lot of different ideas around routing from back and front end frameworks. Sometimes a word in one context might have different meaning than another.

Here are some words we use a lot when we talk about React Router. The rest of this guide will go into more detail on each one.

- **URL** \- The URL in the address bar. A lot of people use the term "URL" and "route" interchangeably, but this is not a route in React Router, it's just a URL.

- **Location** \- This is a React Router specific object that is based on the built-in browser's `window.location` object. It represents "where the user is at". It's mostly an object representation of the URL but has a bit more to it than that.

- **Location State** \- A value that persists with a [location](https://reactrouter.com/6.30.0/start/concepts#location) that isn't encoded in the [URL](https://reactrouter.com/6.30.0/start/concepts#url). Much like hash or search params (data encoded in the URL), but stored invisibly in the browser's memory.

- **History Stack** \- As the user navigates, the browser keeps track of each [location](https://reactrouter.com/6.30.0/start/concepts#location) in a stack. If you click and hold the back button in a browser you can see the browser's history stack right there.

- **Client Side Routing (CSR)** \- A plain HTML document can link to other documents and the browser handles the [history stack](https://reactrouter.com/6.30.0/start/concepts#history-stack) itself. Client Side Routing enables developers to manipulate the browser history stack without making a document request to the server.

- **History** \- An object that allows React Router to subscribe to changes in the [URL](https://reactrouter.com/6.30.0/start/concepts#url) as well as providing APIs to manipulate the browser [history stack](https://reactrouter.com/6.30.0/start/concepts#history-stack) programmatically.

- **History Action** \- One of `POP`, `PUSH`, or `REPLACE`. Users can arrive at a [URL](https://reactrouter.com/6.30.0/start/concepts#url) for one of these three reasons. A push when a new entry is added to the history stack (typically a link click or the programmer forced a navigation). A replace is similar except it replaces the current entry on the stack instead of pushing a new one. Finally, a pop happens when the user clicks the back or forward buttons in the browser chrome.

- **Segment** \- The parts of a [URL](https://reactrouter.com/6.30.0/start/concepts#url) or [path pattern](https://reactrouter.com/6.30.0/start/concepts#path-pattern) between the `/` characters. For example, "/users/123" has two segments.

- **Path Pattern** \- These look like URLs but can have special characters for matching URLs to routes, like **dynamic segments** ( `"/users/:userId"`) or **star segments** ( `"/docs/*"`). They aren't URLs, they're patterns that React Router will match.

- **Dynamic Segment** \- A segment of a path pattern that is dynamic, meaning it can match any values in the segment. For example the pattern `/users/:userId` will match URLs like `/users/123`

- **URL Params** \- The parsed values from the URL that matched a [dynamic segment](https://reactrouter.com/6.30.0/start/concepts#dynamic-segment).

- **Router** \- Stateful, top-level component that makes all the other components and hooks work.

- **Route Config** \- A tree of **routes objects** that will be ranked and matched (with nesting) against the current location to create a branch of **route matches**.

- **Route** \- An object or Route Element typically with a shape of `{ path, element }` or `<Route path element>`. The `path` is a path pattern. When the path pattern matches the current URL, the element will be rendered.

- **Route Element** \- Or `<Route>`. This element's props are read to create a [route](https://reactrouter.com/6.30.0/start/concepts#route) by `<Routes>`, but otherwise does nothing.

- **Nested Routes** \- Because routes can have children and each route defines a portion of the [URL](https://reactrouter.com/6.30.0/start/concepts#url) through [segments](https://reactrouter.com/6.30.0/start/concepts#segment), a single URL can match multiple routes in a nested "branch" of the tree. This enables automatic layout nesting through [outlet](https://reactrouter.com/6.30.0/start/concepts#outlet), [relative links](https://reactrouter.com/6.30.0/start/concepts#relative-links), and more.

- **Relative links** \- Links that don't start with `/` will inherit the closest route in which they are rendered. This makes it easy to link to deeper URLs without having to know and build up the entire path.

- **Match** \- An object that holds information when a route matches the URL, like the [url params](https://reactrouter.com/6.30.0/start/concepts#url-params) and pathname that matched.

- **Matches** \- An array of routes (or branch of the [route config](https://reactrouter.com/6.30.0/start/concepts#route-config)) that matches the current [location](https://reactrouter.com/6.30.0/start/concepts#location). This structure enables [nested routes](https://reactrouter.com/6.30.0/start/concepts#nested-routes).

- **Parent Route** \- A route with child routes.

- **Outlet** \- A component that renders the next match in a set of [matches](https://reactrouter.com/6.30.0/start/concepts#match).

- **Index Route** \- A child route with no path that renders in the parent's [outlet](https://reactrouter.com/6.30.0/start/concepts#outlet) at the parent's [URL](https://reactrouter.com/6.30.0/start/concepts#url).

- **Layout Route** \- A **parent route** without a path, used exclusively for grouping child routes inside a specific layout.


## History and Locations

Before React Router can do anything, it has to be able to subscribe to changes in the browser [history stack](https://reactrouter.com/6.30.0/start/concepts#history-stack).

Browsers maintain their own history stack as the user navigates around. That's how the back and forward buttons can work. In a traditional website (HTML documents without JavaScript) the browser will make requests to the server every time the user clicks a link, submits a form, or clicks the back and forward buttons.

For example, consider the user:

1. clicks a link to `/dashboard`
2. clicks a link to `/accounts`
3. clicks a link to `/customers/123`
4. clicks the back button
5. clicks a link to `/dashboard`

The history stack will change as follows where **bold** entries denote the current [URL](https://reactrouter.com/6.30.0/start/concepts#url):

1. **`/dashboard`**
2. `/dashboard`, **`/accounts`**
3. `/dashboard`, `/accounts`, **`/customers/123`**
4. `/dashboard`, **`/accounts`**, `/customers/123`
5. `/dashboard`, `/accounts`, **`/dashboard`**

### History Object

With **client side routing**, developers are able to manipulate the browser [history stack](https://reactrouter.com/6.30.0/start/concepts#history-stack) programmatically. For example, we can write some code like this to change the [URL](https://reactrouter.com/6.30.0/start/concepts#url) without the browsers default behavior of making a request to the server:

```
<a
  href="/contact"
  onClick={(event) => {
    // stop the browser from changing the URL and requesting the new document
    event.preventDefault();
    // push an entry into the browser history stack and change the URL
    window.history.pushState({}, undefined, "/contact");
  }}
/>

```

Copy code to clipboard

For illustration only, don't use `window.history.pushState` directly in React Router

This code changes the [URL](https://reactrouter.com/6.30.0/start/concepts#url) but doesn't do anything for the UI. We would need to write some more code that changed some state somewhere to get the UI to change to the contact page. The trouble is, the browser doesn't give us a way to "listen to the URL" and subscribe to changes like this.

Well, that's not totally true. We can listen for changes to the URL via [pop](https://reactrouter.com/6.30.0/start/concepts#history-actions) events:

```
window.addEventListener("popstate", () => {
  // URL changed!
});

```

Copy code to clipboard

But that only fires when the user clicks the back or forward buttons. There is no event for when the programmer called `window.history.pushState` or `window.history.replaceState`.

That's where a React Router specific `history` object comes into play. It provides a way to "listen for [URL](https://reactrouter.com/6.30.0/start/concepts#url)" changes whether the [history action](https://reactrouter.com/6.30.0/start/concepts#history-actions) is **push**, **pop**, or **replace**.

```
let history = createBrowserHistory();
history.listen(({ location, action }) => {
  // this is called whenever new locations come in
  // the action is POP, PUSH, or REPLACE
});

```

Copy code to clipboard

Apps don't need to set up their own history objects--that's the job of `<Router>`. It sets up one of these objects, subscribe to changes in the [history stack](https://reactrouter.com/6.30.0/start/concepts#history-stack), and finally updates its state when the [URL](https://reactrouter.com/6.30.0/start/concepts#url) changes. This causes the app to re-render and the correct UI to display. The only thing it needs to put on state is a `location`, everything else works from that single object.

### Locations

The browser has a location object on `window.location`. It tells you information about the [URL](https://reactrouter.com/6.30.0/start/concepts#url) but also has some methods to change it:

```
window.location.pathname; // /getting-started/concepts/
window.location.hash; // #location
window.location.reload(); // force a refresh w/ the server
// and a lot more

```

Copy code to clipboard

For illustration. You don't typically work with `window.location` in a React Router app

Instead of using `window.location`, React Router has the concept of a [location](https://reactrouter.com/6.30.0/start/concepts#location) that's patterned after `window.location` but is much simpler. It looks like this:

```
{
  pathname: "/bbq/pig-pickins",
  search: "?campaign=instagram",
  hash: "#menu",
  state: null,
  key: "aefz24ie"
}

```

Copy code to clipboard

The first three: `{ pathname, search, hash }` are exactly like `window.location`. If you just add up the three you'll get the [URL](https://reactrouter.com/6.30.0/start/concepts#url) the user sees in the browser:

```
location.pathname + location.search + location.hash;
// /bbq/pig-pickins?campaign=instagram#menu

```

Copy code to clipboard

The last two, `{ state, key }`, are React Router specific.

**Location Pathname**

This is the part of [URL](https://reactrouter.com/6.30.0/start/concepts#url) after the origin, so for `https://example.com/teams/hotspurs` the pathname is `/teams/hotspurs`. This is the only part of the location that routes match against.

**Location Search**

People use a lot of different terms for this part of the [URL](https://reactrouter.com/6.30.0/start/concepts#url):

- location search
- search params
- URL search params
- query string

In React Router we call it the "location search". However, location search is a serialized version of [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams). So sometimes we might call it "URL search params" as well.

```
// given a location like this:
let location = {
  pathname: "/bbq/pig-pickins",
  search: "?campaign=instagram&popular=true",
  hash: "",
  state: null,
  key: "aefz24ie",
};

// we can turn the location.search into URLSearchParams
let params = new URLSearchParams(location.search);
params.get("campaign"); // "instagram"
params.get("popular"); // "true"
params.toString(); // "campaign=instagram&popular=true",

```

Copy code to clipboard

When being precise, refer to the serialized string version as "search" and the parsed version as "search params", but it's common to use the terms interchangeably when precision isn't important.

**Location Hash**

Hashes in URLs indicate a scroll position _on the current page_. Before the `window.history.pushState` API was introduced, web developers did client side routing exclusively with the hash portion of the [URL](https://reactrouter.com/6.30.0/start/concepts#url), it was the only part we could manipulate without making a new request to the server. However, today we can use it for its designed purpose.

**Location State**

You may have wondered why the `window.history.pushState()` API is called "push state". State? Aren't we just changing the [URL](https://reactrouter.com/6.30.0/start/concepts#url)? Shouldn't it be `history.push`? Well, we weren't in the room when the API was designed, so we're not sure why "state" was the focus, but it is a cool feature of browsers nonetheless.

Browsers let us persist information about a navigation by passing a value to `pushState`. When the user clicks back, the value on `history.state` changes to whatever was "pushed" before.

```
window.history.pushState("look ma!", undefined, "/contact");
window.history.state; // "look ma!"
// user clicks back
window.history.state; // undefined
// user clicks forward
window.history.state; // "look ma!"

```

Copy code to clipboard

For illustration. You don't read `history.state` directly in React Router apps

React Router takes advantage of this browser feature, abstracts it a bit, and surfaces the values on the `location` instead of `history`.

You can think about `location.state` just like `location.hash` or `location.search` except instead of putting the values in the [URL](https://reactrouter.com/6.30.0/start/concepts#url) it's hidden--like a super secret piece of the URL only the programmer knows about.

A couple of great use-cases for location state are:

- Telling the next page where the user came from and branching the UI. The most popular implementation here is showing a record in a modal if the user clicked on an item in a grid view, but if they show up to the URL directly, show the record in its own layout (pinterest, old instagram).
- Sending a partial record from a list to the next screen so it can render the partial data immediately and then fetching the rest of the data afterward.

You set location state in two ways: on `<Link>` or `navigate`:

```
<Link to="/pins/123" state={{ fromDashboard: true }} />;

let navigate = useNavigate();
navigate("/users/123", { state: partialUser });

```

Copy code to clipboard

And on the next page you can access it with `useLocation`:

```
let location = useLocation();
location.state;

```

Copy code to clipboard

Location state values will get serialized, so something like `new Date()` will be turned into a string.

**Location Key**

Each location gets a unique key. This is useful for advanced cases like location-based scroll management, client side data caching, and more. Because each new location gets a unique key, you can build abstractions that store information in a plain object, `new Map()`, or even `locationStorage`.

For example, a very basic client side data cache could store values by location key (and the fetch [URL](https://reactrouter.com/6.30.0/start/concepts#url)) and skip fetching the data when the user clicks back into it:

```
let cache = new Map();

function useFakeFetch(URL) {
  let location = useLocation();
  let cacheKey = location.key + URL;
  let cached = cache.get(cacheKey);

  let [data, setData] = useState(() => {
    // initialize from the cache
    return cached || null;
  });

  let [state, setState] = useState(() => {
    // avoid the fetch if cached
    return cached ? "done" : "loading";
  });

  useEffect(() => {
    if (state === "loading") {
      let controller = new AbortController();
      fetch(URL, { signal: controller.signal })
        .then((res) => res.json())
        .then((data) => {
          if (controller.signal.aborted) return;
          // set the cache
          cache.set(cacheKey, data);
          setData(data);
        });
      return () => controller.abort();
    }
  }, [state, cacheKey]);

  useEffect(() => {
    setState("loading");
  }, [URL]);

  return data;
}

```

Copy code to clipboard

## Matching

On the initial render, and when the [history stack](https://reactrouter.com/6.30.0/start/concepts#history-stack) changes, React Router will match the [location](https://reactrouter.com/6.30.0/start/concepts#location) against your [route config](https://reactrouter.com/6.30.0/start/concepts#route-config) to come up with a set of [matches](https://reactrouter.com/6.30.0/start/concepts#match) to render.

### Defining Routes

A route config is a tree of [routes](https://reactrouter.com/6.30.0/start/concepts#route) that looks something like this:

```
<Routes>
  <Route path="/" element={<App />}>
    <Route index element={<Home />} />
    <Route path="teams" element={<Teams />}>
      <Route path=":teamId" element={<Team />} />
      <Route path=":teamId/edit" element={<EditTeam />} />
      <Route path="new" element={<NewTeamForm />} />
      <Route index element={<LeagueStandings />} />
    </Route>
  </Route>
  <Route element={<PageLayout />}>
    <Route path="/privacy" element={<Privacy />} />
    <Route path="/tos" element={<Tos />} />
  </Route>
  <Route path="contact-us" element={<Contact />} />
</Routes>

```

Copy code to clipboard

The `<Routes>` component recurses through its `props.children`, strips their props, and generates an object like this:

```
let routes = [\
  {\
    element: <App />,\
    path: "/",\
    children: [\
      {\
        index: true,\
        element: <Home />,\
      },\
      {\
        path: "teams",\
        element: <Teams />,\
        children: [\
          {\
            index: true,\
            element: <LeagueStandings />,\
          },\
          {\
            path: ":teamId",\
            element: <Team />,\
          },\
          {\
            path: ":teamId/edit",\
            element: <EditTeam />,\
          },\
          {\
            path: "new",\
            element: <NewTeamForm />,\
          },\
        ],\
      },\
    ],\
  },\
  {\
    element: <PageLayout />,\
    children: [\
      {\
        element: <Privacy />,\
        path: "/privacy",\
      },\
      {\
        element: <Tos />,\
        path: "/tos",\
      },\
    ],\
  },\
  {\
    element: <Contact />,\
    path: "/contact-us",\
  },\
];

```

Copy code to clipboard

In fact, instead of `<Routes>` you can use the hook `useRoutes(routesGoHere)` instead. That's all `<Routes>` is doing.

As you can see, routes can define multiple [segments](https://reactrouter.com/6.30.0/start/concepts#segment) like `:teamId/edit`, or just one like `:teamId`. All of the segments down a branch of the [route config](https://reactrouter.com/6.30.0/start/concepts#route-config) are added together to create a final [path pattern](https://reactrouter.com/6.30.0/start/concepts#path-pattern) for a route.

### Match Params

Note the `:teamId` segments. This is what we call a [dynamic segment](https://reactrouter.com/6.30.0/start/concepts#dynamic-segment) of the [path pattern](https://reactrouter.com/6.30.0/start/concepts#path-pattern), meaning it doesn't match the URL statically (the actual characters) but it matches it dynamically. Any value can fill in for `:teamId`. Both `/teams/123` or `/teams/cupcakes` will match. We call the parsed values [URL params](https://reactrouter.com/6.30.0/start/concepts#url-params). So in this case our `teamId` param would be `"123"` or `"cupcakes"`. We'll see how to use them in your app in the [Rendering](https://reactrouter.com/6.30.0/start/concepts#rendering) section.

### Ranking Routes

If we add up all the segments of all the branches of our [route config](https://reactrouter.com/6.30.0/start/concepts#route-config), we end up with the following path patterns that our app responds to:

```
[\
  "/",\
  "/teams",\
  "/teams/:teamId",\
  "/teams/:teamId/edit",\
  "/teams/new",\
  "/privacy",\
  "/tos",\
  "/contact-us",\
];

```

Copy code to clipboard

Now this is where things get really interesting. Consider the [URL](https://reactrouter.com/6.30.0/start/concepts#url) `/teams/new`. Which pattern in that list matches the URL?

That's right, two of them!

```
/teams/new
/teams/:teamId

```

React Router has to make a decision here, there can be only one. Many routers, both client side and server side, will simply process the patterns in the order in which they were defined. First to match wins. In this case we would match `/` and render the `<Home/>` component. Definitely not what we wanted. These kinds of routers require us to order our routes perfectly to get the expected result. This is how React Router has worked up until v6, but now it's much smarter.

Looking at those patterns, you intuitively know that we want `/teams/new` to match the URL `/teams/new`. It's a perfect match! React Router also knows that. When matching, it will rank your routes according the number of segments, static segments, dynamic segments, star patterns, etc. and pick the most specific match. You'll never have to think about ordering your routes.

### Pathless Routes

You may have noticed the weird routes from earlier:

```
<Route index element={<Home />} />
<Route index element={<LeagueStandings />} />
<Route element={<PageLayout />} />

```

Copy code to clipboard

They don't even have a path, how can they be a route? This is where the word "route" in React Router is used pretty loosely. `<Home/>` and `<LeagueStandings/>` are [index routes](https://reactrouter.com/6.30.0/start/concepts#index-route) and `<PageLayout/>` is a [layout route](https://reactrouter.com/6.30.0/start/concepts#layout-route). We'll discuss how they work in the [Rendering](https://reactrouter.com/6.30.0/start/concepts#rendering) section. Neither really has much to do with matching.

### Route Matches

When a route matches the URL, it's represented by a [match](https://reactrouter.com/6.30.0/start/concepts#match) object. A match for `<Route path=":teamId" element={<Team/>}/>` would look something like this:

```
{
  pathname: "/teams/firebirds",
  params: {
    teamId: "firebirds"
  },
  route: {
    element: <Team />,
    path: ":teamId"
  }
}

```

Copy code to clipboard

`pathname` holds the portion of the URL that matched this route (in our case it's all of it). `params` holds the parsed values from any [dynamic segments](https://reactrouter.com/6.30.0/start/concepts#dynamic-segment) that matched. Note that the param's object keys map directly to the name of the segment: `:teamId` becomes `params.teamId`.

Because our routes are a tree, a single URL can match an entire branch of the tree. Consider the URL `/teams/firebirds`, it would be the following route branch:

```
<Routes>
  <Route path="/" element={<App />}>
    <Route index element={<Home />} />
    <Route path="teams" element={<Teams />}>
      <Route path=":teamId" element={<Team />} />
      <Route path=":teamId/edit" element={<EditTeam />} />
      <Route path="new" element={<NewTeamForm />} />
      <Route index element={<LeagueStandings />} />
    </Route>
  </Route>
  <Route element={<PageLayout />}>
    <Route path="/privacy" element={<Privacy />} />
    <Route path="/tos" element={<Tos />} />
  </Route>
  <Route path="contact-us" element={<Contact />} />
</Routes>

```

Copy code to clipboard

React Router will create an array of [matches](https://reactrouter.com/6.30.0/start/concepts#match) from these routes and the url so it can render a nested UI that matches the route nesting.

```
[\
  {\
    pathname: "/",\
    params: null,\
    route: {\
      element: <App />,\
      path: "/",\
    },\
  },\
  {\
    pathname: "/teams",\
    params: null,\
    route: {\
      element: <Teams />,\
      path: "teams",\
    },\
  },\
  {\
    pathname: "/teams/firebirds",\
    params: {\
      teamId: "firebirds",\
    },\
    route: {\
      element: <Team />,\
      path: ":teamId",\
    },\
  },\
];

```

Copy code to clipboard

## Rendering

The final concept is rendering. Consider that the entry to your app looks like this:

```
const root = ReactDOM.createRoot(
  document.getElementById("root")
);
root.render(
  <BrowserRouter>
    <Routes>
      <Route path="/" element={<App />}>
        <Route index element={<Home />} />
        <Route path="teams" element={<Teams />}>
          <Route path=":teamId" element={<Team />} />
          <Route path="new" element={<NewTeamForm />} />
          <Route index element={<LeagueStandings />} />
        </Route>
      </Route>
      <Route element={<PageLayout />}>
        <Route path="/privacy" element={<Privacy />} />
        <Route path="/tos" element={<Tos />} />
      </Route>
      <Route path="contact-us" element={<Contact />} />
    </Routes>
  </BrowserRouter>
);

```

Copy code to clipboard

Let's use the `/teams/firebirds` URL as an example again. `<Routes>` will match the [location](https://reactrouter.com/6.30.0/start/concepts#location) to your [route config](https://reactrouter.com/6.30.0/start/concepts#route-config), get a set of [matches](https://reactrouter.com/6.30.0/start/concepts#match), and then render a React element tree like this:

```
<App>
  <Teams>
    <Team />
  </Teams>
</App>

```

Copy code to clipboard

Each match rendered inside the parent route's element is a really powerful abstraction. Most websites and apps share this characteristic: boxes inside of boxes inside of boxes, each with a navigation section that changes a child section of the page.

### Outlets

This nested element tree won't happen automatically. `<Routes>` will render the first match's element for you (In our case that's `<App/>`). The next match's element is `<Teams>`. In order to render that, `App` needs to render an [outlet](https://reactrouter.com/6.30.0/start/concepts#outlet).

```
function App() {
  return (
    <div>
      <GlobalNav />
      <Outlet />
      <GlobalFooter />
    </div>
  );
}

```

Copy code to clipboard

The `Outlet` component will always render the next match. That means `<Teams>` also needs an outlet to render `<Team/>`.

If the URL were `/contact-us`, the element tree would change to:

```
<Contact />

```

Copy code to clipboard

Because the contact form is not under the main `<App>` route.

If the URL were `/teams/firebirds/edit`, the element tree would change to:

```
<App>
  <Teams>
    <EditTeam />
  </Teams>
</App>

```

Copy code to clipboard

The outlet swaps out the child for the new child that matches, but the parent layout persists. It's subtle but very effective at cleaning up your components.

### Index Routes

Remember the [route config](https://reactrouter.com/6.30.0/start/concepts#route-config) for `/teams`:

```
<Route path="teams" element={<Teams />}>
  <Route path=":teamId" element={<Team />} />
  <Route path="new" element={<NewTeamForm />} />
  <Route index element={<LeagueStandings />} />
</Route>

```

Copy code to clipboard

If the URL were `/teams/firebirds`, the element tree would be:

```
<App>
  <Teams>
    <Team />
  </Teams>
</App>

```

Copy code to clipboard

But if the URL were `/teams`, the element tree would be:

```
<App>
  <Teams>
    <LeagueStandings />
  </Teams>
</App>

```

Copy code to clipboard

League standings? How the heck did `<Route index element={<LeagueStandings>}/>` pop in there? It doesn't even have a path! The reason is that it's an [index route](https://reactrouter.com/6.30.0/start/concepts#index-route). Index routes render in their parent route's [outlet](https://reactrouter.com/6.30.0/start/concepts#outlet) at the parent route's path.

Think of it this way, if you're not at one of the child routes' paths, the `<Outlet>` will render nothing in the UI:

```
<App>
  <Teams />
</App>

```

Copy code to clipboard

If all the teams are in a list on the left then an empty outlet means you've got a blank page on the right! Your UI needs something to fill the space: index routes to the rescue.

Another way to think of an index route is that it's the default child route when the parent matches but none of its children do.

Depending on the user interface, you might not need an index route, but if there is any sort of persistent navigation in the parent route you'll most likely want an index route to fill the space when the user hasn't clicked one of the items yet.

### Layout Routes

Here's a part of our route config we haven't matched yet: `/privacy`. Let's look at the route config again, highlighting the matched routes:

```
<Routes>
  <Route path="/" element={<App />}>
    <Route index element={<Home />} />
    <Route path="teams" element={<Teams />}>
      <Route path=":teamId" element={<Team />} />
      <Route path=":teamId/edit" element={<EditTeam />} />
      <Route path="new" element={<NewTeamForm />} />
      <Route index element={<LeagueStandings />} />
    </Route>
  </Route>
  <Route element={<PageLayout />}>
    <Route path="/privacy" element={<Privacy />} />
    <Route path="/tos" element={<Tos />} />
  </Route>
  <Route path="contact-us" element={<Contact />} />
</Routes>

```

Copy code to clipboard

And the resulting element tree rendered will be:

```
<PageLayout>
  <Privacy />
</PageLayout>

```

Copy code to clipboard

Don't forget to add an `<Outlet>` to your layout where you would like child route elements to be rendered. Using `{children}` will not work as expected.

The `PageLayout` route is admittedly weird. We call it a [layout route](https://reactrouter.com/6.30.0/start/concepts#layout-route) because it doesn't participate in the matching at all (though its children do). It only exists to make wrapping multiple child routes in the same layout simpler. If we didn't allow this then you'd have to handle layouts in two different ways: sometimes your routes do it for you, sometimes you do it manually with lots of layout component repetition throughout your app:

You can do it like this, but we recommend using a layout route

```
<Routes>
  <Route path="/" element={<App />}>
    <Route index element={<Home />} />
    <Route path="teams" element={<Teams />}>
      <Route path=":teamId" element={<Team />} />
      <Route path=":teamId/edit" element={<EditTeam />} />
      <Route path="new" element={<NewTeamForm />} />
      <Route index element={<LeagueStandings />} />
    </Route>
  </Route>
  <Route
    path="/privacy"
    element={
      <PageLayout>
        <Privacy />
      </PageLayout>
    }
  />
  <Route
    path="/tos"
    element={
      <PageLayout>
        <Tos />
      </PageLayout>
    }
  />
  <Route path="contact-us" element={<Contact />} />
</Routes>

```

Copy code to clipboard

So, yeah, the semantics of a layout "route" is a bit silly since it has nothing to do with the URL matching, but it's just too convenient to disallow.

## Navigating

When the [URL](https://reactrouter.com/6.30.0/start/concepts#url) changes we call that a "navigation". There are two ways to navigate in React Router:

- `<Link>`
- `navigate`

### Link

This is the primary means of navigation. Rendering a `<Link>` allows the user to change the URL when they click it. React Router will prevent the browser's default behavior and tell the [history](https://reactrouter.com/6.30.0/start/concepts#history) to push a new entry into the [history stack](https://reactrouter.com/6.30.0/start/concepts#history-stack). The [location](https://reactrouter.com/6.30.0/start/concepts#location) changes and the new [matches](https://reactrouter.com/6.30.0/start/concepts#match) will render.

However, links are accessible in that they:

- Still render a `<a href>` so all default accessibility concerns are met (like keyboard, focusability, SEO, etc.)
- Don't prevent the browser's default behavior if it's a right click or command/control click to "open in new tab"

[Nested routes](https://reactrouter.com/6.30.0/start/concepts#nested-routes) aren't just about rendering layouts; they also enable "relative links". Consider our `teams` route from before:

```
<Route path="teams" element={<Teams />}>
  <Route path=":teamId" element={<Team />} />
</Route>

```

Copy code to clipboard

The `<Teams>` component can render links like:

```
<Link to="psg" />
<Link to="new" />

```

Copy code to clipboard

The full path it links to will be `/teams/psg` and `/teams/new`. They inherit the route within which they are rendered. This makes it so your route components don't have to really know anything about the rest of the routes in the app. A very large amount of links just go one more [segment](https://reactrouter.com/6.30.0/start/concepts#segment) deeper. You can rearrange your whole [route config](https://reactrouter.com/6.30.0/start/concepts#route-config) and these links will likely still work just fine. This is very valuable when building out a site in the beginning and the designs and layouts are shifting around.

### Navigate Function

This function is returned from the `useNavigate` hook and allows you, the programmer, to change the URL whenever you want. You could do it on a timeout:

```
let navigate = useNavigate();
useEffect(() => {
  setTimeout(() => {
    navigate("/logout");
  }, 30000);
}, []);

```

Copy code to clipboard

Or after a form is submitted:

```
<form onSubmit={event => {
  event.preventDefault();
  let data = new FormData(event.target)
  let urlEncoded = new URLSearchParams(data)
  navigate("/create", { state: urlEncoded })
}}>

```

Copy code to clipboard

Like `Link`, `navigate` works with nested "to" values as well.

```
navigate("psg");

```

Copy code to clipboard

You should have a good reason to use `navigate` instead of `<Link>`. This makes us very sad:

```
<li onClick={() => navigate("/somewhere")} />

```

Copy code to clipboard

Aside from links and forms, very few interactions should change the URL because it introduces complexity around accessibility and user expectations.

## Data Access

Finally, an application is going to want to ask React Router for a few pieces of information in order to build out the full UI. For this, React Router has a pile of hooks

```
let location = useLocation();
let urlParams = useParams();
let [urlSearchParams] = useSearchParams();

```

Copy code to clipboard

## Review

Let's put it all together from the top!

1. You render your app:



```
const root = ReactDOM.createRoot(
     document.getElementById("root")
);
root.render(
     <BrowserRouter>
       <Routes>
         <Route path="/" element={<App />}>
           <Route index element={<Home />} />
           <Route path="teams" element={<Teams />}>
             <Route path=":teamId" element={<Team />} />
             <Route path="new" element={<NewTeamForm />} />
             <Route index element={<LeagueStandings />} />
           </Route>
         </Route>
         <Route element={<PageLayout />}>
           <Route path="/privacy" element={<Privacy />} />
           <Route path="/tos" element={<Tos />} />
         </Route>
         <Route path="contact-us" element={<Contact />} />
       </Routes>
     </BrowserRouter>
);

```

Copy code to clipboard

2. `<BrowserRouter>` creates a [history](https://reactrouter.com/6.30.0/start/concepts#history), puts the initial [location](https://reactrouter.com/6.30.0/start/concepts#location) in to state, and subscribes to the [URL](https://reactrouter.com/6.30.0/start/concepts#url).

3. `<Routes>` recurses its [child routes](https://reactrouter.com/6.30.0/start/concepts#child-route) to build a [route config](https://reactrouter.com/6.30.0/start/concepts#route-config), matches those routes against the [location](https://reactrouter.com/6.30.0/start/concepts#location), creates some route [matches](https://reactrouter.com/6.30.0/start/concepts#match), and renders the first match's route element.

4. You render an [`<Outlet/>`](https://reactrouter.com/6.30.0/start/concepts#outlet) in each [parent route](https://reactrouter.com/6.30.0/start/concepts#parent-route).

5. The outlets render the next match in the route [matches](https://reactrouter.com/6.30.0/start/concepts#match).

6. The user clicks a link

7. The link calls `navigate()`

8. The [history](https://reactrouter.com/6.30.0/start/concepts#history) changes the URL and notifies `<BrowserRouter>`.

9. `<BrowserRouter>` rerenders, start over at (2)!


That's it! We hope this guide has helped you gain a deeper understanding of the main concepts in React Router.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/upgrading/remix) [dev](https://reactrouter.com/dev/upgrading/remix)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Upgrading from Remix

On this page

- [1\. Adopt future flags](https://reactrouter.com/upgrading/remix#1-adopt-future-flags)
- [2\. Update dependencies](https://reactrouter.com/upgrading/remix#2-update-dependencies)
- [3\. Change `scripts` in `package.json`](https://reactrouter.com/upgrading/remix#3-change-scripts-in-packagejson)
- [4\. Add a `routes.ts` file](https://reactrouter.com/upgrading/remix#4-add-a-routests-file)
- [5\. Add a React Router config](https://reactrouter.com/upgrading/remix#5-add-a-react-router-config)
- [6\. Add React Router plugin to `vite.config`](https://reactrouter.com/upgrading/remix#6-add-react-router-plugin-to-viteconfig)
- [7\. Enable type safety](https://reactrouter.com/upgrading/remix#7-enable-type-safety)
- [8\. Rename components in entry files](https://reactrouter.com/upgrading/remix#8-rename-components-in-entry-files)
- [9\. Update types for `AppLoadContext`](https://reactrouter.com/upgrading/remix#9-update-types-for-apploadcontext)

- [1\. Adopt future flags](https://reactrouter.com/upgrading/remix#1-adopt-future-flags)
- [2\. Update dependencies](https://reactrouter.com/upgrading/remix#2-update-dependencies)
- [3\. Change `scripts` in `package.json`](https://reactrouter.com/upgrading/remix#3-change-scripts-in-packagejson)
- [4\. Add a `routes.ts` file](https://reactrouter.com/upgrading/remix#4-add-a-routests-file)
- [5\. Add a React Router config](https://reactrouter.com/upgrading/remix#5-add-a-react-router-config)
- [6\. Add React Router plugin to `vite.config`](https://reactrouter.com/upgrading/remix#6-add-react-router-plugin-to-viteconfig)
- [7\. Enable type safety](https://reactrouter.com/upgrading/remix#7-enable-type-safety)
- [8\. Rename components in entry files](https://reactrouter.com/upgrading/remix#8-rename-components-in-entry-files)
- [9\. Update types for `AppLoadContext`](https://reactrouter.com/upgrading/remix#9-update-types-for-apploadcontext)

# Upgrading from Remix

React Router v7 requires the following minimum versions:

- `node@20`
- `react@18`
- `react-dom@18`

React Router v7 is the next major version of Remix after v2 (see our ["Incremental Path to React 19" blog post](https://remix.run/blog/incremental-path-to-react-19) for more information).

If you have enabled all [Remix v2 future flags](https://remix.run/docs/start/future-flags), upgrading from Remix v2 to React Router v7 mainly involves updating dependencies.

The majority of steps 2-8 can be automatically updated using a [codemod](https://codemod.com/registry/remix-2-react-router-upgrade) created by community member [James Restall](https://github.com/jrestall).

## 1\. Adopt future flags

**👉 Adopt future flags**

Adopt all existing [future flags](https://remix.run/docs/start/future-flags) in your Remix v2 application.

## 2\. Update dependencies

Most of the "shared" APIs that used to be re-exported through the runtime-specific packages ( `@remix-run/node`, `@remix-run/cloudflare`, etc.) have all been collapsed into `react-router` in v7. So instead of importing from `@react-router/node` or `@react-router/cloudflare`, you'll import those directly from `react-router`.

```
-import { redirect } from "@remix-run/node";
+import { redirect } from "react-router";

```

The only APIs you should be importing from the runtime-specific packages in v7 are APIs that are specific to that runtime, such as `createFileSessionStorage` for Node and `createWorkersKVSessionStorage` for Cloudflare.

**👉 Run the codemod (automated)**

You can automatically update your packages and imports with the following [codemod](https://codemod.com/registry/remix-2-react-router-upgrade). This codemod updates all of your packages and imports. Be sure to commit any pending changes before running the codemod, in case you need to revert.

```
npx codemod remix/2/react-router/upgrade

```

**👉 Install the new dependencies**

After the codemod updates your dependencies, you need to install the dependencies to remove Remix packages and add the new React Router packages.

```
npm install

```

**👉 Update your dependencies (manual)**

If you prefer not to use the codemod, you can manually update your dependencies.

Expand to see a table of package name changes in alphabetical order

| Remix v2 Package |  | React Router v7 Package |
| --- | --- | --- |
| `@remix-run/architect` | ➡️ | `@react-router/architect` |
| `@remix-run/cloudflare` | ➡️ | `@react-router/cloudflare` |
| `@remix-run/dev` | ➡️ | `@react-router/dev` |
| `@remix-run/express` | ➡️ | `@react-router/express` |
| `@remix-run/fs-routes` | ➡️ | `@react-router/fs-routes` |
| `@remix-run/node` | ➡️ | `@react-router/node` |
| `@remix-run/react` | ➡️ | `react-router` |
| `@remix-run/route-config` | ➡️ | `@react-router/dev` |
| `@remix-run/routes-option-adapter` | ➡️ | `@react-router/remix-routes-option-adapter` |
| `@remix-run/serve` | ➡️ | `@react-router/serve` |
| `@remix-run/server-runtime` | ➡️ | `react-router` |
| `@remix-run/testing` | ➡️ | `react-router` |

## 3\. Change `scripts` in `package.json`

If you used the codemod you can skip this step as it was automatically completed.

**👉 Update the scripts in your `package.json`**

| Script | Remix v2 |  | React Router v7 |
| --- | --- | --- | --- |
| `dev` | `remix vite:dev` | ➡️ | `react-router dev` |
| `build` | `remix vite:build` | ➡️ | `react-router build` |
| `start` | `remix-serve build/server/index.js` | ➡️ | `react-router-serve build/server/index.js` |
| `typecheck` | `tsc` | ➡️ | `react-router typegen && tsc` |

## 4\. Add a `routes.ts` file

If you used the codemod _and_ Remix v2 `v3_routeConfig` flag, you can skip this step as it was automatically completed.

In React Router v7 you define your routes using the `app/routes.ts` file. View the [routing documentation](https://reactrouter.com/start/framework/routing) for more information.

**👉 Update dependencies (if using Remix v2 `v3_routeConfig` flag)**

```
// app/routes.ts
-import { type RouteConfig } from "@remix-run/route-config";
-import { flatRoutes } from "@remix-run/fs-routes";
-import { remixRoutesOptionAdapter } from "@remix-run/routes-option-adapter";
+import { type RouteConfig } from "@react-router/dev/routes";
+import { flatRoutes } from "@react-router/fs-routes";
+import { remixRoutesOptionAdapter } from "@react-router/remix-routes-option-adapter";

export default [\
  // however your routes are defined\
] satisfies RouteConfig;

```

**👉 Add a `routes.ts` file (if _not_ using Remix v2 `v3_routeConfig` flag)**

```
touch app/routes.ts

```

For backwards-compatibility and for folks who prefer [file-based conventions](https://reactrouter.com/how-to/file-route-conventions), you can opt-into the same "flat routes" convention you are using in Remix v2 via the new `@react-router/fs-routes` package:

```
import { type RouteConfig } from "@react-router/dev/routes";
import { flatRoutes } from "@react-router/fs-routes";

export default flatRoutes() satisfies RouteConfig;

```

Or, if you were using the `routes` option to define config-based routes:

```
import { type RouteConfig } from "@react-router/dev/routes";
import { remixRoutesOptionAdapter } from "@react-router/remix-routes-option-adapter";

export default remixRoutesOptionAdapter((defineRoutes) => {
  return defineRoutes((route) => {
    route("/", "home/route.tsx", { index: true });
    route("about", "about/route.tsx");
    route("", "concerts/layout.tsx", () => {
      route("trending", "concerts/trending.tsx");
      route(":city", "concerts/city.tsx");
    });
  });
}) satisfies RouteConfig;

```

If you were using the `routes` option in your `vite.config.ts`, be sure to remove it.

```
export default defineConfig({
  plugins: [\
    remix({\
      ssr: true,\
-     ignoredRouteFiles: ['**/*'],\
-     routes(defineRoutes) {\
-       return defineRoutes((route) => {\
-         route("/somewhere/cool/*", "catchall.tsx");\
-       });\
-     },\
    })\
    tsconfigPaths(),\
  ],
});

```

## 5\. Add a React Router config

**👉 Add `react-router.config.ts` your project**

The config that was previously passed to the `remix` plugin in `vite.config.ts` is now exported from `react-router.config.ts`.

Note: At this point you should remove the v3 future flags you added in step 1.

```
touch react-router.config.ts

```

```
// vite.config.ts
export default defineConfig({
  plugins: [\
-   remix({\
-     ssr: true,\
-     future: {/* all the v3 flags */}\
-   }),\
+   remix(),\
    tsconfigPaths(),\
  ],
});

// react-router.config.ts
+import type { Config } from "@react-router/dev/config";
+export default {
+  ssr: true,
+} satisfies Config;

```

## 6\. Add React Router plugin to `vite.config`

If you used the codemod you can skip this step as it was automatically completed.

**👉 Add `reactRouter` plugin to `vite.config`**

Change `vite.config.ts` to import and use the new `reactRouter` plugin from `@react-router/dev/vite`:

```
-import { vitePlugin as remix } from "@remix-run/dev";
+import { reactRouter } from "@react-router/dev/vite";
import { defineConfig } from "vite";
import tsconfigPaths from "vite-tsconfig-paths";

export default defineConfig({
  plugins: [\
-   remix(),\
+   reactRouter(),\
    tsconfigPaths(),\
  ],
});

```

## 7\. Enable type safety

If you are not using TypeScript, you can skip this step.

React Router automatically generates types for your route modules into a `.react-router/` directory at the root of your app. This directory is fully managed by React Router and should be gitignore'd. Learn more about the [new type safety features](https://reactrouter.com/explanation/type-safety).

**👉 Add `.react-router/` to `.gitignore`**

```txt
.react-router/

```

**👉 Update `tsconfig.json`**

Update the `types` field in your `tsconfig.json` to include:

- `.react-router/types/**/*` path in the `include` field
- The appropriate `@react-router/*` package in the `types` field
- `rootDirs` for simplified relative imports

```
{
  "include": [\
    /* ... */\
+   ".react-router/types/**/*"\
  ],
  "compilerOptions": {
-   "types": ["@remix-run/node", "vite/client"],
+   "types": ["@react-router/node", "vite/client"],
    /* ... */
+   "rootDirs": [".", "./.react-router/types"]
  }
}

```

## 8\. Rename components in entry files

If you used the codemod you can skip this step as it was automatically completed.

If you have an `entry.server.tsx` and/or an `entry.client.tsx` file in your application, you will need to update the main components in these files:

```
-import { RemixServer } from "@remix-run/react";
+import { ServerRouter } from "react-router";

-<RemixServer context={remixContext} url={request.url} />,
+<ServerRouter context={remixContext} url={request.url} />,

```

```
-import { RemixBrowser } from "@remix-run/react";
+import { HydratedRouter } from "react-router/dom";

hydrateRoot(
  document,
  <StrictMode>
-   <RemixBrowser />
+   <HydratedRouter />
  </StrictMode>,
);

```

## 9\. Update types for `AppLoadContext`

If you were using `remix-serve` you can skip this step. This is only applicable if you were using a custom server in Remix v2.

Since React Router can be used as both a React framework _and_ a stand-alone routing library, the `context` argument for `LoaderFunctionArgs` and `ActionFunctionArgs` is now optional and typed as `any` by default. You can register types for your load context to get type safety for your loaders and actions.

👉 **Register types for your load context**

Before you migrate to the new `Route.LoaderArgs` and `Route.ActionArgs` types, you can temporarily augment `LoaderFunctionArgs` and `ActionFunctionArgs` with your load context type to ease migration.

```
declare module "react-router" {
  // Your AppLoadContext used in v2
  interface AppLoadContext {
    whatever: string;
  }

  // TODO: remove this once we've migrated to `Route.LoaderArgs` instead for our loaders
  interface LoaderFunctionArgs {
    context: AppLoadContext;
  }

  // TODO: remove this once we've migrated to `Route.ActionArgs` instead for our actions
  interface ActionFunctionArgs {
    context: AppLoadContext;
  }
}

export {}; // necessary for TS to treat this as a module

```

Using `declare module` to register types is a standard TypeScript technique called [module augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation).
You can do this in any TypeScript file covered by your `tsconfig.json`'s `include` field, but we recommend a dedicated `env.ts` within your app directory.

👉 **Use the new types**

Once you adopt the [new type generation](https://reactrouter.com/explanation/type-safety), you can remove the `LoaderFunctionArgs`/ `ActionFunctionArgs` augmentations and use the `context` argument from [`Route.LoaderArgs`](https://reactrouter.com/start/framework/data-loading#server-data-loading) and [`Route.ActionArgs`](https://reactrouter.com/start/framework/actions#server-actions) instead.

```
declare module "react-router" {
  // Your AppLoadContext used in v2
  interface AppLoadContext {
    whatever: string;
  }
}

export {}; // necessary for TS to treat this as a module

```

```
import type { Route } from "./+types/my-route";

export function loader({ context }: Route.LoaderArgs) {}
// { whatever: string }  ^^^^^^^

export function action({ context }: Route.ActionArgs) {}
// { whatever: string }  ^^^^^^^

```

Congratulations! You are now on React Router v7. Go ahead and run your application to make sure everything is working as expected.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/upgrading/remix.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Deferred Data

On this page

- [The problem](https://reactrouter.com/6.30.0/guides/deferred#the-problem)
- [The solution](https://reactrouter.com/6.30.0/guides/deferred#the-solution)
- [Using `defer`](https://reactrouter.com/6.30.0/guides/deferred#using-defer)
- [Evaluating the solution](https://reactrouter.com/6.30.0/guides/deferred#evaluating-the-solution)
- [FAQ](https://reactrouter.com/6.30.0/guides/deferred#faq)
- [Why not defer everything by default?](https://reactrouter.com/6.30.0/guides/deferred#why-not-defer-everything-by-default)
- [When does the `<Suspense/>` fallback render?](https://reactrouter.com/6.30.0/guides/deferred#when-does-the-suspense-fallback-render)
- [Why don't Response objects returned by the loader work anymore?](https://reactrouter.com/6.30.0/guides/deferred#why-dont-response-objects-returned-by-the-loader-work-anymore)

- [The problem](https://reactrouter.com/6.30.0/guides/deferred#the-problem)
- [The solution](https://reactrouter.com/6.30.0/guides/deferred#the-solution)
- [Using `defer`](https://reactrouter.com/6.30.0/guides/deferred#using-defer)
- [Evaluating the solution](https://reactrouter.com/6.30.0/guides/deferred#evaluating-the-solution)
- [FAQ](https://reactrouter.com/6.30.0/guides/deferred#faq)
- [Why not defer everything by default?](https://reactrouter.com/6.30.0/guides/deferred#why-not-defer-everything-by-default)
- [When does the `<Suspense/>` fallback render?](https://reactrouter.com/6.30.0/guides/deferred#when-does-the-suspense-fallback-render)
- [Why don't Response objects returned by the loader work anymore?](https://reactrouter.com/6.30.0/guides/deferred#why-dont-response-objects-returned-by-the-loader-work-anymore)

# Deferred Data Guide

## The problem

Imagine a scenario where one of your routes' loaders needs to retrieve some data that for one reason or another is quite slow. For example, let's say you're showing the user the location of a package that's being delivered to their home:

```
import { json, useLoaderData } from "react-router-dom";
import { getPackageLocation } from "./api/packages";

async function loader({ params }) {
  const packageLocation = await getPackageLocation(
    params.packageId
  );

  return json({ packageLocation });
}

function PackageRoute() {
  const data = useLoaderData();
  const { packageLocation } = data;

  return (
    <main>
      <h1>Let's locate your package</h1>
      <p>
        Your package is at {packageLocation.latitude} lat
        and {packageLocation.longitude} long.
      </p>
    </main>
  );
}

```

Copy code to clipboard

We'll assume that `getPackageLocation` is slow. This will lead to initial page load times and transitions to that route to take as long as the slowest bit of data. There are a few things you can do to optimize this and improve the user experience:

- Speed up the slow thing (😅).
- Parallelize data loading with `Promise.all` (we have nothing to parallelize in our example, but it might help a bit in other situations).
- Add a global transition spinner (helps a bit with UX).
- Add a localized skeleton UI (helps a bit with UX).

If these approaches don't work well, then you may feel forced to move the slow data out of the `loader` into a component fetch (and show a skeleton fallback UI while loading). In this case you'd render the fallback UI on mount and fire off the fetch for the data. This is actually not so terrible from a DX standpoint thanks to [`useFetcher`](https://reactrouter.com/6.30.0/hooks/use-fetcher). And from a UX standpoint this improves the loading experience for both client-side transitions as well as initial page load. So it does seem to solve the problem.

But it's still sub optimal in most cases (especially if you're code-splitting route components) for two reasons:

1. Client-side fetching puts your data request on a waterfall: document -> JavaScript -> Lazy Loaded Route -> data fetch
2. Your code can't easily switch between component fetching and route fetching (more on this later).

## The solution

React Router takes advantage of React 18's Suspense for data fetching using the [`defer` Response](https://reactrouter.com/6.30.0/utils/defer) utility and [`<Await />`](https://reactrouter.com/6.30.0/components/await) component / [`useAsyncValue`](https://reactrouter.com/6.30.0/hooks/use-async-value) hook. By using these APIs, you can solve both of these problems:

1. Your data is no longer on a waterfall: document -> JavaScript -> Lazy Loaded Route & data (in parallel)
2. Your code can easily switch between rendering the fallback and waiting for the data

Let's take a dive into how to accomplish this.

### Using `defer`

Start by adding `<Await />` for your slow data requests where you'd rather render a fallback UI. Let's do that for our example above:

```
import {
  Await,
  defer,
  useLoaderData,
} from "react-router-dom";
import { getPackageLocation } from "./api/packages";

async function loader({ params }) {
  const packageLocationPromise = getPackageLocation(
    params.packageId
  );

  return defer({
    packageLocation: packageLocationPromise,
  });
}

export default function PackageRoute() {
  const data = useLoaderData();

  return (
    <main>
      <h1>Let's locate your package</h1>
      <React.Suspense
        fallback={<p>Loading package location...</p>}
      >
        <Await
          resolve={data.packageLocation}
          errorElement={
            <p>Error loading package location!</p>
          }
        >
          {(packageLocation) => (
            <p>
              Your package is at {packageLocation.latitude}{" "}
              lat and {packageLocation.longitude} long.
            </p>
          )}
        </Await>
      </React.Suspense>
    </main>
  );
}

```

Copy code to clipboard

Alternatively, you can use the \`useAsyncValue\` hook:

If you're not jazzed about bringing back render props, you can use a hook, but you'll have to break things out into another component:

```
export default function PackageRoute() {
  const data = useLoaderData();

  return (
    <main>
      <h1>Let's locate your package</h1>
      <React.Suspense
        fallback={<p>Loading package location...</p>}
      >
        <Await
          resolve={data.packageLocation}
          errorElement={
            <p>Error loading package location!</p>
          }
        >
          <PackageLocation />
        </Await>
      </React.Suspense>
    </main>
  );
}

function PackageLocation() {
  const packageLocation = useAsyncValue();
  return (
    <p>
      Your package is at {packageLocation.latitude} lat and{" "}
      {packageLocation.longitude} long.
    </p>
  );
}

```

Copy code to clipboard

## Evaluating the solution

So rather than waiting for the component before we can trigger the fetch request, we start the request for the slow data as soon as the user starts the transition to the new route. This can significantly speed up the user experience for slower networks.

Additionally, the API that React Router exposes for this is extremely ergonomic. You can literally switch between whether something is going to be deferred or not based on whether you include the `await` keyword:

```
return defer({
  // not deferred:
  packageLocation: await packageLocationPromise,
  // deferred:
  packageLocation: packageLocationPromise,
});

```

Copy code to clipboard

Because of this, you can A/B test deferring, or even determine whether to defer based on the user or data being requested:

```
async function loader({ request, params }) {
  const packageLocationPromise = getPackageLocation(
    params.packageId
  );
  const shouldDefer = shouldDeferPackageLocation(
    request,
    params.packageId
  );

  return defer({
    packageLocation: shouldDefer
      ? packageLocationPromise
      : await packageLocationPromise,
  });
}

```

Copy code to clipboard

That `shouldDeferPackageLocation` could be implemented to check the user making the request, whether the package location data is in a cache, the status of an A/B test, or whatever else you want. This is pretty sweet 🍭

## FAQ

### Why not defer everything by default?

The React Router defer API is another lever React Router offers to give you a nice way to choose between trade-offs. Do you want the page to render more quickly? Defer stuff. Do you want a lower CLS (Content Layout Shift)? Don't defer stuff. You want a faster render, but also want a lower CLS? Defer just the slow and unimportant stuff.

It's all trade-offs, and what's neat about the API design is that it's well suited for you to do easy experimentation to see which trade-offs lead to better results for your real-world key indicators.

### When does the `<Suspense/>` fallback render?

The `<Await />` component will only throw the promise up the `<Suspense>` boundary on the initial render of the `<Await />` component with an unsettled promise. It will not re-render the fallback if props change. Effectively, this means that you _will not_ get a fallback rendered when a user submits a form and loader data is revalidated. You _will_ get a fallback rendered when the user navigates to the same route with different params (in the context of our above example, if the user selects from a list of packages on the left to find their location on the right).

This may feel counter-intuitive at first, but stay with us, we really thought this through and it's important that it works this way. Let's imagine a world without the deferred API. For those scenarios you're probably going to want to implement Optimistic UI for form submissions/revalidation.

When you decide you'd like to try the trade-offs of `defer`, we don't want you to have to change or remove those optimizations because we want you to be able to easily switch between deferring some data and not deferring it. So, we ensure that your existing optimistic states work the same way. If we didn't do this, then you could experience what we call "Popcorn UI" where submissions of data trigger the fallback loading state instead of the optimistic UI you'd worked hard on.

So just keep this in mind: **Deferred is 100% only about the initial load of a route and its params.**

### Why don't Response objects returned by the loader work anymore?

When you use `defer`, you're telling React Router to load the page immediately, without the deferred data. The page is already loaded before the `Response` object is returned so responses are not automatically processed in the same way as if you had done `return fetch(url)`.

Therefore, you will need to handle your own `Response` processing and resolve your deferred Promise with data, not a `Response` instance.

```
async function loader({ request, params }) {
  return defer({
    // Broken! Resolves with a Response
    // broken: fetch(url),

    // Fixed! Resolves with the response data
    data: fetch(url).then((res) => res.json()),
  });
}

```

Copy code to clipboard

Or consider the scenario where our deferred data could return a redirect `Response`. You can detect the redirect and send the status code and location back as data, and then you could perform a client-side redirect in your component via `useEffect` and `useNavigate`.

```
async function loader({ request, params }) {
  let data = fetch(url).then((res) => {
    if (res.status == 301) {
      return {
        isRedirect: true,
        status: res.status,
        location: res.headers.get("Location"),
      };
    }
    return res.json();
  });

  return defer({ data });
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/explanation/hot-module-replacement) [dev](https://reactrouter.com/dev/explanation/hot-module-replacement)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Hot Module Replacement

On this page

- [React Fast Refresh](https://reactrouter.com/explanation/hot-module-replacement#react-fast-refresh)
- [Class Component State](https://reactrouter.com/explanation/hot-module-replacement#class-component-state)
- [Named Function Components](https://reactrouter.com/explanation/hot-module-replacement#named-function-components)
- [Supported Exports](https://reactrouter.com/explanation/hot-module-replacement#supported-exports)
- [Changing Hooks](https://reactrouter.com/explanation/hot-module-replacement#changing-hooks)
- [Component Keys](https://reactrouter.com/explanation/hot-module-replacement#component-keys)

- [React Fast Refresh](https://reactrouter.com/explanation/hot-module-replacement#react-fast-refresh)
- [Class Component State](https://reactrouter.com/explanation/hot-module-replacement#class-component-state)
- [Named Function Components](https://reactrouter.com/explanation/hot-module-replacement#named-function-components)
- [Supported Exports](https://reactrouter.com/explanation/hot-module-replacement#supported-exports)
- [Changing Hooks](https://reactrouter.com/explanation/hot-module-replacement#changing-hooks)
- [Component Keys](https://reactrouter.com/explanation/hot-module-replacement#component-keys)

# Hot Module Replacement

Hot Module Replacement is a technique for updating modules in your app without needing to reload the page.
It's a great developer experience, and React Router supports it when using Vite.

HMR does its best to preserve browser state across updates.
For example, let's say you have form within a modal and you fill out all the fields.
As soon as you save any changes to the code, traditional live reload would hard refresh the page causing all of those fields to be reset.
Every time you make a change, you'd have to open up the modal _again_ and fill out the form _again_.

But with HMR, all of that state is preserved _across updates_.

## React Fast Refresh

React already has mechanisms for updating the DOM via its [virtual DOM](https://reactjs.org/docs/faq-internals.html#what-is-the-virtual-dom) in response to user interactions like clicking a button.
Wouldn't it be great if React could handle updating the DOM in response to code changes too?

That's exactly what [React Fast Refresh](https://github.com/facebook/react/tree/main/packages/react-refresh) is all about!
Of course, React is all about components, not general JavaScript code, so React Fast Refresh only handles hot updates for exported React components.

But React Fast Refresh does have some limitations that you should be aware of.

### Class Component State

React Fast Refresh does not preserve state for class components.
This includes higher-order components that internally return classes:

```
export class ComponentA extends Component {} // ❌

export const ComponentB = HOC(ComponentC); // ❌ Won't work if HOC returns a class component

export function ComponentD() {} // ✅
export const ComponentE = () => {}; // ✅
export default function ComponentF() {} // ✅

```

Copy code to clipboard

### Named Function Components

Function components must be named, not anonymous, for React Fast Refresh to track changes:

```
export default () => {}; // ❌
export default function () {} // ❌

const ComponentA = () => {};
export default ComponentA; // ✅

export default function ComponentB() {} // ✅

```

Copy code to clipboard

### Supported Exports

React Fast Refresh can only handle component exports. While React Router manages [route exports like `action`, ` headers`, `links`, `loader`, and `meta`](https://reactrouter.com/start/framework/route-module) for you, any user-defined exports will cause full reloads:

```
// These exports are handled by the React Router Vite plugin
// to be HMR-compatible
export const meta = { title: "Home" }; // ✅
export const links = [\
  { rel: "stylesheet", href: "style.css" },\
]; // ✅

// These exports are removed by the React Router Vite plugin
// so they never affect HMR
export const headers = { "Cache-Control": "max-age=3600" }; // ✅
export const loader = async () => {}; // ✅
export const action = async () => {}; // ✅

// This is not a route module export, nor a component export,
// so it will cause a full reload for this route
export const myValue = "some value"; // ❌

export default function Route() {} // ✅

```

Copy code to clipboard

👆 Routes probably shouldn't be exporting random values like that anyway.
If you want to reuse values across routes, stick them in their own non-route module:

```
export const myValue = "some value";

```

Copy code to clipboard

### Changing Hooks

React Fast Refresh cannot track changes for a component when hooks are being added or removed from it, causing full reloads just for the next render. After the hooks have been updated, changes should result in hot updates again. For example, if you add a `useState` to your component, you may lose that component's local state for the next render.

Additionally, if you are destructuring a hook's return value, React Fast Refresh will not be able to preserve state for the component if the destructured key is removed or renamed.
For example:

```
export default function Component({ loaderData }) {
  const { pet } = useMyCustomHook();
  return (
    <div>
      <input />
      <p>My dog's name is {pet.name}!</p>
    </div>
  );
}

```

Copy code to clipboard

If you change the key `pet` to `dog`:

```
 export default function Component() {
-  const { pet } = useMyCustomHook();
+  const { dog } = useMyCustomHook();
   return (
     <div>
       <input />
-      <p>My dog's name is {pet.name}!</p>
+      <p>My dog's name is {dog.name}!</p>
     </div>
   );
 }

```

Copy code to clipboard

then React Fast Refresh will not be able to preserve state `<input />` ❌.

### Component Keys

In some cases, React cannot distinguish between existing components being changed and new components being added. [React needs `key` s](https://react.dev/learn/rendering-lists#why-does-react-need-keys) to disambiguate these cases and track changes when sibling elements are modified.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/explanation/hot-module-replacement.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/framework/custom) [dev](https://reactrouter.com/dev/start/framework/custom)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Custom Framework

On this page

- [Client Rendering](https://reactrouter.com/start/framework/custom#client-rendering)
- [1\. Create a Router](https://reactrouter.com/start/framework/custom#1-create-a-router)
- [2\. Render the Router](https://reactrouter.com/start/framework/custom#2-render-the-router)
- [3\. Lazy Loading](https://reactrouter.com/start/framework/custom#3-lazy-loading)
- [Server Rendering](https://reactrouter.com/start/framework/custom#server-rendering)
- [1\. Define Your Routes](https://reactrouter.com/start/framework/custom#1-define-your-routes)
- [2\. Create a static handler](https://reactrouter.com/start/framework/custom#2-create-a-static-handler)
- [3\. Get Routing Context and Render](https://reactrouter.com/start/framework/custom#3-get-routing-context-and-render)
- [4\. Hydrate in the browser](https://reactrouter.com/start/framework/custom#4-hydrate-in-the-browser)

- [Client Rendering](https://reactrouter.com/start/framework/custom#client-rendering)
- [1\. Create a Router](https://reactrouter.com/start/framework/custom#1-create-a-router)
- [2\. Render the Router](https://reactrouter.com/start/framework/custom#2-render-the-router)
- [3\. Lazy Loading](https://reactrouter.com/start/framework/custom#3-lazy-loading)
- [Server Rendering](https://reactrouter.com/start/framework/custom#server-rendering)
- [1\. Define Your Routes](https://reactrouter.com/start/framework/custom#1-define-your-routes)
- [2\. Create a static handler](https://reactrouter.com/start/framework/custom#2-create-a-static-handler)
- [3\. Get Routing Context and Render](https://reactrouter.com/start/framework/custom#3-get-routing-context-and-render)
- [4\. Hydrate in the browser](https://reactrouter.com/start/framework/custom#4-hydrate-in-the-browser)

# Custom Framework

Instead of using `@react-router/dev`, you can integrate React Router's framework features (like loaders, actions, fetchers, etc.) into your own bundler and server abstractions.

## Client Rendering

### 1\. Create a Router

The browser runtime API that enables route module APIs (loaders, actions, etc.) is `createBrowserRouter`.

It takes an array of route objects that support loaders, actions, error boundaries and more. The React Router Vite plugin creates one of these from `routes.ts`, but you can create one manually (or with an abstraction) and use your own bundler.

```
import { createBrowserRouter } from "react-router";

let router = createBrowserRouter([\
  {\
    path: "/",\
    Component: Root,\
    children: [\
      {\
        path: "shows/:showId",\
        Component: Show,\
        loader: ({ request, params }) =>\
          fetch(`/api/show/${params.id}.json`, {\
            signal: request.signal,\
          }),\
      },\
    ],\
  },\
]);

```

Copy code to clipboard

### 2\. Render the Router

To render the router in the browser, use `<RouterProvider>`.

```
import {
  createBrowserRouter,
  RouterProvider,
} from "react-router";
import { createRoot } from "react-dom/client";

createRoot(document.getElementById("root")).render(
  <RouterProvider router={router} />
);

```

Copy code to clipboard

### 3\. Lazy Loading

Routes can take most of their definition lazily with the `lazy` property.

```
createBrowserRouter([\
  {\
    path: "/show/:showId",\
    lazy: () => {\
      let [loader, action, Component] = await Promise.all([\
        import("./show.action.js"),\
        import("./show.loader.js"),\
        import("./show.component.js"),\
      ]);\
      return { loader, action, Component };\
    },\
  },\
]);

```

Copy code to clipboard

## Server Rendering

To server render a custom setup, there are a few server APIs available for rendering an data loading.

This guide simply gives you some ideas about how it works. For deeper understanding, please see the [Custom Framework Example Repo](https://github.com/remix-run/custom-react-router-framework-example)

### 1\. Define Your Routes

Routes are the same kinds of objects on the server as the client.

```
export default [\
  {\
    path: "/",\
    Component: Root,\
    children: [\
      {\
        path: "shows/:showId",\
        Component: Show,\
        loader: ({ params }) => {\
          return db.loadShow(params.id);\
        },\
      },\
    ],\
  },\
];

```

Copy code to clipboard

### 2\. Create a static handler

Turn your routes into a request handler with `createStaticHandler`:

```
import { createStaticHandler } from "react-router";
import routes from "./some-routes";

let { query, dataRoutes } = createStaticHandler(routes);

```

Copy code to clipboard

### 3\. Get Routing Context and Render

React Router works with web fetch [Requests](https://developer.mozilla.org/en-US/docs/Web/API/Request), so if your server doesn't, you'll need to adapt whatever objects it uses to a web fetch `Request` object.

This step assumes your server receives `Request` objects.

```
import { renderToString } from "react-dom/server";
import {
  createStaticHandler,
  createStaticRouter,
  StaticRouterProvider,
} from "react-router";

import routes from "./some-routes.js";

let { query, dataRoutes } = createStaticHandler(routes);

export async function handler(request: Request) {
  // 1. run actions/loaders to get the routing context with `query`
  let context = await query(request);

  // If `query` returns a Response, send it raw (a route probably a redirected)
  if (context instanceof Response) {
    return context;
  }

  // 2. Create a static router for SSR
  let router = createStaticRouter(dataRoutes, context);

  // 3. Render everything with StaticRouterProvider
  let html = renderToString(
    <StaticRouterProvider
      router={router}
      context={context}
    />
  );

  // Setup headers from action and loaders from deepest match
  let leaf = context.matches[context.matches.length - 1];
  let actionHeaders = context.actionHeaders[leaf.route.id];
  let loaderHeaders = context.loaderHeaders[leaf.route.id];
  let headers = new Headers(actionHeaders);
  if (loaderHeaders) {
    for (let [key, value] of loaderHeaders.entries()) {
      headers.append(key, value);
    }
  }

  headers.set("Content-Type", "text/html; charset=utf-8");

  // 4. send a response
  return new Response(`<!DOCTYPE html>${html}`, {
    status: context.statusCode,
    headers,
  });
}

```

Copy code to clipboard

### 4\. Hydrate in the browser

Hydration data is embedded onto `window.__staticRouterHydrationData`, use that to initialize your client side router and render a `<RouterProvider>`.

```
import { StrictMode } from "react";
import { hydrateRoot } from "react-dom/client";
import { RouterProvider } from "react-router/dom";
import routes from "./app/routes.js";
import { createBrowserRouter } from "react-router";

let router = createBrowserRouter(routes, {
  hydrationData: window.__staticRouterHydrationData,
});

hydrateRoot(
  document,
  <StrictMode>
    <RouterProvider router={router} />
  </StrictMode>
);

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/framework/custom.md)![React Router logo](<Base64-Image-Removed>)

[Remix](https://remix.run/)

/

[React Router](https://github.com/remix-run/react-router)

[Core](https://v5.reactrouter.com/core) [Web](https://v5.reactrouter.com/web) [Native](https://v5.reactrouter.com/native)

Announcements

[The Future of React Router](https://reacttraining.com/blog/reach-react-router-future/)

Examples

[Basic](https://v5.reactrouter.com/native/example/Basic) [URL Parameters](https://v5.reactrouter.com/native/example/url-params) [Redirects (Auth)](https://v5.reactrouter.com/native/example/auth-workflow) [Custom Link](https://v5.reactrouter.com/native/example/custom-link) [Preventing Transitions](https://v5.reactrouter.com/native/example/preventing-transitions) [No Match](https://v5.reactrouter.com/native/example/no-match) [Recursive Paths](https://v5.reactrouter.com/native/example/recursive-paths) [Sidebar](https://v5.reactrouter.com/native/example/sidebar) [Ambiguous Matches](https://v5.reactrouter.com/native/example/ambiguous-matches) [Route Config](https://v5.reactrouter.com/native/example/route-config)

Guides

[Quick Start](https://v5.reactrouter.com/native/guides/quick-start) [Deep Linking](https://v5.reactrouter.com/native/guides/deep-linking) [Animation](https://v5.reactrouter.com/native/guides/animation) [Philosophy](https://v5.reactrouter.com/native/guides/philosophy) [Deep Redux Integration](https://v5.reactrouter.com/native/guides/deep-redux-integration)

API

[Hooks](https://v5.reactrouter.com/native/api/Hooks)

[useHistory](https://v5.reactrouter.com/native/api/Hooks/usehistory) [useLocation](https://v5.reactrouter.com/native/api/Hooks/uselocation) [useParams](https://v5.reactrouter.com/native/api/Hooks/useparams) [useRouteMatch](https://v5.reactrouter.com/native/api/Hooks/useroutematch)

[<BackButton>](https://v5.reactrouter.com/native/api/BackButton)

[children](https://v5.reactrouter.com/native/api/BackButton/children)

[<DeepLinking>](https://v5.reactrouter.com/native/api/DeepLinking)

[<Link>](https://v5.reactrouter.com/native/api/Link)

[to: string](https://v5.reactrouter.com/native/api/Link/to-string) [to: object](https://v5.reactrouter.com/native/api/Link/to-object) [replace: bool](https://v5.reactrouter.com/native/api/Link/replace-bool) [component: func](https://v5.reactrouter.com/native/api/Link/component-func)

[<NativeRouter>](https://v5.reactrouter.com/native/api/NativeRouter)

[getUserConfirmation: func](https://v5.reactrouter.com/native/api/NativeRouter/getuserconfirmation-func) [keyLength: number](https://v5.reactrouter.com/native/api/NativeRouter/keylength-number) [children: node](https://v5.reactrouter.com/native/api/NativeRouter/children-node)

[<MemoryRouter>](https://v5.reactrouter.com/native/api/MemoryRouter)

[initialEntries: array](https://v5.reactrouter.com/native/api/MemoryRouter/initialentries-array) [initialIndex: number](https://v5.reactrouter.com/native/api/MemoryRouter/initialindex-number) [getUserConfirmation: func](https://v5.reactrouter.com/native/api/MemoryRouter/getuserconfirmation-func) [keyLength: number](https://v5.reactrouter.com/native/api/MemoryRouter/keylength-number) [children: node](https://v5.reactrouter.com/native/api/MemoryRouter/children-node)

[<Redirect>](https://v5.reactrouter.com/native/api/Redirect)

[to: string](https://v5.reactrouter.com/native/api/Redirect/to-string) [to: object](https://v5.reactrouter.com/native/api/Redirect/to-object) [push: bool](https://v5.reactrouter.com/native/api/Redirect/push-bool) [from: string](https://v5.reactrouter.com/native/api/Redirect/from-string) [exact: bool](https://v5.reactrouter.com/native/api/Redirect/exact-bool) [strict: bool](https://v5.reactrouter.com/native/api/Redirect/strict-bool) [sensitive: bool](https://v5.reactrouter.com/native/api/Redirect/sensitive-bool)

[<Route>](https://v5.reactrouter.com/native/api/Route)

[Route render methods](https://v5.reactrouter.com/native/api/Route/route-render-methods) [Route props](https://v5.reactrouter.com/native/api/Route/route-props) [component](https://v5.reactrouter.com/native/api/Route/component) [render: func](https://v5.reactrouter.com/native/api/Route/render-func) [children: func](https://v5.reactrouter.com/native/api/Route/children-func) [path: string \| string\[\]](https://v5.reactrouter.com/native/api/Route/path-string-string) [exact: bool](https://v5.reactrouter.com/native/api/Route/exact-bool) [strict: bool](https://v5.reactrouter.com/native/api/Route/strict-bool) [location: object](https://v5.reactrouter.com/native/api/Route/location-object) [sensitive: bool](https://v5.reactrouter.com/native/api/Route/sensitive-bool)

[<Router>](https://v5.reactrouter.com/native/api/Router)

[history: object](https://v5.reactrouter.com/native/api/Router/history-object) [children: node](https://v5.reactrouter.com/native/api/Router/children-node)

[<StaticRouter>](https://v5.reactrouter.com/native/api/StaticRouter)

[basename: string](https://v5.reactrouter.com/native/api/StaticRouter/basename-string) [location: string](https://v5.reactrouter.com/native/api/StaticRouter/location-string) [location: object](https://v5.reactrouter.com/native/api/StaticRouter/location-object) [context: object](https://v5.reactrouter.com/native/api/StaticRouter/context-object) [children: node](https://v5.reactrouter.com/native/api/StaticRouter/children-node)

[<Switch>](https://v5.reactrouter.com/native/api/Switch)

[location: object](https://v5.reactrouter.com/native/api/Switch/location-object) [children: node](https://v5.reactrouter.com/native/api/Switch/children-node)

[history](https://v5.reactrouter.com/native/api/history)

[history is mutable](https://v5.reactrouter.com/native/api/history/history-is-mutable)

[location](https://v5.reactrouter.com/native/api/location)

[match](https://v5.reactrouter.com/native/api/match)

[null matches](https://v5.reactrouter.com/native/api/match/null-matches)

[matchPath](https://v5.reactrouter.com/native/api/matchPath)

[pathname](https://v5.reactrouter.com/native/api/matchPath/pathname) [props](https://v5.reactrouter.com/native/api/matchPath/props) [returns](https://v5.reactrouter.com/native/api/matchPath/returns)

[withRouter](https://v5.reactrouter.com/native/api/withRouter)

[Component.WrappedComponent](https://v5.reactrouter.com/native/api/withRouter/componentwrappedcomponent) [wrappedComponentRef: func](https://v5.reactrouter.com/native/api/withRouter/wrappedcomponentref-func)

# [Quick Start](https://v5.reactrouter.com/native/guides/quick-start)

If this is your first time building a React Native app, we recommend you check out the official [“Getting Started”](https://facebook.github.io/react-native/docs/getting-started.html) guide.

## [Installation](https://v5.reactrouter.com/native/guides/quick-start/installation)

React Router Native is published to [npm](https://npm.im/react-router-native). You can install it with either `npm` or [`yarn`](https://yarnpkg.com/).

```sh
npm install react-router-native
# or
yarn add react-router-native

```

Once you’ve initialized a new React Native project, you can copy/paste any of the examples into your `index.ios.js` or `index.android.js` files to play around with them.

Here’s the basic example:

```jsx
import React from "react";
import { StyleSheet, Text, View, AppRegistry } from "react-native";

import { NativeRouter, Route, Link } from "react-router-native";

const Home = () => <Text style={styles.header}>Home</Text>;

const About = () => <Text style={styles.header}>About</Text>;

const Topic = ({ match }) => (
  <Text style={styles.topic}>{match.params.topicId}</Text>
);

const Topics = ({ match }) => (
  <View>
    <Text style={styles.header}>Topics</Text>
    <View>
      <Link
        to={`${match.url}/rendering`}
        style={styles.subNavItem}
        underlayColor="#f0f4f7"
      >
        <Text>Rendering with React</Text>
      </Link>
      <Link
        to={`${match.url}/components`}
        style={styles.subNavItem}
        underlayColor="#f0f4f7"
      >
        <Text>Components</Text>
      </Link>
      <Link
        to={`${match.url}/props-v-state`}
        style={styles.subNavItem}
        underlayColor="#f0f4f7"
      >
        <Text>Props v. State</Text>
      </Link>
    </View>

    <Route path={`${match.path}/:topicId`} component={Topic} />
    <Route
      exact
      path={match.path}
      render={() => (
        <Text style={styles.topic}>Please select a topic.</Text>
      )}
    />
  </View>
);

const App = () => (
  <NativeRouter>
    <View style={styles.container}>
      <View style={styles.nav}>
        <Link to="/" underlayColor="#f0f4f7" style={styles.navItem}>
          <Text>Home</Text>
        </Link>
        <Link
          to="/about"
          underlayColor="#f0f4f7"
          style={styles.navItem}
        >
          <Text>About</Text>
        </Link>
        <Link
          to="/topics"
          underlayColor="#f0f4f7"
          style={styles.navItem}
        >
          <Text>Topics</Text>
        </Link>
      </View>

      <Route exact path="/" component={Home} />
      <Route path="/about" component={About} />
      <Route path="/topics" component={Topics} />
    </View>
  </NativeRouter>
);

const styles = StyleSheet.create({
  container: {
    marginTop: 25,
    padding: 10
  },
  header: {
    fontSize: 20
  },
  nav: {
    flexDirection: "row",
    justifyContent: "space-around"
  },
  navItem: {
    flex: 1,
    alignItems: "center",
    padding: 10
  },
  subNavItem: {
    padding: 5
  },
  topic: {
    textAlign: "center",
    fontSize: 15
  }
});

AppRegistry.registerComponent("MyApp", () => App);

```![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/explanation/sessions-and-cookies) [dev](https://reactrouter.com/dev/explanation/sessions-and-cookies)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Sessions and Cookies

On this page

- [Sessions](https://reactrouter.com/explanation/sessions-and-cookies#sessions)
- [Using Sessions](https://reactrouter.com/explanation/sessions-and-cookies#using-sessions)
- [Login form example](https://reactrouter.com/explanation/sessions-and-cookies#login-form-example)
- [Session Gotchas](https://reactrouter.com/explanation/sessions-and-cookies#session-gotchas)
- [Creating custom session storage](https://reactrouter.com/explanation/sessions-and-cookies#creating-custom-session-storage)
- [Additional session utils](https://reactrouter.com/explanation/sessions-and-cookies#additional-session-utils)
- [Cookies](https://reactrouter.com/explanation/sessions-and-cookies#cookies)
- [Using cookies](https://reactrouter.com/explanation/sessions-and-cookies#using-cookies)
- [User preferences example](https://reactrouter.com/explanation/sessions-and-cookies#user-preferences-example)
- [Cookie attributes](https://reactrouter.com/explanation/sessions-and-cookies#cookie-attributes)
- [Signing cookies](https://reactrouter.com/explanation/sessions-and-cookies#signing-cookies)
- [Additional cookie utils](https://reactrouter.com/explanation/sessions-and-cookies#additional-cookie-utils)

- [Sessions](https://reactrouter.com/explanation/sessions-and-cookies#sessions)
- [Using Sessions](https://reactrouter.com/explanation/sessions-and-cookies#using-sessions)
- [Login form example](https://reactrouter.com/explanation/sessions-and-cookies#login-form-example)
- [Session Gotchas](https://reactrouter.com/explanation/sessions-and-cookies#session-gotchas)
- [Creating custom session storage](https://reactrouter.com/explanation/sessions-and-cookies#creating-custom-session-storage)
- [Additional session utils](https://reactrouter.com/explanation/sessions-and-cookies#additional-session-utils)
- [Cookies](https://reactrouter.com/explanation/sessions-and-cookies#cookies)
- [Using cookies](https://reactrouter.com/explanation/sessions-and-cookies#using-cookies)
- [User preferences example](https://reactrouter.com/explanation/sessions-and-cookies#user-preferences-example)
- [Cookie attributes](https://reactrouter.com/explanation/sessions-and-cookies#cookie-attributes)
- [Signing cookies](https://reactrouter.com/explanation/sessions-and-cookies#signing-cookies)
- [Additional cookie utils](https://reactrouter.com/explanation/sessions-and-cookies#additional-cookie-utils)

# Sessions and Cookies

## Sessions

Sessions are an important part of websites that allow the server to identify requests coming from the same person, especially when it comes to server-side form validation or when JavaScript is not on the page. Sessions are a fundamental building block of many sites that let users "log in", including social, e-commerce, business, and educational websites.

When using React Router as your framework, sessions are managed on a per-route basis (rather than something like express middleware) in your `loader` and `action` methods using a "session storage" object (that implements the [`SessionStorage`](https://api.reactrouter.com/v7/interfaces/react_router.SessionStorage) interface). Session storage understands how to parse and generate cookies, and how to store session data in a database or filesystem.

### Using Sessions

This is an example of a cookie session storage:

```
import { createCookieSessionStorage } from "react-router";

type SessionData = {
  userId: string;
};

type SessionFlashData = {
  error: string;
};

const { getSession, commitSession, destroySession } =
  createCookieSessionStorage<SessionData, SessionFlashData>(
    {
      // a Cookie from `createCookie` or the CookieOptions to create one
      cookie: {
        name: "__session",

        // all of these are optional
        domain: "reactrouter.com",
        // Expires can also be set (although maxAge overrides it when used in combination).
        // Note that this method is NOT recommended as `new Date` creates only one date on each server deployment, not a dynamic date in the future!
        //
        // expires: new Date(Date.now() + 60_000),
        httpOnly: true,
        maxAge: 60,
        path: "/",
        sameSite: "lax",
        secrets: ["s3cret1"],
        secure: true,
      },
    }
  );

export { getSession, commitSession, destroySession };

```

Copy code to clipboard

We recommend setting up your session storage object in `app/sessions.server.ts` so all routes that need to access session data can import from the same spot.

The input/output to a session storage object are HTTP cookies. `getSession()` retrieves the current session from the incoming request's `Cookie` header, and `commitSession()`/ `destroySession()` provide the `Set-Cookie` header for the outgoing response.

You'll use methods to get access to sessions in your `loader` and `action` functions.

After retrieving a session with `getSession`, the returned session object has a handful of methods and properties:

```
export async function action({
  request,
}: ActionFunctionArgs) {
  const session = await getSession(
    request.headers.get("Cookie")
  );
  session.get("foo");
  session.has("bar");
  // etc.
}

```

Copy code to clipboard

See the [Session API](https://api.reactrouter.com/v7/interfaces/react_router.Session) for more all the methods available on the session object.

### Login form example

A login form might look something like this:

```
import { data, redirect } from "react-router";
import type { Route } from "./+types/login";

import {
  getSession,
  commitSession,
} from "../sessions.server";

export async function loader({
  request,
}: Route.LoaderArgs) {
  const session = await getSession(
    request.headers.get("Cookie")
  );

  if (session.has("userId")) {
    // Redirect to the home page if they are already signed in.
    return redirect("/");
  }

  return data(
    { error: session.get("error") },
    {
      headers: {
        "Set-Cookie": await commitSession(session),
      },
    }
  );
}

export async function action({
  request,
}: Route.ActionArgs) {
  const session = await getSession(
    request.headers.get("Cookie")
  );
  const form = await request.formData();
  const username = form.get("username");
  const password = form.get("password");

  const userId = await validateCredentials(
    username,
    password
  );

  if (userId == null) {
    session.flash("error", "Invalid username/password");

    // Redirect back to the login page with errors.
    return redirect("/login", {
      headers: {
        "Set-Cookie": await commitSession(session),
      },
    });
  }

  session.set("userId", userId);

  // Login succeeded, send them to the home page.
  return redirect("/", {
    headers: {
      "Set-Cookie": await commitSession(session),
    },
  });
}

export default function Login({
  loaderData,
}: Route.ComponentProps) {
  const { error } = loaderData;

  return (
    <div>
      {error ? <div className="error">{error}</div> : null}
      <form method="POST">
        <div>
          <p>Please sign in</p>
        </div>
        <label>
          Username: <input type="text" name="username" />
        </label>
        <label>
          Password:{" "}
          <input type="password" name="password" />
        </label>
      </form>
    </div>
  );
}

```

Copy code to clipboard

And then a logout form might look something like this:

```
import {
  getSession,
  destroySession,
} from "../sessions.server";
import type { Route } from "./+types/logout";

export async function action({
  request,
}: Route.ActionArgs) {
  const session = await getSession(
    request.headers.get("Cookie")
  );
  return redirect("/login", {
    headers: {
      "Set-Cookie": await destroySession(session),
    },
  });
}

export default function LogoutRoute() {
  return (
    <>
      <p>Are you sure you want to log out?</p>
      <Form method="post">
        <button>Logout</button>
      </Form>
      <Link to="/">Never mind</Link>
    </>
  );
}

```

Copy code to clipboard

It's important that you logout (or perform any mutation for that matter) in an `action` and not a `loader`. Otherwise you open your users to [Cross-Site Request Forgery](https://developer.mozilla.org/en-US/docs/Glossary/CSRF) attacks.

### Session Gotchas

Because of nested routes, multiple loaders can be called to construct a single page. When using `session.flash()` or `session.unset()`, you need to be sure no other loaders in the request are going to want to read that, otherwise you'll get race conditions. Typically if you're using flash, you'll want to have a single loader read it, if another loader wants a flash message, use a different key for that loader.

### Creating custom session storage

React Router makes it easy to store sessions in your own database if needed. The [`createSessionStorage()`](https://api.reactrouter.com/v7/functions/react_router.createSessionStorage) API requires a `cookie` (for options for creating a cookie, see [cookies](https://reactrouter.com/explanation/sessions-and-cookies#cookies)) and a set of create, read, update, and delete (CRUD) methods for managing the session data. The cookie is used to persist the session ID.

- `createData` will be called from `commitSession` on the initial session creation when no session ID exists in the cookie
- `readData` will be called from `getSession` when a session ID exists in the cookie
- `updateData` will be called from `commitSession` when a session ID already exists in the cookie
- `deleteData` is called from `destroySession`

The following example shows how you could do this using a generic database client:

```
import { createSessionStorage } from "react-router";

function createDatabaseSessionStorage({
  cookie,
  host,
  port,
}) {
  // Configure your database client...
  const db = createDatabaseClient(host, port);

  return createSessionStorage({
    cookie,
    async createData(data, expires) {
      // `expires` is a Date after which the data should be considered
      // invalid. You could use it to invalidate the data somehow or
      // automatically purge this record from your database.
      const id = await db.insert(data);
      return id;
    },
    async readData(id) {
      return (await db.select(id)) || null;
    },
    async updateData(id, data, expires) {
      await db.update(id, data);
    },
    async deleteData(id) {
      await db.delete(id);
    },
  });
}

```

Copy code to clipboard

And then you can use it like this:

```
const { getSession, commitSession, destroySession } =
  createDatabaseSessionStorage({
    host: "localhost",
    port: 1234,
    cookie: {
      name: "__session",
      sameSite: "lax",
    },
  });

```

Copy code to clipboard

The `expires` argument to `createData` and `updateData` is the same `Date` at which the cookie itself expires and is no longer valid. You can use this information to automatically purge the session record from your database to save on space, or to ensure that you do not otherwise return any data for old, expired cookies.

### Additional session utils

There are also several other session utilities available if you need them:

- [`isSession`](https://api.reactrouter.com/v7/functions/react_router.isSession)
- [`createMemorySessionStorage`](https://api.reactrouter.com/v7/functions/react_router.createMemorySessionStorage)
- [`createSession`](https://api.reactrouter.com/v7/functions/react_router.createSession) (custom storage)
- [`createFileSessionStorage`](https://api.reactrouter.com/v7/functions/_react_router_node.createFileSessionStorage) (node)
- [`createWorkersKVSessionStorage`](https://api.reactrouter.com/v7/functions/_react_router_cloudflare.createWorkersKVSessionStorage) (Cloudflare Workers)
- [`createArcTableSessionStorage`](https://api.reactrouter.com/v7/functions/_react_router_architect.createArcTableSessionStorage) (architect, Amazon DynamoDB)

## Cookies

A [cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies) is a small piece of information that your server sends someone in a HTTP response that their browser will send back on subsequent requests. This technique is a fundamental building block of many interactive websites that adds state so you can build authentication (see [sessions](https://reactrouter.com/explanation/sessions-and-cookies#sessions)), shopping carts, user preferences, and many other features that require remembering who is "logged in".

React Router's [`Cookie` interface](https://api.reactrouter.com/v7/interfaces/react_router.Cookie) provides a logical, reusable container for cookie metadata.

### Using cookies

While you may create these cookies manually, it is more common to use a [session storage](https://reactrouter.com/explanation/sessions-and-cookies#sessions).

In React Router, you will typically work with cookies in your `loader` and/or `action` functions, since those are the places where you need to read and write data.

Let's say you have a banner on your e-commerce site that prompts users to check out the items you currently have on sale. The banner spans the top of your homepage, and includes a button on the side that allows the user to dismiss the banner so they don't see it for at least another week.

First, create a cookie:

```
import { createCookie } from "react-router";

export const userPrefs = createCookie("user-prefs", {
  maxAge: 604_800, // one week
});

```

Copy code to clipboard

Then, you can `import` the cookie and use it in your `loader` and/or `action`. The `loader` in this case just checks the value of the user preference so you can use it in your component for deciding whether to render the banner. When the button is clicked, the `<form>` calls the `action` on the server and reloads the page without the banner.

### User preferences example

```
import { Link, Form, redirect } from "react-router";
import type { Route } from "./+types/home";

import { userPrefs } from "../cookies.server";

export async function loader({
  request,
}: Route.LoaderArgs) {
  const cookieHeader = request.headers.get("Cookie");
  const cookie =
    (await userPrefs.parse(cookieHeader)) || {};
  return { showBanner: cookie.showBanner };
}

export async function action({
  request,
}: Route.ActionArgs) {
  const cookieHeader = request.headers.get("Cookie");
  const cookie =
    (await userPrefs.parse(cookieHeader)) || {};
  const bodyParams = await request.formData();

  if (bodyParams.get("bannerVisibility") === "hidden") {
    cookie.showBanner = false;
  }

  return redirect("/", {
    headers: {
      "Set-Cookie": await userPrefs.serialize(cookie),
    },
  });
}

export default function Home({
  loaderData,
}: Route.ComponentProps) {
  return (
    <div>
      {loaderData.showBanner ? (
        <div>
          <Link to="/sale">Don't miss our sale!</Link>
          <Form method="post">
            <input
              type="hidden"
              name="bannerVisibility"
              value="hidden"
            />
            <button type="submit">Hide</button>
          </Form>
        </div>
      ) : null}
      <h1>Welcome!</h1>
    </div>
  );
}

```

Copy code to clipboard

### Cookie attributes

Cookies have [several attributes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#attributes) that control when they expire, how they are accessed, and where they are sent. Any of these attributes may be specified either in `createCookie(name, options)`, or during `serialize()` when the `Set-Cookie` header is generated.

```
const cookie = createCookie("user-prefs", {
  // These are defaults for this cookie.
  path: "/",
  sameSite: "lax",
  httpOnly: true,
  secure: true,
  expires: new Date(Date.now() + 60_000),
  maxAge: 60,
});

// You can either use the defaults:
cookie.serialize(userPrefs);

// Or override individual ones as needed:
cookie.serialize(userPrefs, { sameSite: "strict" });

```

Copy code to clipboard

Please read [more info about these attributes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#attributes) to get a better understanding of what they do.

### Signing cookies

It is possible to sign a cookie to automatically verify its contents when it is received. Since it's relatively easy to spoof HTTP headers, this is a good idea for any information that you do not want someone to be able to fake, like authentication information (see [sessions](https://reactrouter.com/explanation/sessions-and-cookies#sessions)).

To sign a cookie, provide one or more `secrets` when you first create the cookie:

```
const cookie = createCookie("user-prefs", {
  secrets: ["s3cret1"],
});

```

Copy code to clipboard

Cookies that have one or more `secrets` will be stored and verified in a way that ensures the cookie's integrity.

Secrets may be rotated by adding new secrets to the front of the `secrets` array. Cookies that have been signed with old secrets will still be decoded successfully in `cookie.parse()`, and the newest secret (the first one in the array) will always be used to sign outgoing cookies created in `cookie.serialize()`.

```
export const cookie = createCookie("user-prefs", {
  secrets: ["n3wsecr3t", "olds3cret"],
});

```

Copy code to clipboard

```
import { data } from "react-router";
import { cookie } from "../cookies.server";
import type { Route } from "./+types/my-route";

export async function loader({
  request,
}: Route.LoaderArgs) {
  const oldCookie = request.headers.get("Cookie");
  // oldCookie may have been signed with "olds3cret", but still parses ok
  const value = await cookie.parse(oldCookie);

  return data("...", {
    headers: {
      // Set-Cookie is signed with "n3wsecr3t"
      "Set-Cookie": await cookie.serialize(value),
    },
  });
}

```

Copy code to clipboard

### Additional cookie utils

There are also several other cookie utilities available if you need them:

- [`isCookie`](https://api.reactrouter.com/v7/functions/react_router.isCookie)
- [`createCookie`](https://api.reactrouter.com/v7/functions/react_router.createCookie)

To learn more about each attribute, please see the [MDN Set-Cookie docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#attributes).

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/explanation/sessions-and-cookies.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.29.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Upgrading from v5

On this page

- [Backwards Compatibility Package](https://reactrouter.com/6.29.0/upgrading/v5#backwards-compatibility-package)
- [Introduction](https://reactrouter.com/6.29.0/upgrading/v5#introduction)
- [Upgrade to React v16.8](https://reactrouter.com/6.29.0/upgrading/v5#upgrade-to-react-v168)
- [Upgrade to React Router v5.1](https://reactrouter.com/6.29.0/upgrading/v5#upgrade-to-react-router-v51)
- [Remove `<Redirect>` s inside `<Switch>`](https://reactrouter.com/6.29.0/upgrading/v5#remove-redirects-inside-switch)
- [Refactor custom `<Route>` s](https://reactrouter.com/6.29.0/upgrading/v5#refactor-custom-routes)
- [Ship it!](https://reactrouter.com/6.29.0/upgrading/v5#ship-it)
- [Upgrade to React Router v6](https://reactrouter.com/6.29.0/upgrading/v5#upgrade-to-react-router-v6)
- [Upgrade all `<Switch>` elements to `<Routes>`](https://reactrouter.com/6.29.0/upgrading/v5#upgrade-all-switch-elements-to-routes)
- [Relative Routes and Links](https://reactrouter.com/6.29.0/upgrading/v5#relative-routes-and-links)
- [Advantages of `<Route element>`](https://reactrouter.com/6.29.0/upgrading/v5#advantages-of-route-element)
- [Note on `<Route path>` patterns](https://reactrouter.com/6.29.0/upgrading/v5#note-on-route-path-patterns)
- [Note on `<Link to>` values](https://reactrouter.com/6.29.0/upgrading/v5#note-on-link-to-values)
- [Pass `<Link>` state as separate prop](https://reactrouter.com/6.29.0/upgrading/v5#pass-link-state-as-separate-prop)
- [Use `useRoutes` instead of `react-router-config`](https://reactrouter.com/6.29.0/upgrading/v5#use-useroutes-instead-of-react-router-config)
- [Use `useNavigate` instead of `useHistory`](https://reactrouter.com/6.29.0/upgrading/v5#use-usenavigate-instead-of-usehistory)
- [Remove `<Link>` `component` prop](https://reactrouter.com/6.29.0/upgrading/v5#remove-link-component-prop)
- [Rename `<NavLink exact>` to `<NavLink end>`](https://reactrouter.com/6.29.0/upgrading/v5#rename-navlink-exact-to-navlink-end)
- [Remove `activeClassName` and `activeStyle` props from `<NavLink />`](https://reactrouter.com/6.29.0/upgrading/v5#remove-activeclassname-and-activestyle-props-from-navlink-)
- [Get `StaticRouter` from `react-router-dom/server`](https://reactrouter.com/6.29.0/upgrading/v5#get-staticrouter-from-react-router-domserver)
- [Replace `useRouteMatch` with `useMatch`](https://reactrouter.com/6.29.0/upgrading/v5#replace-useroutematch-with-usematch)
- [Change the order of arguments passed to `matchPath`. Change pathPattern options.](https://reactrouter.com/6.29.0/upgrading/v5#change-the-order-of-arguments-passed-to-matchpath-change-pathpattern-options)
- [`<Prompt>` is not currently supported](https://reactrouter.com/6.29.0/upgrading/v5#prompt-is-not-currently-supported)
- [What did we miss?](https://reactrouter.com/6.29.0/upgrading/v5#what-did-we-miss)

- [Backwards Compatibility Package](https://reactrouter.com/6.29.0/upgrading/v5#backwards-compatibility-package)
- [Introduction](https://reactrouter.com/6.29.0/upgrading/v5#introduction)
- [Upgrade to React v16.8](https://reactrouter.com/6.29.0/upgrading/v5#upgrade-to-react-v168)
- [Upgrade to React Router v5.1](https://reactrouter.com/6.29.0/upgrading/v5#upgrade-to-react-router-v51)
- [Remove `<Redirect>` s inside `<Switch>`](https://reactrouter.com/6.29.0/upgrading/v5#remove-redirects-inside-switch)
- [Refactor custom `<Route>` s](https://reactrouter.com/6.29.0/upgrading/v5#refactor-custom-routes)
- [Ship it!](https://reactrouter.com/6.29.0/upgrading/v5#ship-it)
- [Upgrade to React Router v6](https://reactrouter.com/6.29.0/upgrading/v5#upgrade-to-react-router-v6)
- [Upgrade all `<Switch>` elements to `<Routes>`](https://reactrouter.com/6.29.0/upgrading/v5#upgrade-all-switch-elements-to-routes)
- [Relative Routes and Links](https://reactrouter.com/6.29.0/upgrading/v5#relative-routes-and-links)
- [Advantages of `<Route element>`](https://reactrouter.com/6.29.0/upgrading/v5#advantages-of-route-element)
- [Note on `<Route path>` patterns](https://reactrouter.com/6.29.0/upgrading/v5#note-on-route-path-patterns)
- [Note on `<Link to>` values](https://reactrouter.com/6.29.0/upgrading/v5#note-on-link-to-values)
- [Pass `<Link>` state as separate prop](https://reactrouter.com/6.29.0/upgrading/v5#pass-link-state-as-separate-prop)
- [Use `useRoutes` instead of `react-router-config`](https://reactrouter.com/6.29.0/upgrading/v5#use-useroutes-instead-of-react-router-config)
- [Use `useNavigate` instead of `useHistory`](https://reactrouter.com/6.29.0/upgrading/v5#use-usenavigate-instead-of-usehistory)
- [Remove `<Link>` `component` prop](https://reactrouter.com/6.29.0/upgrading/v5#remove-link-component-prop)
- [Rename `<NavLink exact>` to `<NavLink end>`](https://reactrouter.com/6.29.0/upgrading/v5#rename-navlink-exact-to-navlink-end)
- [Remove `activeClassName` and `activeStyle` props from `<NavLink />`](https://reactrouter.com/6.29.0/upgrading/v5#remove-activeclassname-and-activestyle-props-from-navlink-)
- [Get `StaticRouter` from `react-router-dom/server`](https://reactrouter.com/6.29.0/upgrading/v5#get-staticrouter-from-react-router-domserver)
- [Replace `useRouteMatch` with `useMatch`](https://reactrouter.com/6.29.0/upgrading/v5#replace-useroutematch-with-usematch)
- [Change the order of arguments passed to `matchPath`. Change pathPattern options.](https://reactrouter.com/6.29.0/upgrading/v5#change-the-order-of-arguments-passed-to-matchpath-change-pathpattern-options)
- [`<Prompt>` is not currently supported](https://reactrouter.com/6.29.0/upgrading/v5#prompt-is-not-currently-supported)
- [What did we miss?](https://reactrouter.com/6.29.0/upgrading/v5#what-did-we-miss)

# Upgrading from v5

## Backwards Compatibility Package

Instead of upgrading and updating all of your code at once (which is incredibly difficult and prone to bugs), the backwards compatibility package enables you to upgrade one component, one hook, and one route at a time by running both v5 and v6 in parallel. Any code you haven't touched is still running the very same code it was before. Once all components are exclusively using the v6 APIs, your app no longer needs the compatibility package and is running on v6. The official guide can be found [here](https://github.com/remix-run/react-router/discussions/8753).

We recommend using the backwards compatibility package to upgrade apps that have more than a few routes. Otherwise, we hope this guide will help you do the upgrade all at once!

## Introduction

React Router version 6 introduces several powerful new features, as well as improved compatibility with the latest versions of React. It also introduces a few breaking changes from version 5. This document is a comprehensive guide on how to upgrade your v4/5 app to v6 while hopefully being able to ship as often as possible as you go.

The examples in this guide will show code samples of how you might have built something in a v5 app, followed by how you would accomplish the same thing in v6. There will also be an explanation of why we made this change and how it's going to improve both your code and the overall user experience of people who are using your app.

In general, the process looks like this:

1. [Upgrade to React v16.8 or greater](https://reactrouter.com/6.29.0/upgrading/v5#upgrade-to-react-v168)
2. [Upgrade to React Router v5.1](https://reactrouter.com/6.29.0/upgrading/v5#upgrade-to-react-router-v51)
   - [Remove `<Redirect>` s inside `<Switch>`](https://reactrouter.com/6.29.0/upgrading/v5#remove-redirects-inside-switch)
   - [Refactor custom `<Route>` s](https://reactrouter.com/6.29.0/upgrading/v5#refactor-custom-routes)
3. [Upgrade to React Router v6](https://reactrouter.com/6.29.0/upgrading/v5#upgrade-to-react-router-v6)

The following is a detailed breakdown of each step that should help you migrate quickly and with confidence to v6.

## Upgrade to React v16.8

React Router v6 makes heavy use of [React hooks](https://reactjs.org/docs/hooks-intro.html), so you'll need to be on React 16.8 or greater before attempting the upgrade to React Router v6. The good news is that React Router v5 is compatible with React >= 15, so if you're on v5 (or v4) you should be able to upgrade React without touching any of your router code.

Once you've upgraded to React 16.8, **you should deploy your app**. Then you can come back later and pick up where you left off.

## Upgrade to React Router v5.1

It will be easier to make the switch to React Router v6 if you upgrade to v5.1 first. In v5.1, we released an enhancement to the handling of `<Route children>` elements that will help smooth the transition to v6. Instead of using `<Route component>` and `<Route render>` props, just use regular element `<Route children>` everywhere and use hooks to access the router's internal state.

```
// v4 and v5 before 5.1
function User({ id }) {
  // ...
}

function App() {
  return (
    <Switch>
      <Route exact path="/" component={Home} />
      <Route path="/about" component={About} />
      <Route
        path="/users/:id"
        render={({ match }) => (
          <User id={match.params.id} />
        )}
      />
    </Switch>
  );
}

// v5.1 preferred style
function User() {
  let { id } = useParams();
  // ...
}

function App() {
  return (
    <Switch>
      <Route exact path="/">
        <Home />
      </Route>
      <Route path="/about">
        <About />
      </Route>
      {/* Can also use a named `children` prop */}
      <Route path="/users/:id" children={<User />} />
    </Switch>
  );
}

```

Copy code to clipboard

You can read more about v5.1's hooks API and the rationale behind the move to regular elements [on our blog](https://reacttraining.com/blog/react-router-v5-1/).

In general, React Router v5.1 (and v6) favors elements over components (or "element types"). There are a few reasons for this, but we'll discuss more further down when we discuss v6's `<Route>` API.

When you use regular React elements you get to pass the props explicitly. This helps with code readability and maintenance over time. If you were using `<Route render>` to get a hold of the params, you can just
`useParams` inside your route component instead.

Along with the upgrade to v5.1, you should replace any usage of `withRouter` with hooks. You should also get rid of any "floating" `<Route>` elements that are not inside a `<Switch>`. Again, [the blog post about v5.1](https://reacttraining.com/blog/react-router-v5-1/) explains how to do this in greater detail.

In summary, to upgrade from v4/5 to v5.1, you should:

- Use `<Route children>` instead of `<Route render>` and/or `<Route component>`
props
- Use [our hooks API](https://reacttraining.com/react-router/web/api/Hooks) to
access router state like the current location and params
- Replace all uses of `withRouter` with hooks
- Replace any `<Route>` s that are not inside a `<Switch>` with `useRouteMatch`,
or wrap them in a `<Switch>`

### Remove `<Redirect>` s inside `<Switch>`

Remove any `<Redirect>` elements that are directly inside a `<Switch>`.

If you want to redirect on the initial render, you should move the redirect logic to your server (we [wrote more about this here](https://gist.github.com/mjackson/b5748add2795ce7448a366ae8f8ae3bb)).

If you want to redirect client-side, move your `<Redirect>` into a `<Route render>` prop.

```
// Change this:
<Switch>
  <Redirect from="about" to="about-us" />
</Switch>

// to this:
<Switch>
  <Route path="about" render={() => <Redirect to="about-us" />} />
</Switch>

```

Copy code to clipboard

Normal `<Redirect>` elements that are not inside a `<Switch>` are ok to remain. They will become `<Navigate>` elements in v6.

### Refactor custom `<Route>` s

Replace any elements inside a `<Switch>` that are not plain `<Route>` elements with a regular `<Route>`. This includes any `<PrivateRoute>`-style custom components.

You can [read more about the rationale behind this here](https://gist.github.com/mjackson/d54b40a094277b7afdd6b81f51a0393f), including some tips about how to use a `<Route render>` prop in v5 to achieve the same effect.

### Ship it!

Again, **once your app is upgraded to v5.1 you should test and deploy it**, and pick this guide back up when you're ready to continue.

## Upgrade to React Router v6

**Heads up:** This is the biggest step in the migration and will probably take the most time and effort.

For this step, you'll need to install React Router v6. If you're managing dependencies via npm:

```bash
$ npm install react-router-dom
# or, for a React Native app
$ npm install react-router-native

```

You'll also want to remove the `history` dependency from your package.json. The `history` library is a direct dependency of v6 (not a peer dep), so you won't ever import or use it directly. Instead, you'll use the `useNavigate()` hook for all navigation (see below).

### Upgrade all `<Switch>` elements to `<Routes>`

React Router v6 introduces a `Routes` component that is kind of like `Switch`, but a lot more powerful. The main advantages of `Routes` over `Switch` are:

- All `<Route>` s and `<Link>` s inside a `<Routes>` are relative. This leads to
leaner and more predictable code in `<Route path>` and `<Link to>`
- Routes are chosen based on the best match instead of being traversed in order.
This avoids bugs due to unreachable routes because they were defined later
in your `<Switch>`
- Routes may be nested in one place instead of being spread out in different
components. In small to medium-sized apps, this lets you easily see all your
routes at once. In large apps, you can still nest routes in bundles that you
load dynamically via `React.lazy`

In order to use v6, you'll need to convert all your `<Switch>` elements to `<Routes>`. If you already made the upgrade to v5.1, you're halfway there.

First, let's talk about relative routes and links in v6.

### Relative Routes and Links

In v5, you had to be very explicit about how you wanted to nest your routes and links. In both cases, if you wanted nested routes and links you had to build the `<Route path>` and `<Link to>` props from the parent route's `match.url` and `match.path` properties. Additionally, if you wanted to nest routes, you had to put them in the child route's component.

```
// This is a React Router v5 app
import {
  BrowserRouter,
  Switch,
  Route,
  Link,
  useRouteMatch,
} from "react-router-dom";

function App() {
  return (
    <BrowserRouter>
      <Switch>
        <Route exact path="/">
          <Home />
        </Route>
        <Route path="/users">
          <Users />
        </Route>
      </Switch>
    </BrowserRouter>
  );
}

function Users() {
  // In v5, nested routes are rendered by the child component, so
  // you have <Switch> elements all over your app for nested UI.
  // You build nested routes and links using match.url and match.path.
  let match = useRouteMatch();

  return (
    <div>
      <nav>
        <Link to={`${match.url}/me`}>My Profile</Link>
      </nav>

      <Switch>
        <Route path={`${match.path}/me`}>
          <OwnUserProfile />
        </Route>
        <Route path={`${match.path}/:id`}>
          <UserProfile />
        </Route>
      </Switch>
    </div>
  );
}

```

Copy code to clipboard

This is the same app in v6:

```
// This is a React Router v6 app
import {
  BrowserRouter,
  Routes,
  Route,
  Link,
} from "react-router-dom";

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="users/*" element={<Users />} />
      </Routes>
    </BrowserRouter>
  );
}

function Users() {
  return (
    <div>
      <nav>
        <Link to="me">My Profile</Link>
      </nav>

      <Routes>
        <Route path=":id" element={<UserProfile />} />
        <Route path="me" element={<OwnUserProfile />} />
      </Routes>
    </div>
  );
}

```

Copy code to clipboard

A few important things to notice about v6 in this example:

- `<Route path>` and `<Link to>` are relative. This means that they
automatically build on the parent route's path and URL so you don't have to
manually interpolate `match.url` or `match.path`
- `<Route exact>` is gone. Instead, routes with descendant routes (defined in
other components) use a trailing `*` in their path to indicate they match
deeply
- You may put your routes in whatever order you wish and the router will
automatically detect the best route for the current URL. This prevents bugs
due to manually putting routes in the wrong order in a `<Switch>`

You may have also noticed that all `<Route children>` from the v5 app changed to `<Route element>` in v6. Assuming you followed the upgrade steps to v5.1, this should be as simple as moving your route element from the child position to a named `element` prop.

### Advantages of `<Route element>`

In the section about upgrading to v5.1, we promised that we'd discuss the advantages of using regular elements instead of components (or element types) for rendering. Let's take a quick break from upgrading and talk about that now.

For starters, we see React itself taking the lead here with the `<Suspense fallback={<Spinner />}>` API. The `fallback` prop takes a React element, not a component. This lets you easily pass whatever props you want to your `<Spinner>` from the component that renders it.

Using elements instead of components means we don't have to provide a `passProps`-style API so you can get the props you need to your elements. For example, in a component-based API there is no good way to pass props to the `<Profile>` element that is rendered when `<Route path=":userId" component={Profile} />` matches. Most React libraries who take this approach end up with either an API like `<Route component={Profile} passProps={{ animate: true }} />` or use a render prop or higher-order component.

Also, in case you didn't notice, in v4 and v5 `Route`'s rendering API became rather large. It went something like this:

```
// Ah, this is nice and simple!
<Route path=":userId" component={Profile} />

// But wait, how do I pass custom props to the <Profile> element??
// Hmm, maybe we can use a render prop in those situations?
<Route
  path=":userId"
  render={routeProps => (
    <Profile routeProps={routeProps} animate={true} />
  )}
/>

// Ok, now we have two ways to render something with a route. :/

// But wait, what if we want to render something when a route
// *doesn't* match the URL, like a Not Found page? Maybe we
// can use another render prop with slightly different semantics?
<Route
  path=":userId"
  children={({ match }) => (
    match ? (
      <Profile match={match} animate={true} />
    ) : (
      <NotFound />
    )
  )}
/>

// What if I want to get access to the route match, or I need
// to redirect deeper in the tree?
function DeepComponent(routeStuff) {
  // got routeStuff, phew!
}
export default withRouter(DeepComponent);

// Well hey, now at least we've covered all our use cases!
// ... *facepalm*

```

Copy code to clipboard

At least part of the reason for this API sprawl was that React did not provide any way for us to get the information from the `<Route>` to your route element, so we had to invent clever ways to get both the route data **and** your own custom props through to your elements: `component`, render props, `passProps` higher-order-components ... until **hooks** came along!

Now, the conversation above goes like this:

```
// Ah, nice and simple API. And it's just like the <Suspense> API!
// Nothing more to learn here.
<Route path=":userId" element={<Profile />} />

// But wait, how do I pass custom props to the <Profile>
// element? Oh ya, it's just an element. Easy.
<Route path=":userId" element={<Profile animate={true} />} />

// Ok, but how do I access the router's data, like the URL params
// or the current location?
function Profile({ animate }) {
  let params = useParams();
  let location = useLocation();
}

// But what about components deep in the tree?
function DeepComponent() {
  // oh right, same as anywhere else
  let navigate = useNavigate();
}

// Aaaaaaaaand we're done here.

```

Copy code to clipboard

Another important reason for using the `element` prop in v6 is that `<Route children>` is reserved for nesting routes. This is one of people's favorite features from v3 and `@reach/router`, and we're bringing it back in v6. Taking the code in the previous example one step further, we can hoist all `<Route>` elements into a single route config:

```
// This is a React Router v6 app
import {
  BrowserRouter,
  Routes,
  Route,
  Link,
  Outlet,
} from "react-router-dom";

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="users" element={<Users />}>
          <Route path="me" element={<OwnUserProfile />} />
          <Route path=":id" element={<UserProfile />} />
        </Route>
      </Routes>
    </BrowserRouter>
  );
}

function Users() {
  return (
    <div>
      <nav>
        <Link to="me">My Profile</Link>
      </nav>

      <Outlet />
    </div>
  );
}

```

Copy code to clipboard

This step is optional of course, but it's really nice for small to medium sized apps that don't have thousands of routes.

Notice how `<Route>` elements nest naturally inside a `<Routes>` element. Nested routes build their path by adding to the parent route's path. We didn't need a trailing `*` on `<Route path="users">` this time because when the routes are defined in one spot the router is able to see all your nested routes.

You'll only need the trailing `*` when there is another `<Routes>` somewhere in that route's descendant tree. In that case, the descendant `<Routes>` will match on the portion of the pathname that remains (see the previous example for what this looks like in practice).

When using a nested config, routes with `children` should render an `<Outlet>` in order to render their child routes. This makes it easy to render layouts with nested UI.

### Note on `<Route path>` patterns

React Router v6 uses a simplified path format. `<Route path>` in v6 supports only 2 kinds of placeholders: dynamic `:id`-style params and `*` wildcards. A `*` wildcard may be used only at the end of a path, not in the middle.

All of the following are valid route paths in v6:

```
/groups
/groups/admin
/users/:id
/users/:id/messages
/files/*
/files/:id/*

```

The following RegExp-style route paths are **not valid** in v6:

```
/users/:id?
/tweets/:id(\d+)
/files/*/cat.jpg
/files-*

```

We added the dependency on path-to-regexp in v4 to enable more advanced pattern matching. In v6 we are using a simpler syntax that allows us to predictably parse the path for ranking purposes. It also means we can stop depending on path-to-regexp, which is nice for bundle size.

If you were using any of path-to-regexp's more advanced syntax, you'll have to remove it and simplify your route paths. If you were using the RegExp syntax to do URL param validation (e.g. to ensure an id is all numeric characters) please know that we plan to add some more advanced param validation in v6 at some point. For now, you'll need to move that logic to the component the route renders, and let it branch its rendered tree after you parse the params.

If you were using `<Route sensitive>` you should move it to its containing `<Routes caseSensitive>` prop. Either all routes in a `<Routes>` element are case-sensitive or they are not.

One other thing to notice is that all path matching in v6 ignores the trailing slash on the URL. In fact, `<Route strict>` has been removed and has no effect in v6. **This does not mean that you can't use trailing slashes if you need to.** Your app can decide to use trailing slashes or not, you just can't render two different UIs _client-side_ at `<Route path="edit">` and `<Route path="edit/">`. You can still render two different UIs at those URLs (though we wouldn't recommend it), but you'll have to do it server-side.

### Note on `<Link to>` values

In v5, a `<Link to>` value that does not begin with `/` was ambiguous; it depends on what the current URL is. For example, if the current URL is `/users`, a v5 `<Link to="me">` would render a `<a href="/me">`. However, if the current URL has a trailing slash, like `/users/`, the same `<Link to="me">` would render `<a href="/users/me">`. This makes it difficult to predict how links will behave, so in v5 we recommended that you build links from the root URL (using `match.url`) and not use relative `<Link to>` values.

React Router v6 fixes this ambiguity. In v6, a `<Link to="me">` will always render the same `<a href>`, regardless of the current URL.

For example, a `<Link to="me">` that is rendered inside a `<Route path="users">` will always render a link to `/users/me`, regardless of whether or not the current URL has a trailing slash.

When you'd like to link back "up" to parent routes, use a leading `..` segment in your `<Link to>` value, similar to what you'd do in a `<a href>`.

```
function App() {
  return (
    <Routes>
      <Route path="users" element={<Users />}>
        <Route path=":id" element={<UserProfile />} />
      </Route>
    </Routes>
  );
}

function Users() {
  return (
    <div>
      <h2>
        {/* This links to /users - the current route */}
        <Link to=".">Users</Link>
      </h2>

      <ul>
        {users.map((user) => (
          <li>
            {/* This links to /users/:id - the child route */}
            <Link to={user.id}>{user.name}</Link>
          </li>
        ))}
      </ul>
    </div>
  );
}

function UserProfile() {
  return (
    <div>
      <h2>
        {/* This links to /users - the parent route */}
        <Link to="..">All Users</Link>
      </h2>

      <h2>
        {/* This links to /users/:id - the current route */}
        <Link to=".">User Profile</Link>
      </h2>

      <h2>
        {/* This links to /users/mj - a "sibling" route */}
        <Link to="../mj">MJ</Link>
      </h2>
    </div>
  );
}

```

Copy code to clipboard

It may help to think about the current URL as if it were a directory path on the filesystem and `<Link to>` like the `cd` command line utility.

```
// If your routes look like this
<Route path="app">
  <Route path="dashboard">
    <Route path="stats" />
  </Route>
</Route>

// and the current URL is /app/dashboard (with or without
// a trailing slash)
<Link to="stats">               => <a href="/app/dashboard/stats">
<Link to="../stats">            => <a href="/app/stats">
<Link to="../../stats">         => <a href="/stats">
<Link to="../../../stats">      => <a href="/stats">

// On the command line, if the current directory is /app/dashboard
cd stats                        # pwd is /app/dashboard/stats
cd ../stats                     # pwd is /app/stats
cd ../../stats                  # pwd is /stats
cd ../../../stats               # pwd is /stats

```

**Note**: The decision to ignore trailing slashes while matching and creating relative paths was not taken lightly by our team. We consulted with a number of our friends and clients (who are also our friends!) about it. We found that most of us don't even understand how plain HTML relative links are handled with the trailing slash. Most people guessed it worked like `cd` on the command line (it does not). Also, HTML relative links don't have the concept of nested routes, they only worked on the URL, so we had to blaze our own trail here a bit. `@reach/router` set this precedent and it has worked out well for a couple of years.

In addition to ignoring trailing slashes in the current URL, it is important to note that `<Link to="..">` will not always behave like `<a href="..">` when your `<Route path>` matches more than one segment of the URL. Instead of removing just one segment of the URL, **it will resolve based upon the parent route's path, essentially removing all path segments specified by that route**.

```
function App() {
  return (
    <Routes>
      <Route path="users">
        <Route
          path=":id/messages"
          element={
            // This links to /users
            <Link to=".." />
          }
        />
      </Route>
    </Routes>
  );
}

```

Copy code to clipboard

This may seem like an odd choice, to make `..` operate on routes instead of URL segments, but it's a **huge** help when working with `*` routes where an indeterminate number of segments may be matched by the `*`. In these scenarios, a single `..` segment in your `<Link to>` value can essentially remove anything matched by the `*`, which lets you create more predictable links in `*` routes.

```
function App() {
  return (
    <Routes>
      <Route path=":userId">
        <Route path="messages" element={<UserMessages />} />
        <Route
          path="files/*"
          element={
            // This links to /:userId/messages, no matter
            // how many segments were matched by the *
            <Link to="../messages" />
          }
        />
      </Route>
    </Routes>
  );
}

```

Copy code to clipboard

## Pass `<Link>` state as separate prop

The `Link` component in v6 accepts `state` as a separate prop instead of receiving it as part of the object passed to `to` so you'll need to update your `Link` components if they are using `state`:

```
import { Link } from "react-router-dom";

// Change this:
<Link to={{ pathname: "/home", state: state }} />

// to this:
<Link to="/home" state={state} />

```

Copy code to clipboard

The state value is still retrieved in the linked component using `useLocation()`:

```
function Home() {
  const location = useLocation();
  const state = location.state;
  return <div>Home</div>;
}

```

Copy code to clipboard

## Use `useRoutes` instead of `react-router-config`

All of the functionality from v5's `react-router-config` package has moved into core in v6. If you prefer/need to define your routes as JavaScript objects instead of using React elements, you're going to love this.

```
function App() {
  let element = useRoutes([\
    // These are the same as the props you provide to <Route>\
    { path: "/", element: <Home /> },\
    { path: "dashboard", element: <Dashboard /> },\
    {\
      path: "invoices",\
      element: <Invoices />,\
      // Nested routes use a children property, which is also\
      // the same as <Route>\
      children: [\
        { path: ":id", element: <Invoice /> },\
        { path: "sent", element: <SentInvoices /> },\
      ],\
    },\
    // Not found routes work as you'd expect\
    { path: "*", element: <NotFound /> },\
  ]);

  // The returned element will render the entire element
  // hierarchy with all the appropriate context it needs
  return element;
}

```

Copy code to clipboard

Routes defined in this way follow all of the same semantics as `<Routes>`. In fact, `<Routes>` is really just a wrapper around `useRoutes`.

We encourage you to give both `<Routes>` and `useRoutes` a shot and decide for yourself which one you prefer to use. Honestly, we like and use them both.

If you had cooked up some of your own logic around data fetching and rendering server-side, we have a low-level `matchRoutes` function available as well similar to the one we had in react-router-config.

## Use `useNavigate` instead of `useHistory`

React Router v6 introduces a new navigation API that is synonymous with `<Link>` and provides better compatibility with suspense-enabled apps. We include both imperative and declarative versions of this API depending on your style and needs.

```
// This is a React Router v5 app
import { useHistory } from "react-router-dom";

function App() {
  let history = useHistory();
  function handleClick() {
    history.push("/home");
  }
  return (
    <div>
      <button onClick={handleClick}>go home</button>
    </div>
  );
}

```

Copy code to clipboard

In v6, this app should be rewritten to use the `navigate` API. Most of the time this means changing `useHistory` to `useNavigate` and changing the `history.push` or `history.replace` callsite.

```
// This is a React Router v6 app
import { useNavigate } from "react-router-dom";

function App() {
  let navigate = useNavigate();
  function handleClick() {
    navigate("/home");
  }
  return (
    <div>
      <button onClick={handleClick}>go home</button>
    </div>
  );
}

```

Copy code to clipboard

If you need to replace the current location instead of push a new one onto the history stack, use `navigate(to, { replace: true })`. If you need state, use `navigate(to, { state })`. You can think of the first argument to `navigate` as your `<Link to>` and the other arguments as the `replace` and `state` props.

If you prefer to use a declarative API for navigation (ala v5's `Redirect` component), v6 provides a `Navigate` component. Use it like:

```
import { Navigate } from "react-router-dom";

function App() {
  return <Navigate to="/home" replace state={state} />;
}

```

Copy code to clipboard

**Note**: Be aware that the v5 `<Redirect />` uses `replace` logic by default (you may change it via `push` prop), on the other hand, the v6 `<Navigate />` uses `push` logic by default and you may change it via `replace` prop.

```
// Change this:
<Redirect to="about" />
<Redirect to="home" push />

// to this:
<Navigate to="about" replace />
<Navigate to="home" />

```

Copy code to clipboard

If you're currently using `go`, `goBack` or `goForward` from `useHistory` to navigate backwards and forwards, you should also replace these with `navigate` with a numerical argument indicating where to move the pointer in the history stack. For example, here is some code using v5's `useHistory` hook:

```
// This is a React Router v5 app
import { useHistory } from "react-router-dom";

function App() {
  const { go, goBack, goForward } = useHistory();

  return (
    <>
      <button onClick={() => go(-2)}>
        Go 2 pages back
      </button>
      <button onClick={goBack}>Go back</button>
      <button onClick={goForward}>Go forward</button>
      <button onClick={() => go(2)}>
        Go 2 pages forward
      </button>
    </>
  );
}

```

Copy code to clipboard

Here is the equivalent app with v6:

```
// This is a React Router v6 app
import { useNavigate } from "react-router-dom";

function App() {
  const navigate = useNavigate();

  return (
    <>
      <button onClick={() => navigate(-2)}>
        Go 2 pages back
      </button>
      <button onClick={() => navigate(-1)}>Go back</button>
      <button onClick={() => navigate(1)}>
        Go forward
      </button>
      <button onClick={() => navigate(2)}>
        Go 2 pages forward
      </button>
    </>
  );
}

```

Copy code to clipboard

Again, one of the main reasons we are moving from using the `history` API directly to the `navigate` API is to provide better compatibility with React suspense. React Router v6 uses the `useNavigation` hook at the root of your component hierarchy. This lets us provide a smoother experience when user interaction needs to interrupt a pending route navigation, for example when they click a link to another route while a previously-clicked link is still loading. The `navigate` API is aware of the internal pending navigation state and will do a REPLACE instead of a PUSH onto the history stack, so the user doesn't end up with pages in their history that never actually loaded.

_Note: The `<Redirect>` element from v5 is no longer supported as part of your route config (inside a `<Routes>`). This is due to upcoming changes in React that make it unsafe to alter the state of the router during the initial render. If you need to redirect immediately, you can either a) do it on your server (probably the best solution) or b) render a `<Navigate>` element in your route component. However, recognize that the navigation will happen in a `useEffect`._

Aside from suspense compatibility, `navigate`, like `Link`, supports relative navigation. For example:

```
// assuming we are at `/stuff`
function SomeForm() {
  let navigate = useNavigate();
  return (
    <form
      onSubmit={async (event) => {
        let newRecord = await saveDataFromForm(
          event.target
        );
        // you can build up the URL yourself
        navigate(`/stuff/${newRecord.id}`);
        // or navigate relative, just like Link
        navigate(`${newRecord.id}`);
      }}
    >
      {/* ... */}
    </form>
  );
}

```

Copy code to clipboard

## Remove `<Link>` `component` prop

`<Link>` no longer supports the `component` prop for overriding the returned anchor tag. There are a few reasons for this.

First of all, a `<Link>` should pretty much always render an `<a>`. If yours does not, there's a good chance your app has some serious accessibility and usability problems, and that's no good. The browsers give us a lot of nice usability features with `<a>` and we want your users to get those for free!

That being said, maybe your app uses a CSS-in-JS library, or maybe you have a custom, fancy link component already in your design system that you'd like to render instead. The `component` prop may have worked well enough in a world before hooks, but now you can create your very own accessible `Link` component with just a few of our hooks:

```
import { FancyPantsLink } from "@fancy-pants/design-system";
import {
  useHref,
  useLinkClickHandler,
} from "react-router-dom";

const Link = React.forwardRef(
  (
    {
      onClick,
      replace = false,
      state,
      target,
      to,
      ...rest
    },
    ref
  ) => {
    let href = useHref(to);
    let handleClick = useLinkClickHandler(to, {
      replace,
      state,
      target,
    });

    return (
      <FancyPantsLink
        {...rest}
        href={href}
        onClick={(event) => {
          onClick?.(event);
          if (!event.defaultPrevented) {
            handleClick(event);
          }
        }}
        ref={ref}
        target={target}
      />
    );
  }
);

```

Copy code to clipboard

If you're using `react-router-native`, we provide `useLinkPressHandler` that works basically the same way. Just call that hook's returned function in your `Link`'s `onPress` handler and you're all set.

## Rename `<NavLink exact>` to `<NavLink end>`

This is a simple renaming of a prop to better align with the common practices of other libraries in the React ecosystem.

## Remove `activeClassName` and `activeStyle` props from `<NavLink />`

As of `v6.0.0-beta.3`, the `activeClassName` and `activeStyle` props have been removed from `NavLinkProps`. Instead, you can pass a function to either `style` or `className` that will allow you to customize the inline styling or the class string based on the component's active state.

```
<NavLink
  to="/messages"
- style={{ color: 'blue' }}
- activeStyle={{ color: 'green' }}
+ style={({ isActive }) => ({ color: isActive ? 'green' : 'blue' })}
>
  Messages
</NavLink>

```

Copy code to clipboard

```
<NavLink
  to="/messages"
- className="nav-link"
- activeClassName="activated"
+ className={({ isActive }) => "nav-link" + (isActive ? " activated" : "")}
>
  Messages
</NavLink>

```

Copy code to clipboard

If you prefer to keep the v5 props, you can create your own `<NavLink />` as a wrapper component for a smoother upgrade path.

```
import * as React from "react";
import { NavLink as BaseNavLink } from "react-router-dom";

const NavLink = React.forwardRef(
  ({ activeClassName, activeStyle, ...props }, ref) => {
    return (
      <BaseNavLink
        ref={ref}
        {...props}
        className={({ isActive }) =>
          [\
            props.className,\
            isActive ? activeClassName : null,\
          ]
            .filter(Boolean)
            .join(" ")
        }
        style={({ isActive }) => ({
          ...props.style,
          ...(isActive ? activeStyle : null),
        })}
      />
    );
  }
);

```

Copy code to clipboard

## Get `StaticRouter` from `react-router-dom/server`

The `StaticRouter` component has moved into a new bundle: `react-router-dom/server`.

```
// change
import { StaticRouter } from "react-router-dom";
// to
import { StaticRouter } from "react-router-dom/server";

```

Copy code to clipboard

This change was made both to follow more closely the convention established by the `react-dom` package and to help users understand better what a `<StaticRouter>` is for and when it should be used (on the server).

## Replace `useRouteMatch` with `useMatch`

`useMatch` is very similar to v5's `useRouteMatch`, with a few key differences:

- It uses our new [path pattern matching algorithm](https://reactrouter.com/6.29.0/upgrading/v5#note-on-route-path-patterns)
- The pattern argument is now required
- No longer accepts an array of patterns
- When passing a pattern as an object, some of the options have been renamed to better align with other APIs in v6
  - `useRouteMatch({ strict })` is now `useMatch({ end })`
  - `useRouteMatch({ sensitive })` is now `useMatch({ caseSensitive })`
- It returns a match object with a different shape

To see the exact API of the new `useMatch` hook and its type declaration, check out our [API Reference](https://reactrouter.com/6.29.0/hooks/use-match).

## Change the order of arguments passed to `matchPath`. Change pathPattern options.

Since version 6 the order of arguments passed to `matchPath` function has changed. Also pattern options has changed.

- first argument is pathPattern object, then comes pathname
- pathPattern doesn't include `exact` and `strict` options any more. New `caseSensitive` and `end` options has been added.

Please refactor it as follows:

Before:

```
// This is a React Router v5 app
import { matchPath } from "react-router-dom";

const match = matchPath("/users/123", {
  path: "/users/:id",
  exact: true, // Optional, defaults to false
  strict: false, // Optional, defaults to false
});

```

Copy code to clipboard

After:

```
// This is a React Router v6 app
import { matchPath } from "react-router-dom";

const match = matchPath(
  {
    path: "/users/:id",
    caseSensitive: false, // Optional, `true` == static parts of `path` should match case
    end: true, // Optional, `true` == pattern should match the entire URL pathname
  },
  "/users/123"
);

```

Copy code to clipboard

## `<Prompt>` is not currently supported

`<Prompt>` from v5 (along with `usePrompt` and `useBlocker` from the v6 betas) are not included in the current released version of v6. We decided we'd rather ship with what we have than take even more time to nail down a feature that isn't fully baked. We will absolutely be working on adding this back in to v6 at some point in the near future, but not for our first stable release of 6.x.

We have since added implementations for [`useBlocker`](https://reactrouter.com/6.29.0/hooks/use-blocker) and [`unstable_usePrompt`](https://reactrouter.com/6.29.0/hooks/use-prompt) that you can use instead of `<Prompt>`

## What did we miss?

Despite our best attempts at being thorough, it's very likely that we missed something. If you follow this upgrade guide and find that to be the case, please let us know. We are happy to help you figure out what to do with your v5 code to be able to upgrade and take advantage of all of the cool stuff in v6.

Good luck 🤘

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/upgrading/future) [dev](https://reactrouter.com/dev/upgrading/future)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Future Flags

# Future Flags and Deprecations

This guide walks you through the process of adopting future flags in your React Router app. By following this strategy, you will be able to upgrade to the next major version of React Router with minimal changes. To read more about future flags see [API Development Strategy](https://reactrouter.com/community/api-development-strategy).

We highly recommend you make a commit after each step and ship it instead of doing everything all at once. Most flags can be adopted in any order, with exceptions noted below.

**There are no current future flags in React Router v7**

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/upgrading/future.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.29.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Form

On this page

- [`action`](https://reactrouter.com/6.29.0/components/form#action)
- [`method`](https://reactrouter.com/6.29.0/components/form#method)
- [GET submissions](https://reactrouter.com/6.29.0/components/form#get-submissions)
- [Mutation Submissions](https://reactrouter.com/6.29.0/components/form#mutation-submissions)
- [`navigate`](https://reactrouter.com/6.29.0/components/form#navigate)
- [`fetcherKey`](https://reactrouter.com/6.29.0/components/form#fetcherkey)
- [`replace`](https://reactrouter.com/6.29.0/components/form#replace)
- [`relative`](https://reactrouter.com/6.29.0/components/form#relative)
- [`reloadDocument`](https://reactrouter.com/6.29.0/components/form#reloaddocument)
- [`state`](https://reactrouter.com/6.29.0/components/form#state)
- [`preventScrollReset`](https://reactrouter.com/6.29.0/components/form#preventscrollreset)
- [`viewTransition`](https://reactrouter.com/6.29.0/components/form#viewtransition)
- [Large List Filtering](https://reactrouter.com/6.29.0/components/form#large-list-filtering)

- [`action`](https://reactrouter.com/6.29.0/components/form#action)
- [`method`](https://reactrouter.com/6.29.0/components/form#method)
- [GET submissions](https://reactrouter.com/6.29.0/components/form#get-submissions)
- [Mutation Submissions](https://reactrouter.com/6.29.0/components/form#mutation-submissions)
- [`navigate`](https://reactrouter.com/6.29.0/components/form#navigate)
- [`fetcherKey`](https://reactrouter.com/6.29.0/components/form#fetcherkey)
- [`replace`](https://reactrouter.com/6.29.0/components/form#replace)
- [`relative`](https://reactrouter.com/6.29.0/components/form#relative)
- [`reloadDocument`](https://reactrouter.com/6.29.0/components/form#reloaddocument)
- [`state`](https://reactrouter.com/6.29.0/components/form#state)
- [`preventScrollReset`](https://reactrouter.com/6.29.0/components/form#preventscrollreset)
- [`viewTransition`](https://reactrouter.com/6.29.0/components/form#viewtransition)
- [Large List Filtering](https://reactrouter.com/6.29.0/components/form#large-list-filtering)

# `<Form>`

Type declaration

```
declare function Form(props: FormProps): React.ReactElement;

interface FormProps
  extends React.FormHTMLAttributes<HTMLFormElement> {
  method?: "get" | "post" | "put" | "patch" | "delete";
  encType?:
    | "application/x-www-form-urlencoded"
    | "multipart/form-data"
    | "text/plain";
  action?: string;
  onSubmit?: React.FormEventHandler<HTMLFormElement>;
  fetcherKey?: string;
  navigate?: boolean;
  preventScrollReset?: boolean;
  relative?: "route" | "path";
  reloadDocument?: boolean;
  replace?: boolean;
  state?: any;
  viewTransition?: boolean;
}

```

The Form component is a wrapper around a plain HTML [form](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) that emulates the browser for client side routing and data mutations. It is _not_ a form validation/state management library like you might be used to in the React ecosystem (for that, we recommend the browser's built in [HTML Form Validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation) and data validation on your backend server).

This feature only works if using a data router, see [Picking a Router](https://reactrouter.com/6.29.0/routers/picking-a-router)

```
import { Form } from "react-router-dom";

function NewEvent() {
  return (
    <Form method="post" action="/events">
      <input type="text" name="title" />
      <input type="text" name="description" />
      <button type="submit">Create</button>
    </Form>
  );
}

```

Make sure your inputs have names or else the `FormData` will not include that field's value.

All of this will trigger state updates to any rendered [`useNavigation`](https://reactrouter.com/6.29.0/hooks/use-navigation) hooks so you can build pending indicators and optimistic UI while the async operations are in-flight.

If the form doesn't _feel_ like navigation, you probably want [`useFetcher`](https://reactrouter.com/6.29.0/hooks/use-fetcher).

## `action`

The url to which the form will be submitted, just like [HTML form action](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-action). The only difference is the default action. With HTML forms, it defaults to the full URL. With `<Form>`, it defaults to the relative URL of the closest route in context.

Consider the following routes and components:

```
function ProjectsLayout() {
  return (
    <>
      <Form method="post" />
      <Outlet />
    </>
  );
}

function ProjectsPage() {
  return <Form method="post" />;
}

<DataBrowserRouter>
  <Route
    path="/projects"
    element={<ProjectsLayout />}
    action={ProjectsLayout.action}
  >
    <Route
      path=":projectId"
      element={<ProjectsPage />}
      action={ProjectsPage.action}
    />
  </Route>
</DataBrowserRouter>;

```

If the current URL is `"/projects/123"`, the form inside the child
route, `ProjectsPage`, will have a default action as you might expect: `"/projects/123"`. In this case, where the route is the deepest matching route, both `<Form>` and plain HTML forms have the same result.

But the form inside of `ProjectsLayout` will point to `"/projects"`, not the full URL. In other words, it points to the matching segment of the URL for the route in which the form is rendered.

This helps with portability as well as co-location of forms and their action handlers when if you add some convention around your route modules.

If you need to post to a different route, then add an action prop:

```
<Form action="/projects/new" method="post" />

```

**See also:**

- [Index Search Param](https://reactrouter.com/6.29.0/guides/index-search-param) (index vs parent route disambiguation)

Please see the [Splat Paths](https://reactrouter.com/6.29.0/hooks/use-resolved-path#splat-paths) section on the `useResolvedPath` docs for a note on the behavior of the `future.v7_relativeSplatPath` future flag for relative `useNavigate()` behavior within splat routes

## `method`

This determines the [HTTP verb](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods) to be used. The same as plain HTML [form method](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-method), except it also supports "put", "patch", and "delete" in addition to "get" and "post". The default is "get".

### GET submissions

The default method is "get". Get submissions _will not call an action_. Get submissions are the same as a normal navigation (user clicks a link) except the user gets to supply the search params that go to the URL from the form.

```
<Form method="get" action="/products">
  <input
    aria-label="search products"
    type="text"
    name="q"
  />
  <button type="submit">Search</button>
</Form>

```

Let's say the user types in "running shoes" and submits the form. React Router emulates the browser and will serialize the form into [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) and then navigate the user to `"/products?q=running+shoes"`. It's as if you rendered a `<Link to="/products?q=running+shoes">` as the developer, but instead you let the user supply the query string dynamically.

Your route loader can access these values most conveniently by creating a new [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL) from the `request.url` and then load the data.

```
<Route
  path="/products"
  loader={async ({ request }) => {
    let url = new URL(request.url);
    let searchTerm = url.searchParams.get("q");
    return fakeSearchProducts(searchTerm);
  }}
/>

```

### Mutation Submissions

All other methods are "mutation submissions", meaning you intend to change something about your data with POST, PUT, PATCH, or DELETE. Note that plain HTML forms only support "post" and "get", we tend to stick to those two as well.

When the user submits the form, React Router will match the `action` to the app's routes and call the `<Route action>` with the serialized [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData). When the action completes, all of the loader data on the page will automatically revalidate to keep your UI in sync with your data.

The method will be available on [`request.method`](https://developer.mozilla.org/en-US/docs/Web/API/Request/method) inside the route action that is called. You can use this to instruct your data abstractions about the intent of the submission.

```
<Route
  path="/projects/:id"
  element={<Project />}
  loader={async ({ params }) => {
    return fakeLoadProject(params.id);
  }}
  action={async ({ request, params }) => {
    switch (request.method) {
      case "PUT": {
        let formData = await request.formData();
        let name = formData.get("projectName");
        return fakeUpdateProject(name);
      }
      case "DELETE": {
        return fakeDeleteProject(params.id);
      }
      default: {
        throw new Response("", { status: 405 });
      }
    }
  }}
/>;

function Project() {
  let project = useLoaderData();

  return (
    <>
      <Form method="put">
        <input
          type="text"
          name="projectName"
          defaultValue={project.name}
        />
        <button type="submit">Update Project</button>
      </Form>

      <Form method="delete">
        <button type="submit">Delete Project</button>
      </Form>
    </>
  );
}

```

As you can see, both forms submit to the same route but you can use the `request.method` to branch on what you intend to do. After the actions completes, the `loader` will be revalidated and the UI will automatically synchronize with the new data.

## `navigate`

You can tell the form to skip the navigation and use a [fetcher](https://reactrouter.com/6.29.0/hooks/use-fetcher) internally by specifying `<Form navigate={false}>`. This is essentially a shorthand for `useFetcher()` \+ `<fetcher.Form>` where you don't care about the resulting data and only want to kick off a submission and access the pending state via [`useFetchers()`](https://reactrouter.com/6.29.0/hooks/use-fetchers).

## `fetcherKey`

When using a non-navigating `Form`, you may also optionally specify your own fetcher key to use via `<Form navigate={false} fetcherKey="my-key">`.

## `replace`

Instructs the form to replace the current entry in the history stack, instead of pushing the new entry.

```
<Form replace />

```

The default behavior is conditional on the form behavior:

- `method=get` forms default to `false`
- submission methods depend on the `formAction` and `action` behavior:

  - if your `action` throws, then it will default to `false`
  - if your `action` redirects to the current location, it defaults to `true`
  - if your `action` redirects elsewhere, it defaults to `false`
  - if your `formAction` is the current location, it defaults to `true`
  - otherwise it defaults to `false`

We've found with `get` you often want the user to be able to click "back" to see the previous search results/filters, etc. But with the other methods the default is `true` to avoid the "are you sure you want to resubmit the form?" prompt. Note that even if `replace={false}` React Router _will not_ resubmit the form when the back button is clicked and the method is post, put, patch, or delete.

In other words, this is really only useful for GET submissions and you want to avoid the back button showing the previous results.

## `relative`

By default, paths are relative to the route hierarchy, so `..` will go up one `Route` level. Occasionally, you may find that you have matching URL patterns that do not make sense to be nested, and you're prefer to use relative _path_ routing. You can opt into this behavior with `<Form to="../some/where" relative="path">`

## `reloadDocument`

Instructs the form to skip React Router and submit the form with the browser's built in behavior.

```
<Form reloadDocument />

```

This is recommended over `<form>` so you can get the benefits of default and relative `action`, but otherwise is the same as a plain HTML form.

Without a framework like [Remix](https://remix.run/), or your own server handling of posts to routes, this isn't very useful.

See also:

- [`useNavigation`](https://reactrouter.com/6.29.0/hooks/use-navigation)
- [`useActionData`](https://reactrouter.com/6.29.0/hooks/use-action-data)
- [`useSubmit`](https://reactrouter.com/6.29.0/hooks/use-submit)

## `state`

The `state` property can be used to set a stateful value for the new location which is stored inside [history state](https://developer.mozilla.org/en-US/docs/Web/API/History/state). This value can subsequently be accessed via `useLocation()`.

```
<Form
  method="post"
  action="new-path"
  state={{ some: "value" }}
/>

```

You can access this state value while on the "new-path" route:

```
let { state } = useLocation();

```

## `preventScrollReset`

If you are using [`<ScrollRestoration>`](https://reactrouter.com/6.29.0/components/scroll-restoration), this lets you prevent the scroll position from being reset to the top of the window when the form action redirects to a new location.

```
<Form method="post" preventScrollReset={true} />

```

See also: [`<Link preventScrollReset>`](https://reactrouter.com/6.29.0/components/link#preventscrollreset)

## `viewTransition`

The `viewTransition` prop enables a [View Transition](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API) for this navigation by wrapping the final state update in `document.startViewTransition()`. If you need to apply specific styles for this view transition, you will also need to leverage the [`useViewTransitionState()`](https://reactrouter.com/6.29.0/hooks//use-view-transition-state).

# Examples

TODO: More examples

## Large List Filtering

A common use case for GET submissions is filtering a large list, like ecommerce and travel booking sites.

```
function FilterForm() {
  return (
    <Form method="get" action="/slc/hotels">
      <select name="sort">
        <option value="price">Price</option>
        <option value="stars">Stars</option>
        <option value="distance">Distance</option>
      </select>

      <fieldset>
        <legend>Star Rating</legend>
        <label>
          <input type="radio" name="stars" value="5" />{" "}
          ★★★★★
        </label>
        <label>
          <input type="radio" name="stars" value="4" /> ★★★★
        </label>
        <label>
          <input type="radio" name="stars" value="3" /> ★★★
        </label>
        <label>
          <input type="radio" name="stars" value="2" /> ★★
        </label>
        <label>
          <input type="radio" name="stars" value="1" /> ★
        </label>
      </fieldset>

      <fieldset>
        <legend>Amenities</legend>
        <label>
          <input
            type="checkbox"
            name="amenities"
            value="pool"
          />{" "}
          Pool
        </label>
        <label>
          <input
            type="checkbox"
            name="amenities"
            value="exercise"
          />{" "}
          Exercise Room
        </label>
      </fieldset>
      <button type="submit">Search</button>
    </Form>
  );
}

```

When the user submits this form, the form will be serialized to the URL with something like this, depending on the user's selections:

```
/slc/hotels?sort=price&stars=4&amenities=pool&amenities=exercise

```

You can access those values from the `request.url`

```
<Route
  path="/:city/hotels"
  loader={async ({ request }) => {
    let url = new URL(request.url);
    let sort = url.searchParams.get("sort");
    let stars = url.searchParams.get("stars");
    let amenities = url.searchParams.getAll("amenities");
    return fakeGetHotels({ sort, stars, amenities });
  }}
/>

```

**See also:**

- [useSubmit](https://reactrouter.com/6.29.0/hooks/use-submit)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/framework/routing) [dev](https://reactrouter.com/dev/start/framework/routing)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Routing

On this page

- [Configuring Routes](https://reactrouter.com/start/framework/routing#configuring-routes)
- [Route Modules](https://reactrouter.com/start/framework/routing#route-modules)
- [Nested Routes](https://reactrouter.com/start/framework/routing#nested-routes)
- [Root Route](https://reactrouter.com/start/framework/routing#root-route)
- [Layout Routes](https://reactrouter.com/start/framework/routing#layout-routes)
- [Index Routes](https://reactrouter.com/start/framework/routing#index-routes)
- [Route Prefixes](https://reactrouter.com/start/framework/routing#route-prefixes)
- [Dynamic Segments](https://reactrouter.com/start/framework/routing#dynamic-segments)
- [Optional Segments](https://reactrouter.com/start/framework/routing#optional-segments)
- [Splats](https://reactrouter.com/start/framework/routing#splats)
- [Component Routes](https://reactrouter.com/start/framework/routing#component-routes)

- [Configuring Routes](https://reactrouter.com/start/framework/routing#configuring-routes)
- [Route Modules](https://reactrouter.com/start/framework/routing#route-modules)
- [Nested Routes](https://reactrouter.com/start/framework/routing#nested-routes)
- [Root Route](https://reactrouter.com/start/framework/routing#root-route)
- [Layout Routes](https://reactrouter.com/start/framework/routing#layout-routes)
- [Index Routes](https://reactrouter.com/start/framework/routing#index-routes)
- [Route Prefixes](https://reactrouter.com/start/framework/routing#route-prefixes)
- [Dynamic Segments](https://reactrouter.com/start/framework/routing#dynamic-segments)
- [Optional Segments](https://reactrouter.com/start/framework/routing#optional-segments)
- [Splats](https://reactrouter.com/start/framework/routing#splats)
- [Component Routes](https://reactrouter.com/start/framework/routing#component-routes)

# Routing

## Configuring Routes

Routes are configured in `app/routes.ts`. Each route has two required parts: a URL pattern to match the URL, and a file path to the route module that defines its behavior.

```
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [\
  route("some/path", "./some/file.tsx"),\
  // pattern ^           ^ module file\
] satisfies RouteConfig;

```

Here is a larger sample route config:

```
import {
  type RouteConfig,
  route,
  index,
  layout,
  prefix,
} from "@react-router/dev/routes";

export default [\
  index("./home.tsx"),\
  route("about", "./about.tsx"),\
\
  layout("./auth/layout.tsx", [\
    route("login", "./auth/login.tsx"),\
    route("register", "./auth/register.tsx"),\
  ]),\
\
  ...prefix("concerts", [\
    index("./concerts/home.tsx"),\
    route(":city", "./concerts/city.tsx"),\
    route("trending", "./concerts/trending.tsx"),\
  ]),\
] satisfies RouteConfig;

```

If you prefer to define your routes via file naming conventions rather than configuration, the `@react-router/fs-routes` package provides a [file system routing convention](https://reactrouter.com/how-to/file-route-conventions). You can even combine different routing conventions if you like:

```
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";
import { flatRoutes } from "@react-router/fs-routes";

export default [\
  route("/", "./home.tsx"),\
\
  ...(await flatRoutes()),\
] satisfies RouteConfig;

```

## Route Modules

The files referenced in `routes.ts` define each route's behavior:

```
route("teams/:teamId", "./team.tsx"),
//           route module ^^^^^^^^

```

Here's a sample route module:

```
// provides type safety/inference
import type { Route } from "./+types/team";

// provides `loaderData` to the component
export async function loader({ params }: Route.LoaderArgs) {
  let team = await fetchTeam(params.teamId);
  return { name: team.name };
}

// renders after the loader is done
export default function Component({
  loaderData,
}: Route.ComponentProps) {
  return <h1>{loaderData.name}</h1>;
}

```

Route modules have more features like actions, headers, and error boundaries, but they will be covered in the next guide: [Route Modules](https://reactrouter.com/start/framework/route-module)

## Nested Routes

Routes can be nested inside parent routes.

```
import {
  type RouteConfig,
  route,
  index,
} from "@react-router/dev/routes";

export default [\
  // parent route\
  route("dashboard", "./dashboard.tsx", [\
    // child routes\
    index("./home.tsx"),\
    route("settings", "./settings.tsx"),\
  ]),\
] satisfies RouteConfig;

```

The path of the parent is automatically included in the child, so this config creates both `"/dashboard"` and `"/dashboard/settings"` URLs.

Child routes are rendered through the `<Outlet/>` in the parent route.

```
import { Outlet } from "react-router";

export default function Dashboard() {
  return (
    <div>
      <h1>Dashboard</h1>
      {/* will either be home.tsx or settings.tsx */}
      <Outlet />
    </div>
  );
}

```

## Root Route

Every route in `routes.ts` is nested inside the special `app/root.tsx` module.

## Layout Routes

Using `layout`, layout routes create new nesting for their children, but they don't add any segments to the URL. It's like the root route but they can be added at any level.

```
import {
  type RouteConfig,
  route,
  layout,
  index,
  prefix,
} from "@react-router/dev/routes";

export default [\
  layout("./marketing/layout.tsx", [\
    index("./marketing/home.tsx"),\
    route("contact", "./marketing/contact.tsx"),\
  ]),\
  ...prefix("projects", [\
    index("./projects/home.tsx"),\
    layout("./projects/project-layout.tsx", [\
      route(":pid", "./projects/project.tsx"),\
      route(":pid/edit", "./projects/edit-project.tsx"),\
    ]),\
  ]),\
] satisfies RouteConfig;

```

To see `projects/home.tsx` appear in the layout, we'll need an outlet:

```
import { Outlet } from "react-router";

export default function ProjectLayout() {
  return (
    <div>
      <aside>Example sidebar</aside>
      <main>
        <Outlet />
      </main>
    </div>
  );
}

```

## Index Routes

```
index(componentFile),

```

Index routes render into their parent's [Outlet](https://api.reactrouter.com/v7/functions/react_router.Outlet.html) at their parent's URL (like a default child route).

```
import {
  type RouteConfig,
  route,
  index,
} from "@react-router/dev/routes";

export default [\
  // renders into the root.tsx Outlet at /\
  index("./home.tsx"),\
  route("dashboard", "./dashboard.tsx", [\
    // renders into the dashboard.tsx Outlet at /dashboard\
    index("./dashboard-home.tsx"),\
    route("settings", "./dashboard-settings.tsx"),\
  ]),\
] satisfies RouteConfig;

```

Note that index routes can't have children.

## Route Prefixes

Using `prefix`, you can add a path prefix to a set of routes without needing to introduce a parent route file.

```
import {
  type RouteConfig,
  route,
  layout,
  index,
  prefix,
} from "@react-router/dev/routes";

export default [\
  layout("./marketing/layout.tsx", [\
    index("./marketing/home.tsx"),\
    route("contact", "./marketing/contact.tsx"),\
  ]),\
  ...prefix("projects", [\
    index("./projects/home.tsx"),\
    layout("./projects/project-layout.tsx", [\
      route(":pid", "./projects/project.tsx"),\
      route(":pid/edit", "./projects/edit-project.tsx"),\
    ]),\
  ]),\
] satisfies RouteConfig;

```

## Dynamic Segments

If a path segment starts with `:` then it becomes a "dynamic segment". When the route matches the URL, the dynamic segment will be parsed from the URL and provided as `params` to other router APIs.

```
route("teams/:teamId", "./team.tsx"),

```

```
import type { Route } from "./+types/team";

export async function loader({ params }: Route.LoaderArgs) {
  //                           ^? { teamId: string }
}

export default function Component({
  params,
}: Route.ComponentProps) {
  params.teamId;
  //        ^ string
}

```

You can have multiple dynamic segments in one route path:

```
route("c/:categoryId/p/:productId", "./product.tsx"),

```

```
import type { Route } from "./+types/product";

async function loader({ params }: LoaderArgs) {
  //                    ^? { categoryId: string; productId: string }
}

```

You should ensure that all dynamic segments in a given path are unique. Otherwise, as the `params` object is populated - latter dynamic segment values will override earlier values.

## Optional Segments

You can make a route segment optional by adding a `?` to the end of the segment.

```
route(":lang?/categories", "./categories.tsx"),

```

You can have optional static segments, too:

```
route("users/:userId/edit?", "./user.tsx");

```

## Splats

Also known as "catchall" and "star" segments. If a route path pattern ends with `/*` then it will match any characters following the `/`, including other `/` characters.

```
route("files/*", "./files.tsx"),

```

```
export async function loader({ params }: Route.LoaderArgs) {
  // params["*"] will contain the remaining URL after files/
}

```

You can destructure the `*`, you just have to assign it a new name. A common name is `splat`:

```
const { "*": splat } = params;

```

## Component Routes

You can also use components that match the URL to elements anywhere in the component tree:

```
import { Routes, Route } from "react-router";

function Wizard() {
  return (
    <div>
      <h1>Some Wizard with Steps</h1>
      <Routes>
        <Route index element={<StepOne />} />
        <Route path="step-2" element={<StepTwo />} />
        <Route path="step-3" element={<StepThree />} />
      </Routes>
    </div>
  );
}

```

Note that these routes do not participate in data loading, actions, code splitting, or any other route module features, so their use cases are more limited than those of the route module.

* * *

Next: [Route Module](https://reactrouter.com/start/framework/route-module)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/framework/routing.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/library/navigating) [dev](https://reactrouter.com/dev/start/library/navigating)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Navigating

# Navigating

Users navigate your application with `<Link>`, `<NavLink>`, and `useNavigate`.

## NavLink

This component is for navigation links that need to render an active state.

```
import { NavLink } from "react-router";

export function MyAppNav() {
  return (
    <nav>
      <NavLink to="/" end>
        Home
      </NavLink>
      <NavLink to="/trending" end>
        Trending Concerts
      </NavLink>
      <NavLink to="/concerts">All Concerts</NavLink>
      <NavLink to="/account">Account</NavLink>
    </nav>
  );
}

```

Copy code to clipboard

Whenever a `NavLink` is active, it will automatically have an `.active` class name for easy styling with CSS:

```
a.active {
  color: red;
}

```

Copy code to clipboard

It also has callback props on `className`, `style`, and `children` with the active state for inline styling or conditional rendering:

```
// className
<NavLink
  to="/messages"
  className={({ isActive }) =>
    isActive ? "text-red-500" : "text-black"
  }
>
  Messages
</NavLink>

```

Copy code to clipboard

```
// style
<NavLink
  to="/messages"
  style={({ isActive }) => ({
    color: isActive ? "red" : "black",
  })}
>
  Messages
</NavLink>

```

Copy code to clipboard

```
// children
<NavLink to="/message">
  {({ isActive }) => (
    <span className={isActive ? "active" : ""}>
      {isActive ? "👉" : ""} Tasks
    </span>
  )}
</NavLink>

```

Copy code to clipboard

## Link

Use `<Link>` when the link doesn't need active styling:

```
import { Link } from "react-router";

export function LoggedOutMessage() {
  return (
    <p>
      You've been logged out.{" "}
      <Link to="/login">Login again</Link>
    </p>
  );
}

```

Copy code to clipboard

## useNavigate

This hook allows the programmer to navigate the user to a new page without the user interacting.

For normal navigation, it's best to use `Link` or `NavLink`. They provide a better default user experience like keyboard events, accessibility labeling, "open in new window", right click context menus, etc.

Reserve usage of `useNavigate` to situations where the user is _not_ interacting but you need to navigate, for example:

- After a form submission completes
- Logging them out after inactivity
- Timed UIs like quizzes, etc.

```
import { useNavigate } from "react-router";

export function LoginPage() {
  let navigate = useNavigate();

  return (
    <>
      <MyHeader />
      <MyLoginForm
        onSuccess={() => {
          navigate("/dashboard");
        }}
      />
      <MyFooter />
    </>
  );
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/library/navigating.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/tutorials/address-book) [dev](https://reactrouter.com/dev/tutorials/address-book)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Address Book

On this page

- [Setup](https://reactrouter.com/tutorials/address-book#setup)
- [The Root Route](https://reactrouter.com/tutorials/address-book#the-root-route)
- [The Contact Route UI](https://reactrouter.com/tutorials/address-book#the-contact-route-ui)
- [Nested Routes and Outlets](https://reactrouter.com/tutorials/address-book#nested-routes-and-outlets)
- [Client Side Routing](https://reactrouter.com/tutorials/address-book#client-side-routing)
- [Loading Data](https://reactrouter.com/tutorials/address-book#loading-data)
- [Type Safety](https://reactrouter.com/tutorials/address-book#type-safety)
- [Adding a `HydrateFallback`](https://reactrouter.com/tutorials/address-book#adding-a-hydratefallback)
- [Index Routes](https://reactrouter.com/tutorials/address-book#index-routes)
- [Adding an About Route](https://reactrouter.com/tutorials/address-book#adding-an-about-route)
- [Layout Routes](https://reactrouter.com/tutorials/address-book#layout-routes)
- [Pre-rendering a Static Route](https://reactrouter.com/tutorials/address-book#pre-rendering-a-static-route)
- [Server-Side Rendering](https://reactrouter.com/tutorials/address-book#server-side-rendering)
- [URL Params in Loaders](https://reactrouter.com/tutorials/address-book#url-params-in-loaders)
- [Throwing Responses](https://reactrouter.com/tutorials/address-book#throwing-responses)
- [Data Mutations](https://reactrouter.com/tutorials/address-book#data-mutations)
- [Creating Contacts](https://reactrouter.com/tutorials/address-book#creating-contacts)
- [Updating Data](https://reactrouter.com/tutorials/address-book#updating-data)
- [Updating Contacts with `FormData`](https://reactrouter.com/tutorials/address-book#updating-contacts-with-formdata)
- [Mutation Discussion](https://reactrouter.com/tutorials/address-book#mutation-discussion)
- [Redirecting new records to the edit page](https://reactrouter.com/tutorials/address-book#redirecting-new-records-to-the-edit-page)
- [Active Link Styling](https://reactrouter.com/tutorials/address-book#active-link-styling)
- [Global Pending UI](https://reactrouter.com/tutorials/address-book#global-pending-ui)
- [Deleting Records](https://reactrouter.com/tutorials/address-book#deleting-records)
- [Cancel Button](https://reactrouter.com/tutorials/address-book#cancel-button)
- [`URLSearchParams` and `GET` Submissions](https://reactrouter.com/tutorials/address-book#urlsearchparams-and-get-submissions)
- [Synchronizing URLs to Form State](https://reactrouter.com/tutorials/address-book#synchronizing-urls-to-form-state)
- [Submitting `Form`'s `onChange`](https://reactrouter.com/tutorials/address-book#submitting-forms-onchange)
- [Adding Search Spinner](https://reactrouter.com/tutorials/address-book#adding-search-spinner)
- [Managing the History Stack](https://reactrouter.com/tutorials/address-book#managing-the-history-stack)
- [`Form` s Without Navigation](https://reactrouter.com/tutorials/address-book#forms-without-navigation)
- [Optimistic UI](https://reactrouter.com/tutorials/address-book#optimistic-ui)

- [Setup](https://reactrouter.com/tutorials/address-book#setup)
- [The Root Route](https://reactrouter.com/tutorials/address-book#the-root-route)
- [The Contact Route UI](https://reactrouter.com/tutorials/address-book#the-contact-route-ui)
- [Nested Routes and Outlets](https://reactrouter.com/tutorials/address-book#nested-routes-and-outlets)
- [Client Side Routing](https://reactrouter.com/tutorials/address-book#client-side-routing)
- [Loading Data](https://reactrouter.com/tutorials/address-book#loading-data)
- [Type Safety](https://reactrouter.com/tutorials/address-book#type-safety)
- [Adding a `HydrateFallback`](https://reactrouter.com/tutorials/address-book#adding-a-hydratefallback)
- [Index Routes](https://reactrouter.com/tutorials/address-book#index-routes)
- [Adding an About Route](https://reactrouter.com/tutorials/address-book#adding-an-about-route)
- [Layout Routes](https://reactrouter.com/tutorials/address-book#layout-routes)
- [Pre-rendering a Static Route](https://reactrouter.com/tutorials/address-book#pre-rendering-a-static-route)
- [Server-Side Rendering](https://reactrouter.com/tutorials/address-book#server-side-rendering)
- [URL Params in Loaders](https://reactrouter.com/tutorials/address-book#url-params-in-loaders)
- [Throwing Responses](https://reactrouter.com/tutorials/address-book#throwing-responses)
- [Data Mutations](https://reactrouter.com/tutorials/address-book#data-mutations)
- [Creating Contacts](https://reactrouter.com/tutorials/address-book#creating-contacts)
- [Updating Data](https://reactrouter.com/tutorials/address-book#updating-data)
- [Updating Contacts with `FormData`](https://reactrouter.com/tutorials/address-book#updating-contacts-with-formdata)
- [Mutation Discussion](https://reactrouter.com/tutorials/address-book#mutation-discussion)
- [Redirecting new records to the edit page](https://reactrouter.com/tutorials/address-book#redirecting-new-records-to-the-edit-page)
- [Active Link Styling](https://reactrouter.com/tutorials/address-book#active-link-styling)
- [Global Pending UI](https://reactrouter.com/tutorials/address-book#global-pending-ui)
- [Deleting Records](https://reactrouter.com/tutorials/address-book#deleting-records)
- [Cancel Button](https://reactrouter.com/tutorials/address-book#cancel-button)
- [`URLSearchParams` and `GET` Submissions](https://reactrouter.com/tutorials/address-book#urlsearchparams-and-get-submissions)
- [Synchronizing URLs to Form State](https://reactrouter.com/tutorials/address-book#synchronizing-urls-to-form-state)
- [Submitting `Form`'s `onChange`](https://reactrouter.com/tutorials/address-book#submitting-forms-onchange)
- [Adding Search Spinner](https://reactrouter.com/tutorials/address-book#adding-search-spinner)
- [Managing the History Stack](https://reactrouter.com/tutorials/address-book#managing-the-history-stack)
- [`Form` s Without Navigation](https://reactrouter.com/tutorials/address-book#forms-without-navigation)
- [Optimistic UI](https://reactrouter.com/tutorials/address-book#optimistic-ui)

# Address Book

We'll be building a small, but feature-rich address book app that lets you keep track of your contacts. There's no database or other "production ready" things, so we can stay focused on the features React Router gives you. We expect it to take 30-45m if you're following along, otherwise it's a quick read.

You can also watch our [walkthrough of the React Router Tutorial](https://www.youtube.com/watch?v=pw8FAg07kdo) if you prefer 🎥

![](https://reactrouter.com/_docs/v7_address_book_tutorial/01.webp)

👉 **Every time you see this it means you need to do something in the app!**

The rest is just there for your information and deeper understanding. Let's get to it.

## Setup

👉 **Generate a basic template**

```
npx create-react-router@latest --template remix-run/react-router/tutorials/address-book

```

Copy code to clipboard

This uses a pretty bare-bones template but includes our css and data model, so we can focus on React Router.

👉 **Start the app**

```
# cd into the app directory
cd {wherever you put the app}

# install dependencies if you haven't already
npm install

# start the server
npm run dev

```

Copy code to clipboard

You should be able to open up [http://localhost:5173](http://localhost:5173/) and see an unstyled screen that looks like this:

## The Root Route

Note the file at `app/root.tsx`. This is what we call the ["Root Route"](https://reactrouter.com/explanation/special-files#roottsx). It's the first component in the UI that renders, so it typically contains the global layout for the page, as well as a the default [Error Boundary](https://reactrouter.com/how-to/error-boundary).

Expand here to see the root component code

```
import {
  Form,
  Scripts,
  ScrollRestoration,
  isRouteErrorResponse,
} from "react-router";
import type { Route } from "./+types/root";

import appStylesHref from "./app.css?url";

export default function App() {
  return (
    <>
      <div id="sidebar">
        <h1>React Router Contacts</h1>
        <div>
          <Form id="search-form" role="search">
            <input
              aria-label="Search contacts"
              id="q"
              name="q"
              placeholder="Search"
              type="search"
            />
            <div
              aria-hidden
              hidden={true}
              id="search-spinner"
            />
          </Form>
          <Form method="post">
            <button type="submit">New</button>
          </Form>
        </div>
        <nav>
          <ul>
            <li>
              <a href={`/contacts/1`}>Your Name</a>
            </li>
            <li>
              <a href={`/contacts/2`}>Your Friend</a>
            </li>
          </ul>
        </nav>
      </div>
    </>
  );
}

// The Layout component is a special export for the root route.
// It acts as your document's "app shell" for all route components, HydrateFallback, and ErrorBoundary
// For more information, see https://reactrouter.com/explanation/special-files#layout-export
export function Layout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <link rel="stylesheet" href={appStylesHref} />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

// The top most error boundary for the app, rendered when your app throws an error
// For more information, see https://reactrouter.com/start/framework/route-module#errorboundary
export function ErrorBoundary({
  error,
}: Route.ErrorBoundaryProps) {
  let message = "Oops!";
  let details = "An unexpected error occurred.";
  let stack: string | undefined;

  if (isRouteErrorResponse(error)) {
    message = error.status === 404 ? "404" : "Error";
    details =
      error.status === 404
        ? "The requested page could not be found."
        : error.statusText || details;
  } else if (
    import.meta.env.DEV &&
    error &&
    error instanceof Error
  ) {
    details = error.message;
    stack = error.stack;
  }

  return (
    <main id="error-page">
      <h1>{message}</h1>
      <p>{details}</p>
      {stack && (
        <pre>
          <code>{stack}</code>
        </pre>
      )}
    </main>
  );
}

```

Copy code to clipboard

## The Contact Route UI

If you click on one of the sidebar items you'll get the default 404 page. Let's create a route that matches the url `/contacts/1`.

👉 **Create a contact route module**

```
mkdir app/routes
touch app/routes/contact.tsx

```

Copy code to clipboard

We could put this file anywhere we want, but to make things a bit more organized, we'll put all our routes inside the `app/routes` directory.

You can also use [file-based routing if you prefer](https://reactrouter.com/how-to/file-route-conventions).

👉 **Configure the route**

We need to tell React Router about our new route. `routes.ts` is a special file where we can configure all our routes.

```
import type { RouteConfig } from "@react-router/dev/routes";
import { route } from "@react-router/dev/routes";

export default [\
  route("contacts/:contactId", "routes/contact.tsx"),\
] satisfies RouteConfig;

```

Copy code to clipboard

In React Router, `:` makes a segment dynamic. We just made the following urls match the `routes/contact.tsx` route module:

- `/contacts/123`
- `/contacts/abc`

👉 **Add the contact component UI**

It's just a bunch of elements, feel free to copy/paste.

```
import { Form } from "react-router";

import type { ContactRecord } from "../data";

export default function Contact() {
  const contact = {
    first: "Your",
    last: "Name",
    avatar: "https://placecats.com/200/200",
    twitter: "your_handle",
    notes: "Some notes",
    favorite: true,
  };

  return (
    <div id="contact">
      <div>
        <img
          alt={`${contact.first} ${contact.last} avatar`}
          key={contact.avatar}
          src={contact.avatar}
        />
      </div>

      <div>
        <h1>
          {contact.first || contact.last ? (
            <>
              {contact.first} {contact.last}
            </>
          ) : (
            <i>No Name</i>
          )}
          <Favorite contact={contact} />
        </h1>

        {contact.twitter ? (
          <p>
            <a
              href={`https://twitter.com/${contact.twitter}`}
            >
              {contact.twitter}
            </a>
          </p>
        ) : null}

        {contact.notes ? <p>{contact.notes}</p> : null}

        <div>
          <Form action="edit">
            <button type="submit">Edit</button>
          </Form>

          <Form
            action="destroy"
            method="post"
            onSubmit={(event) => {
              const response = confirm(
                "Please confirm you want to delete this record."
              );
              if (!response) {
                event.preventDefault();
              }
            }}
          >
            <button type="submit">Delete</button>
          </Form>
        </div>
      </div>
    </div>
  );
}

function Favorite({
  contact,
}: {
  contact: Pick<ContactRecord, "favorite">;
}) {
  const favorite = contact.favorite;

  return (
    <Form method="post">
      <button
        aria-label={
          favorite
            ? "Remove from favorites"
            : "Add to favorites"
        }
        name="favorite"
        value={favorite ? "false" : "true"}
      >
        {favorite ? "★" : "☆"}
      </button>
    </Form>
  );
}

```

Copy code to clipboard

Now if we click one of the links or visit [`/contacts/1`](http://localhost:5173/contacts/1) we get ... nothing new?

![](https://reactrouter.com/_docs/v7_address_book_tutorial/02.webp)

## Nested Routes and Outlets

React Router supports nested routing. In order for child routes to render inside of parent layouts, we need to render an [`Outlet`](https://api.reactrouter.com/v7/functions/react_router.Outlet) in the parent. Let's fix it, open up `app/root.tsx` and render an outlet inside.

👉 **Render an [`<Outlet />`](https://api.reactrouter.com/v7/functions/react_router.Outlet)**

```
import {
  Form,
  Outlet,
  Scripts,
  ScrollRestoration,
  isRouteErrorResponse,
} from "react-router";

// existing imports & exports

export default function App() {
  return (
    <>
      <div id="sidebar">{/* other elements */}</div>
      <div id="detail">
        <Outlet />
      </div>
    </>
  );
}

```

Copy code to clipboard

Now the child route should be rendering through the outlet.

![](https://reactrouter.com/_docs/v7_address_book_tutorial/03.webp)

## Client Side Routing

You may or may not have noticed, but when we click the links in the sidebar, the browser is doing a full document request for the next URL instead of client side routing, which completely remounts our app

Client side routing allows our app to update the URL without reloading the entire page. Instead, the app can immediately render new UI. Let's make it happen with [`<Link>`](https://api.reactrouter.com/v7/functions/react_router.Link).

👉 **Change the sidebar `<a href>` to `<Link to>`**

```
import {
  Form,
  Link,
  Outlet,
  Scripts,
  ScrollRestoration,
  isRouteErrorResponse,
} from "react-router";

// existing imports & exports

export default function App() {
  return (
    <>
      <div id="sidebar">
        {/* other elements */}
        <nav>
          <ul>
            <li>
              <Link to={`/contacts/1`}>Your Name</Link>
            </li>
            <li>
              <Link to={`/contacts/2`}>Your Friend</Link>
            </li>
          </ul>
        </nav>
      </div>
      {/* other elements */}
    </>
  );
}

```

Copy code to clipboard

You can open the network tab in the browser devtools to see that it's not requesting documents anymore.

## Loading Data

URL segments, layouts, and data are more often than not coupled (tripled?) together. We can see it in this app already:

| URL Segment | Component | Data |
| --- | --- | --- |
| / | `<App>` | list of contacts |
| contacts/:contactId | `<Contact>` | individual contact |

Because of this natural coupling, React Router has data conventions to get data into your route components easily.

First we'll create and export a [`clientLoader`](https://reactrouter.com/start/framework/route-module#clientloader) function in the root route and then render the data.

👉 **Export a `clientLoader` function from `app/root.tsx` and render the data**

The following code has a type error in it, we'll fix it in the next section

```
// existing imports
import { getContacts } from "./data";

// existing exports

export async function clientLoader() {
  const contacts = await getContacts();
  return { contacts };
}

export default function App({ loaderData }) {
  const { contacts } = loaderData;

  return (
    <>
      <div id="sidebar">
        {/* other elements */}
        <nav>
          {contacts.length ? (
            <ul>
              {contacts.map((contact) => (
                <li key={contact.id}>
                  <Link to={`contacts/${contact.id}`}>
                    {contact.first || contact.last ? (
                      <>
                        {contact.first} {contact.last}
                      </>
                    ) : (
                      <i>No Name</i>
                    )}
                    {contact.favorite ? (
                      <span>★</span>
                    ) : null}
                  </Link>
                </li>
              ))}
            </ul>
          ) : (
            <p>
              <i>No contacts</i>
            </p>
          )}
        </nav>
      </div>
      {/* other elements */}
    </>
  );
}

```

Copy code to clipboard

That's it! React Router will now automatically keep that data in sync with your UI. The sidebar should now look like this:

![](https://reactrouter.com/_docs/v7_address_book_tutorial/04.webp)

You may be wondering why we're "client" loading data instead of loading the data on the server so we can do server-side rendering (SSR). Right now our contacts site is a [Single Page App](https://reactrouter.com/how-to/spa), so there's no server-side rendering. This makes it really easy to deploy to any static hosting provider, but we'll talk more about how to enable SSR in a bit so you can learn about all the different [rendering strategies](https://reactrouter.com/start/framework/rendering) React Router offers.

## Type Safety

You probably noticed that we didn't assign a type to the `loaderData` prop. Let's fix that.

👉 **Add the `ComponentProps` type to the `App` component**

```
// existing imports
import type { Route } from "./+types/root";
// existing imports & exports

export default function App({
  loaderData,
}: Route.ComponentProps) {
  const { contacts } = loaderData;

  // existing code
}

```

Copy code to clipboard

Wait, what? Where did these types come from?!

We didn't define them, yet somehow they already know about the `contacts` property we returned from our `clientLoader`.

That's because React Router [generates types for each route in your app](https://reactrouter.com/explanation/type-safety) to provide automatic type safety.

## Adding a `HydrateFallback`

We mentioned earlier that we are working on a [Single Page App](https://reactrouter.com/how-to/spa) with no server-side rendering. If you look inside of [`react-router.config.ts`](https://reactrouter.com/explanation/special-files#react-routerconfigts) you'll see that this is configured with a simple boolean:

```
import { type Config } from "@react-router/dev/config";

export default {
  ssr: false,
} satisfies Config;

```

Copy code to clipboard

You might have started noticing that whenever you refresh the page you get a flash of white before the app loads. Since we're only rendering on the client, there's nothing to show the user while the app is loading.

👉 **Add a `HydrateFallback` export**

We can provide a fallback that will show up before the app is hydrated (rendering on the client for the first time) with a [`HydrateFallback`](https://reactrouter.com/start/framework/route-module#hydratefallback) export.

```
// existing imports & exports

export function HydrateFallback() {
  return (
    <div id="loading-splash">
      <div id="loading-splash-spinner" />
      <p>Loading, please wait...</p>
    </div>
  );
}

```

Copy code to clipboard

Now if you refresh the page, you'll briefly see the loading splash before the app is hydrated.

![](https://reactrouter.com/_docs/v7_address_book_tutorial/05.webp)

## Index Routes

When you load the app and aren't yet on a contact page, you'll notice a big blank page on the right side of the list.

![](https://reactrouter.com/_docs/v7_address_book_tutorial/06.webp)

When a route has children, and you're at the parent route's path, the `<Outlet>` has nothing to render because no children match. You can think of [index routes](https://reactrouter.com/start/framework/routing#index-routes) as the default child route to fill in that space.

👉 **Create an index route for the root route**

```
touch app/routes/home.tsx

```

Copy code to clipboard

```
import type { RouteConfig } from "@react-router/dev/routes";
import { index, route } from "@react-router/dev/routes";

export default [\
  index("routes/home.tsx"),\
  route("contacts/:contactId", "routes/contact.tsx"),\
] satisfies RouteConfig;

```

Copy code to clipboard

👉 **Fill in the index component's elements**

Feel free to copy/paste, nothing special here.

```
export default function Home() {
  return (
    <p id="index-page">
      This is a demo for React Router.
      <br />
      Check out{" "}
      <a href="https://reactrouter.com">
        the docs at reactrouter.com
      </a>
      .
    </p>
  );
}

```

Copy code to clipboard

![](https://reactrouter.com/_docs/v7_address_book_tutorial/07.webp)

Voilà! No more blank space. It's common to put dashboards, stats, feeds, etc. at index routes. They can participate in data loading as well.

## Adding an About Route

Before we move on to working with dynamic data that the user can interact with, let's add a page with static content we expect to rarely change. An about page will be perfect for this.

👉 **Create the about route**

```
touch app/routes/about.tsx

```

Copy code to clipboard

Don't forget to add the route to `app/routes.ts`:

```
export default [\
  index("routes/home.tsx"),\
  route("contacts/:contactId", "routes/contact.tsx"),\
  route("about", "routes/about.tsx"),\
] satisfies RouteConfig;

```

Copy code to clipboard

👉 **Add the about page UI**

Nothing too special here, just copy and paste:

```
import { Link } from "react-router";

export default function About() {
  return (
    <div id="about">
      <Link to="/">← Go to demo</Link>
      <h1>About React Router Contacts</h1>

      <div>
        <p>
          This is a demo application showing off some of the
          powerful features of React Router, including
          dynamic routing, nested routes, loaders, actions,
          and more.
        </p>

        <h2>Features</h2>
        <p>
          Explore the demo to see how React Router handles:
        </p>
        <ul>
          <li>
            Data loading and mutations with loaders and
            actions
          </li>
          <li>
            Nested routing with parent/child relationships
          </li>
          <li>URL-based routing with dynamic segments</li>
          <li>Pending and optimistic UI</li>
        </ul>

        <h2>Learn More</h2>
        <p>
          Check out the official documentation at{" "}
          <a href="https://reactrouter.com">
            reactrouter.com
          </a>{" "}
          to learn more about building great web
          applications with React Router.
        </p>
      </div>
    </div>
  );
}

```

Copy code to clipboard

👉 **Add a link to the about page in the sidebar**

```
export default function App() {
  return (
    <>
      <div id="sidebar">
        <h1>
          <Link to="about">React Router Contacts</Link>
        </h1>
        {/* other elements */}
      </div>
      {/* other elements */}
    </>
  );
}

```

Copy code to clipboard

Now navigate to the [about page](http://localhost:5173/about) and it should look like this:

![](https://reactrouter.com/_docs/v7_address_book_tutorial/08.webp)

## Layout Routes

We don't actually want the about page to be nested inside of the sidebar layout. Let's move the sidebar to a layout so we can avoid rendering it on the about page. Additionally, we want to avoid loading all the contacts data on the about page.

👉 **Create a layout route for the sidebar**

You can name and put this layout route wherever you want, but putting it inside of a `layouts` directory will help keep things organized for our simple app.

```
mkdir app/layouts
touch app/layouts/sidebar.tsx

```

Copy code to clipboard

For now just return an [`<Outlet>`](https://api.reactrouter.com/v7/functions/react_router.Outlet).

```
import { Outlet } from "react-router";

export default function SidebarLayout() {
  return <Outlet />;
}

```

Copy code to clipboard

👉 **Move route definitions under the sidebar layout**

We can define a `layout` route to automatically render the sidebar for all matched routes within in. This is basically what our `root` was, but now we can scope it to specific routes.

```
import type { RouteConfig } from "@react-router/dev/routes";
import {
  index,
  layout,
  route,
} from "@react-router/dev/routes";

export default [\
  layout("layouts/sidebar.tsx", [\
    index("routes/home.tsx"),\
    route("contacts/:contactId", "routes/contact.tsx"),\
  ]),\
  route("about", "routes/about.tsx"),\
] satisfies RouteConfig;

```

Copy code to clipboard

👉 **Move the layout and data fetching to the sidebar layout**

We want to move the `clientLoader` and everything inside the `App` component to the sidebar layout. It should look like this:

```
import { Form, Link, Outlet } from "react-router";
import { getContacts } from "../data";
import type { Route } from "./+types/sidebar";

export async function clientLoader() {
  const contacts = await getContacts();
  return { contacts };
}

export default function SidebarLayout({
  loaderData,
}: Route.ComponentProps) {
  const { contacts } = loaderData;

  return (
    <>
      <div id="sidebar">
        <h1>
          <Link to="about">React Router Contacts</Link>
        </h1>
        <div>
          <Form id="search-form" role="search">
            <input
              aria-label="Search contacts"
              id="q"
              name="q"
              placeholder="Search"
              type="search"
            />
            <div
              aria-hidden
              hidden={true}
              id="search-spinner"
            />
          </Form>
          <Form method="post">
            <button type="submit">New</button>
          </Form>
        </div>
        <nav>
          {contacts.length ? (
            <ul>
              {contacts.map((contact) => (
                <li key={contact.id}>
                  <Link to={`contacts/${contact.id}`}>
                    {contact.first || contact.last ? (
                      <>
                        {contact.first} {contact.last}
                      </>
                    ) : (
                      <i>No Name</i>
                    )}
                    {contact.favorite ? (
                      <span>★</span>
                    ) : null}
                  </Link>
                </li>
              ))}
            </ul>
          ) : (
            <p>
              <i>No contacts</i>
            </p>
          )}
        </nav>
      </div>
      <div id="detail">
        <Outlet />
      </div>
    </>
  );
}

```

Copy code to clipboard

And inside `app/root.tsx`, `App` should just return an [`<Outlet>`](https://api.reactrouter.com/v7/functions/react_router.Outlet), and all unused imports can be removed. Make sure there is no `clientLoader` in `root.tsx`.

```
// existing imports and exports

export default function App() {
  return <Outlet />;
}

```

Copy code to clipboard

Now with that shuffling around done, our about page no longer loads contacts data nor is it nested inside of the sidebar layout:

![](https://reactrouter.com/_docs/v7_address_book_tutorial/09.webp)

## Pre-rendering a Static Route

If you refresh the about page, you still see the loading spinner for just a split second before the page render on the client. This is really not a good experience, plus the page is just static information, we should be able to pre-render it as static HTML at build time.

👉 **Pre-render the about page**

Inside of `react-router.config.ts`, we can add a [`prerender`](https://reactrouter.com/how-to/pre-rendering) array to the config to tell React Router to pre-render certain urls at build time. In this case we just want to pre-render the about page.

```
import { type Config } from "@react-router/dev/config";

export default {
  ssr: false,
  prerender: ["/about"],
} satisfies Config;

```

Copy code to clipboard

Now if you go to the [about page](http://localhost:5173/about) and refresh, you won't see the loading spinner!

If you're still seeing a spinner when you refresh, make sure you deleted the `clientLoader` in `root.tsx`.

## Server-Side Rendering

React Router is a great framework for building [Single Page Apps](https://reactrouter.com/how-to/spa). Many applications are served well by only client-side rendering, and _maybe_ statically pre-rendering a few pages at build time.

If you ever do want to introduce server-side rendering into your React Router application, it's incredibly easy (remember that `ssr: false` boolean from earlier?).

👉 **Enable server-side rendering**

```
export default {
  ssr: true,
  prerender: ["/about"],
} satisfies Config;

```

Copy code to clipboard

And now... nothing is different? We're still getting our spinner for a split second before the page renders on the client? Plus, aren't we using `clientLoader`, so our data is still being fetched on the client?

That's right! With React Router you can still use `clientLoader` (and `clientAction`) to do client-side data fetching where you see fit. React Router gives you a lot of flexibility to use the right tool for the job.

Let's switch to using [`loader`](https://reactrouter.com/start/framework/route-module#loader), which (you guessed it) is used to fetch data on the server.

👉 **Switch to using `loader` to fetch data**

```
// existing imports

export async function loader() {
  const contacts = await getContacts();
  return { contacts };
}

```

Copy code to clipboard

Whether you set `ssr` to `true` or `false` depends on you and your users needs. Both strategies are perfectly valid. For the remainder of this tutorial we're going to use server-side rendering, but know that all rendering strategies are first class citizens in React Router.

## URL Params in Loaders

👉 **Click on one of the sidebar links**

We should be seeing our old static contact page again, with one difference: the URL now has a real ID for the record.

![](https://reactrouter.com/_docs/v7_address_book_tutorial/10.webp)

Remember the `:contactId` part of the route definition in `app/routes.ts`? These dynamic segments will match dynamic (changing) values in that position of the URL. We call these values in the URL "URL Params", or just "params" for short.

These `params` are passed to the loader with keys that match the dynamic segment. For example, our segment is named `:contactId` so the value will be passed as `params.contactId`.

These params are most often used to find a record by ID. Let's try it out.

👉 **Add a `loader` function to the contact page and access data with `loaderData`**

The following code has type errors in it, we'll fix them in the next section

```
// existing imports
import { getContact } from "../data";
import type { Route } from "./+types/contact";

export async function loader({ params }: Route.LoaderArgs) {
  const contact = await getContact(params.contactId);
  return { contact };
}

export default function Contact({
  loaderData,
}: Route.ComponentProps) {
  const { contact } = loaderData;

  // existing code
}

// existing code

```

Copy code to clipboard

![](https://reactrouter.com/_docs/v7_address_book_tutorial/11.webp)

## Throwing Responses

You'll notice that the type of `loaderData.contact` is `ContactRecord | null`. Based on our automatic type safety, TypeScript already knows that `params.contactId` is a string, but we haven't done anything to make sure it's a valid ID. Since the contact might not exist, `getContact` could return `null`, which is why we have type errors.

We could account for the possibility of the contact being not found in component code, but the webby thing to do is send a proper 404. We can do that in the loader and solve all of our problems at once.

```
// existing imports

export async function loader({ params }: Route.LoaderArgs) {
  const contact = await getContact(params.contactId);
  if (!contact) {
    throw new Response("Not Found", { status: 404 });
  }
  return { contact };
}

// existing code

```

Copy code to clipboard

Now, if the user isn't found, code execution down this path stops and React Router renders the error path instead. Components in React Router can focus only on the happy path 😁

## Data Mutations

We'll create our first contact in a second, but first let's talk about HTML.

React Router emulates HTML Form navigation as the data mutation primitive, which used to be the only way prior to the JavaScript cambrian explosion. Don't be fooled by the simplicity! Forms in React Router give you the UX capabilities of client rendered apps with the simplicity of the "old school" web model.

While unfamiliar to some web developers, HTML `form` s actually cause a navigation in the browser, just like clicking a link. The only difference is in the request: links can only change the URL while `form` s can also change the request method ( `GET` vs. `POST`) and the request body ( `POST` form data).

Without client side routing, the browser will serialize the `form`'s data automatically and send it to the server as the request body for `POST`, and as [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) for `GET`. React Router does the same thing, except instead of sending the request to the server, it uses client side routing and sends it to the route's [`action`](https://reactrouter.com/start/framework/route-module#action) function.

We can test this out by clicking the "New" button in our app.

![](https://reactrouter.com/_docs/v7_address_book_tutorial/12.webp)

React Router sends a 405 because there is no code on the server to handle this form navigation.

## Creating Contacts

We'll create new contacts by exporting an `action` function in our root route. When the user clicks the "new" button, the form will `POST` to the root route action.

👉 **Export an `action` function from `app/root.tsx`**

```
// existing imports

import { createEmptyContact } from "./data";

export async function action() {
  const contact = await createEmptyContact();
  return { contact };
}

// existing code

```

Copy code to clipboard

That's it! Go ahead and click the "New" button, and you should see a new record pop into the list 🥳

![](https://reactrouter.com/_docs/v7_address_book_tutorial/13.webp)

The `createEmptyContact` method just creates an empty contact with no name or data or anything. But it does still create a record, promise!

> 🧐 Wait a sec ... How did the sidebar update? Where did we call the `action` function? Where's the code to re-fetch the data? Where are `useState`, `onSubmit` and `useEffect`?!

This is where the "old school web" programming model shows up. [`<Form>`](https://api.reactrouter.com/v7/functions/react_router.Form) prevents the browser from sending the request to the server and sends it to your route's `action` function instead with [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch).

In web semantics, a `POST` usually means some data is changing. By convention, React Router uses this as a hint to automatically revalidate the data on the page after the `action` finishes.

In fact, since it's all just HTML and HTTP, you could disable JavaScript and the whole thing will still work. Instead of React Router serializing the form and making a [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch) request to your server, the browser will serialize the form and make a document request. From there React Router will render the page server side and send it down. It's the same UI in the end either way.

We'll keep JavaScript around though because we're going to make a better user experience than spinning favicons and static documents.

## Updating Data

Let's add a way to fill the information for our new record.

Just like creating data, you update data with [`<Form>`](https://api.reactrouter.com/v7/functions/react_router.Form). Let's make a new route module inside `app/routes/edit-contact.tsx`.

👉 **Create the edit contact route**

```
touch app/routes/edit-contact.tsx

```

Copy code to clipboard

Don't forget to add the route to `app/routes.ts`:

```
export default [\
  layout("layouts/sidebar.tsx", [\
    index("routes/home.tsx"),\
    route("contacts/:contactId", "routes/contact.tsx"),\
    route(\
      "contacts/:contactId/edit",\
      "routes/edit-contact.tsx"\
    ),\
  ]),\
  route("about", "routes/about.tsx"),\
] satisfies RouteConfig;

```

Copy code to clipboard

👉 **Add the edit page UI**

Nothing we haven't seen before, feel free to copy/paste:

```
import { Form } from "react-router";
import type { Route } from "./+types/edit-contact";

import { getContact } from "../data";

export async function loader({ params }: Route.LoaderArgs) {
  const contact = await getContact(params.contactId);
  if (!contact) {
    throw new Response("Not Found", { status: 404 });
  }
  return { contact };
}

export default function EditContact({
  loaderData,
}: Route.ComponentProps) {
  const { contact } = loaderData;

  return (
    <Form key={contact.id} id="contact-form" method="post">
      <p>
        <span>Name</span>
        <input
          aria-label="First name"
          defaultValue={contact.first}
          name="first"
          placeholder="First"
          type="text"
        />
        <input
          aria-label="Last name"
          defaultValue={contact.last}
          name="last"
          placeholder="Last"
          type="text"
        />
      </p>
      <label>
        <span>Twitter</span>
        <input
          defaultValue={contact.twitter}
          name="twitter"
          placeholder="@jack"
          type="text"
        />
      </label>
      <label>
        <span>Avatar URL</span>
        <input
          aria-label="Avatar URL"
          defaultValue={contact.avatar}
          name="avatar"
          placeholder="https://example.com/avatar.jpg"
          type="text"
        />
      </label>
      <label>
        <span>Notes</span>
        <textarea
          defaultValue={contact.notes}
          name="notes"
          rows={6}
        />
      </label>
      <p>
        <button type="submit">Save</button>
        <button type="button">Cancel</button>
      </p>
    </Form>
  );
}

```

Copy code to clipboard

Now click on your new record, then click the "Edit" button. We should see the new route.

![](https://reactrouter.com/_docs/v7_address_book_tutorial/14.webp)

## Updating Contacts with `FormData`

The edit route we just created already renders a `form`. All we need to do is add the `action` function. React Router will serialize the `form`, `POST` it with [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch), and automatically revalidate all the data.

👉 **Add an `action` function to the edit route**

```
import { Form, redirect } from "react-router";
// existing imports

import { getContact, updateContact } from "../data";

export async function action({
  params,
  request,
}: Route.ActionArgs) {
  const formData = await request.formData();
  const updates = Object.fromEntries(formData);
  await updateContact(params.contactId, updates);
  return redirect(`/contacts/${params.contactId}`);
}

// existing code

```

Copy code to clipboard

Fill out the form, hit save, and you should see something like this! (Except easier on the eyes and maybe with the patience to cut watermelon.)

![](https://reactrouter.com/_docs/v7_address_book_tutorial/15.webp)

## Mutation Discussion

> 😑 It worked, but I have no idea what is going on here...

Let's dig in a bit...

Open up `app/routes/edit-contact.tsx` and look at the `form` elements. Notice how they each have a name:

```
<input
  aria-label="First name"
  defaultValue={contact.first}
  name="first"
  placeholder="First"
  type="text"
/>

```

Copy code to clipboard

Without JavaScript, when a form is submitted, the browser will create [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) and set it as the body of the request when it sends it to the server. As mentioned before, React Router prevents that and emulates the browser by sending the request to your `action` function with [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch) instead, including the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData).

Each field in the `form` is accessible with `formData.get(name)`. For example, given the input field from above, you could access the first and last names like this:

```
export const action = async ({
  params,
  request,
}: ActionFunctionArgs) => {
  const formData = await request.formData();
  const firstName = formData.get("first");
  const lastName = formData.get("last");
  // ...
};

```

Since we have a handful of form fields, we used [`Object.fromEntries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries) to collect them all into an object, which is exactly what our `updateContact` function wants.

```
const updates = Object.fromEntries(formData);
updates.first; // "Some"
updates.last; // "Name"

```

Aside from the `action` function, none of these APIs we're discussing are provided by React Router: [`request`](https://developer.mozilla.org/en-US/docs/Web/API/Request), [`request.formData`](https://developer.mozilla.org/en-US/docs/Web/API/Request/formData), [`Object.fromEntries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries) are all provided by the web platform.

After we finished the `action`, note the [`redirect`](https://api.reactrouter.com/v7/functions/react_router.redirect) at the end:

```
export async function action({
  params,
  request,
}: Route.ActionArgs) {
  invariant(params.contactId, "Missing contactId param");
  const formData = await request.formData();
  const updates = Object.fromEntries(formData);
  await updateContact(params.contactId, updates);
  return redirect(`/contacts/${params.contactId}`);
}

```

Copy code to clipboard

`action` and `loader` functions can both return a `Response` (makes sense, since they received a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request)!). The [`redirect`](https://api.reactrouter.com/v7/functions/react_router.redirect) helper just makes it easier to return a [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) that tells the app to change locations.

Without client side routing, if a server redirected after a `POST` request, the new page would fetch the latest data and render. As we learned before, React Router emulates this model and automatically revalidates the data on the page after the `action` call. That's why the sidebar automatically updates when we save the form. The extra revalidation code doesn't exist without client side routing, so it doesn't need to exist with client side routing in React Router either!

One last thing. Without JavaScript, the [`redirect`](https://api.reactrouter.com/v7/functions/react_router.redirect) would be a normal redirect. However, with JavaScript it's a client-side redirect, so the user doesn't lose client state like scroll positions or component state.

## Redirecting new records to the edit page

Now that we know how to redirect, let's update the action that creates new contacts to redirect to the edit page:

👉 **Redirect to the new record's edit page**

```
import {
  Outlet,
  Scripts,
  ScrollRestoration,
  isRouteErrorResponse,
  redirect,
} from "react-router";
// existing imports

export async function action() {
  const contact = await createEmptyContact();
  return redirect(`/contacts/${contact.id}/edit`);
}

// existing code

```

Copy code to clipboard

Now when we click "New", we should end up on the edit page:

![](https://reactrouter.com/_docs/v7_address_book_tutorial/16.webp)

## Active Link Styling

Now that we have a bunch of records, it's not clear which one we're looking at in the sidebar. We can use [`NavLink`](https://api.reactrouter.com/v7/functions/react_router.NavLink) to fix this.

👉 **Replace `<Link>` with `<NavLink>` in the sidebar**

```
import { Form, Link, NavLink, Outlet } from "react-router";

// existing imports and exports

export default function SidebarLayout({
  loaderData,
}: Route.ComponentProps) {
  const { contacts } = loaderData;

  return (
    <>
      <div id="sidebar">
        {/* existing elements */}
        <ul>
          {contacts.map((contact) => (
            <li key={contact.id}>
              <NavLink
                className={({ isActive, isPending }) =>
                  isActive
                    ? "active"
                    : isPending
                    ? "pending"
                    : ""
                }
                to={`contacts/${contact.id}`}
              >
                {/* existing elements */}
              </NavLink>
            </li>
          ))}
        </ul>
        {/* existing elements */}
      </div>
      {/* existing elements */}
    </>
  );
}

```

Copy code to clipboard

Note that we are passing a function to `className`. When the user is at the URL that matches `<NavLink to>`, then `isActive` will be true. When it's _about_ to be active (the data is still loading) then `isPending` will be true. This allows us to easily indicate where the user is and also provide immediate feedback when links are clicked but data needs to be loaded.

![](https://reactrouter.com/_docs/v7_address_book_tutorial/17.webp)

## Global Pending UI

As the user navigates the app, React Router will _leave the old page up_ as data is loading for the next page. You may have noticed the app feels a little unresponsive as you click between the list. Let's provide the user with some feedback so the app doesn't feel unresponsive.

React Router is managing all the state behind the scenes and reveals the pieces you need to build dynamic web apps. In this case, we'll use the [`useNavigation`](https://api.reactrouter.com/v7/functions/react_router.useNavigation) hook.

👉 **Use `useNavigation` to add global pending UI**

```
import {
  Form,
  Link,
  NavLink,
  Outlet,
  useNavigation,
} from "react-router";

export default function SidebarLayout({
  loaderData,
}: Route.ComponentProps) {
  const { contacts } = loaderData;
  const navigation = useNavigation();

  return (
    <>
      {/* existing elements */}
      <div
        className={
          navigation.state === "loading" ? "loading" : ""
        }
        id="detail"
      >
        <Outlet />
      </div>
    </>
  );
}

```

Copy code to clipboard

[`useNavigation`](https://api.reactrouter.com/v7/functions/react_router.useNavigation) returns the current navigation state: it can be one of `"idle"`, `"loading"` or `"submitting"`.

In our case, we add a `"loading"` class to the main part of the app if we're not idle. The CSS then adds a nice fade after a short delay (to avoid flickering the UI for fast loads). You could do anything you want though, like show a spinner or loading bar across the top.

![](https://reactrouter.com/_docs/v7_address_book_tutorial/18.webp)

## Deleting Records

If we review code in the contact route, we can find the delete button looks like this:

```
<Form
  action="destroy"
  method="post"
  onSubmit={(event) => {
    const response = confirm(
      "Please confirm you want to delete this record."
    );
    if (!response) {
      event.preventDefault();
    }
  }}
>
  <button type="submit">Delete</button>
</Form>

```

Copy code to clipboard

Note the `action` points to `"destroy"`. Like `<Link to>`, `<Form action>` can take a _relative_ value. Since the form is rendered in the route `contacts/:contactId`, then a relative action with `destroy` will submit the form to `contacts/:contactId/destroy` when clicked.

At this point you should know everything you need to know to make the delete button work. Maybe give it a shot before moving on? You'll need:

1. A new route
2. An `action` at that route
3. `deleteContact` from `app/data.ts`
4. `redirect` to somewhere after

👉 **Configure the "destroy" route module**

```
touch app/routes/destroy-contact.tsx

```

Copy code to clipboard

```
export default [\
  // existing routes\
  route(\
    "contacts/:contactId/destroy",\
    "routes/destroy-contact.tsx"\
  ),\
  // existing routes\
] satisfies RouteConfig;

```

Copy code to clipboard

👉 **Add the destroy action**

```
import { redirect } from "react-router";
import type { Route } from "./+types/destroy-contact";

import { deleteContact } from "../data";

export async function action({ params }: Route.ActionArgs) {
  await deleteContact(params.contactId);
  return redirect("/");
}

```

Copy code to clipboard

Alright, navigate to a record and click the "Delete" button. It works!

> 😅 I'm still confused why this all works

When the user clicks the submit button:

1. `<Form>` prevents the default browser behavior of sending a new document `POST` request to the server, but instead emulates the browser by creating a `POST` request with client side routing and [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch)
2. The `<Form action="destroy">` matches the new route at `contacts/:contactId/destroy` and sends it the request
3. After the `action` redirects, React Router calls all the `loader` s for the data on the page to get the latest values (this is "revalidation"). `loaderData` in `routes/contact.tsx` now has new values and causes the components to update!

Add a `Form`, add an `action`, React Router does the rest.

## Cancel Button

On the edit page we've got a cancel button that doesn't do anything yet. We'd like it to do the same thing as the browser's back button.

We'll need a click handler on the button as well as [`useNavigate`](https://api.reactrouter.com/v7/functions/react_router.useNavigate).

👉 **Add the cancel button click handler with `useNavigate`**

```
import { Form, redirect, useNavigate } from "react-router";
// existing imports & exports

export default function EditContact({
  loaderData,
}: Route.ComponentProps) {
  const { contact } = loaderData;
  const navigate = useNavigate();

  return (
    <Form key={contact.id} id="contact-form" method="post">
      {/* existing elements */}
      <p>
        <button type="submit">Save</button>
        <button onClick={() => navigate(-1)} type="button">
          Cancel
        </button>
      </p>
    </Form>
  );
}

```

Copy code to clipboard

Now when the user clicks "Cancel", they'll be sent back one entry in the browser's history.

> 🧐 Why is there no `event.preventDefault()` on the button?

A `<button type="button">`, while seemingly redundant, is the HTML way of preventing a button from submitting its form.

Two more features to go. We're on the home stretch!

## `URLSearchParams` and `GET` Submissions

All of our interactive UI so far have been either links that change the URL or `form` s that post data to `action` functions. The search field is interesting because it's a mix of both: it's a `form`, but it only changes the URL, it doesn't change data.

Let's see what happens when we submit the search form:

👉 **Type a name into the search field and hit the enter key**

Note the browser's URL now contains your query in the URL as [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams):

```
http://localhost:5173/?q=ryan

```

Since it's not `<Form method="post">`, React Router emulates the browser by serializing the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) into the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) instead of the request body.

`loader` functions have access to the search params from the `request`. Let's use it to filter the list:

👉 **Filter the list if there are `URLSearchParams`**

```
// existing imports & exports

export async function loader({
  request,
}: Route.LoaderArgs) {
  const url = new URL(request.url);
  const q = url.searchParams.get("q");
  const contacts = await getContacts(q);
  return { contacts };
}

// existing code

```

Copy code to clipboard

![](https://reactrouter.com/_docs/v7_address_book_tutorial/19.webp)

Because this is a `GET`, not a `POST`, React Router _does not_ call the `action` function. Submitting a `GET` `form` is the same as clicking a link: only the URL changes.

This also means it's a normal page navigation. You can click the back button to get back to where you were.

## Synchronizing URLs to Form State

There are a couple of UX issues here that we can take care of quickly.

1. If you click back after a search, the form field still has the value you entered even though the list is no longer filtered.
2. If you refresh the page after searching, the form field no longer has the value in it, even though the list is filtered

In other words, the URL and our input's state are out of sync.

Let's solve (2) first and start the input with the value from the URL.

👉 **Return `q` from your `loader`, set it as the input's default value**

```
// existing imports & exports

export async function loader({
  request,
}: Route.LoaderArgs) {
  const url = new URL(request.url);
  const q = url.searchParams.get("q");
  const contacts = await getContacts(q);
  return { contacts, q };
}

export default function SidebarLayout({
  loaderData,
}: Route.ComponentProps) {
  const { contacts, q } = loaderData;
  const navigation = useNavigation();

  return (
    <>
      <div id="sidebar">
        {/* existing elements */}
        <div>
          <Form id="search-form" role="search">
            <input
              aria-label="Search contacts"
              defaultValue={q || ""}
              id="q"
              name="q"
              placeholder="Search"
              type="search"
            />
            {/* existing elements */}
          </Form>
          {/* existing elements */}
        </div>
        {/* existing elements */}
      </div>
      {/* existing elements */}
    </>
  );
}

```

Copy code to clipboard

The input field will show the query if you refresh the page after a search now.

Now for problem (1), clicking the back button and updating the input. We can bring in `useEffect` from React to manipulate the input's value in the DOM directly.

👉 **Synchronize input value with the `URLSearchParams`**

```
// existing imports
import { useEffect } from "react";

// existing imports & exports

export default function SidebarLayout({
  loaderData,
}: Route.ComponentProps) {
  const { contacts, q } = loaderData;
  const navigation = useNavigation();

  useEffect(() => {
    const searchField = document.getElementById("q");
    if (searchField instanceof HTMLInputElement) {
      searchField.value = q || "";
    }
  }, [q]);

  // existing code
}

```

Copy code to clipboard

> 🤔 Shouldn't you use a controlled component and React State for this?

You could certainly do this as a controlled component. You will have more synchronization points, but it's up to you.

Expand this to see what it would look like

```
// existing imports
import { useEffect, useState } from "react";

// existing imports & exports

export default function SidebarLayout({
  loaderData,
}: Route.ComponentProps) {
  const { contacts, q } = loaderData;
  const navigation = useNavigation();
  // the query now needs to be kept in state
  const [query, setQuery] = useState(q || "");

  // we still have a `useEffect` to synchronize the query
  // to the component state on back/forward button clicks
  useEffect(() => {
    setQuery(q || "");
  }, [q]);

  return (
    <>
      <div id="sidebar">
        {/* existing elements */}
        <div>
          <Form id="search-form" role="search">
            <input
              aria-label="Search contacts"
              id="q"
              name="q"
              // synchronize user's input to component state
              onChange={(event) =>
                setQuery(event.currentTarget.value)
              }
              placeholder="Search"
              type="search"
              // switched to `value` from `defaultValue`
              value={query}
            />
            {/* existing elements */}
          </Form>
          {/* existing elements */}
        </div>
        {/* existing elements */}
      </div>
      {/* existing elements */}
    </>
  );
}

```

Copy code to clipboard

Alright, you should now be able to click the back/forward/refresh buttons and the input's value should be in sync with the URL and results.

## Submitting `Form`'s `onChange`

We've got a product decision to make here. Sometimes you want the user to submit the `form` to filter some results, other times you want to filter as the user types. We've already implemented the first, so let's see what it's like for the second.

We've seen `useNavigate` already, we'll use its cousin, [`useSubmit`](https://api.reactrouter.com/v7/functions/react_router.useSubmit), for this.

```
import {
  Form,
  Link,
  NavLink,
  Outlet,
  useNavigation,
  useSubmit,
} from "react-router";
// existing imports & exports

export default function SidebarLayout({
  loaderData,
}: Route.ComponentProps) {
  const { contacts, q } = loaderData;
  const navigation = useNavigation();
  const submit = useSubmit();

  // existing code

  return (
    <>
      <div id="sidebar">
        {/* existing elements */}
        <div>
          <Form
            id="search-form"
            onChange={(event) =>
              submit(event.currentTarget)
            }
            role="search"
          >
            {/* existing elements */}
          </Form>
          {/* existing elements */}
        </div>
        {/* existing elements */}
      </div>
      {/* existing elements */}
    </>
  );
}

```

Copy code to clipboard

As you type, the `form` is automatically submitted now!

Note the argument to [`submit`](https://api.reactrouter.com/v7/functions/react_router.useSubmit). The `submit` function will serialize and submit any form you pass to it. We're passing in `event.currentTarget`. The `currentTarget` is the DOM node the event is attached to (the `form`).

## Adding Search Spinner

In a production app, it's likely this search will be looking for records in a database that is too large to send all at once and filter client side. That's why this demo has some faked network latency.

Without any loading indicator, the search feels kinda sluggish. Even if we could make our database faster, we'll always have the user's network latency in the way and out of our control.

For a better user experience, let's add some immediate UI feedback for the search. We'll use [`useNavigation`](https://api.reactrouter.com/v7/functions/react_router.useNavigation) again.

👉 **Add a variable to know if we're searching**

```
// existing imports & exports

export default function SidebarLayout({
  loaderData,
}: Route.ComponentProps) {
  const { contacts, q } = loaderData;
  const navigation = useNavigation();
  const submit = useSubmit();
  const searching =
    navigation.location &&
    new URLSearchParams(navigation.location.search).has(
      "q"
    );

  // existing code
}

```

Copy code to clipboard

When nothing is happening, `navigation.location` will be `undefined`, but when the user navigates it will be populated with the next location while data loads. Then we check if they're searching with `location.search`.

👉 **Add classes to search form elements using the new `searching` state**

```
// existing imports & exports

export default function SidebarLayout({
  loaderData,
}: Route.ComponentProps) {
  // existing code

  return (
    <>
      <div id="sidebar">
        {/* existing elements */}
        <div>
          <Form
            id="search-form"
            onChange={(event) =>
              submit(event.currentTarget)
            }
            role="search"
          >
            <input
              aria-label="Search contacts"
              className={searching ? "loading" : ""}
              defaultValue={q || ""}
              id="q"
              name="q"
              placeholder="Search"
              type="search"
            />
            <div
              aria-hidden
              hidden={!searching}
              id="search-spinner"
            />
          </Form>
          {/* existing elements */}
        </div>
        {/* existing elements */}
      </div>
      {/* existing elements */}
    </>
  );
}

```

Copy code to clipboard

Bonus points, avoid fading out the main screen when searching:

```
// existing imports & exports

export default function SidebarLayout({
  loaderData,
}: Route.ComponentProps) {
  // existing code

  return (
    <>
      {/* existing elements */}
      <div
        className={
          navigation.state === "loading" && !searching
            ? "loading"
            : ""
        }
        id="detail"
      >
        <Outlet />
      </div>
      {/* existing elements */}
    </>
  );
}

```

Copy code to clipboard

You should now have a nice spinner on the left side of the search input.

![](https://reactrouter.com/_docs/v7_address_book_tutorial/20.webp)

## Managing the History Stack

Since the form is submitted for every keystroke, typing the characters "alex" and then deleting them with backspace results in a huge history stack 😂. We definitely don't want this:

![](https://reactrouter.com/_docs/v7_address_book_tutorial/21.webp)

We can avoid this by _replacing_ the current entry in the history stack with the next page, instead of pushing into it.

👉 **Use `replace` in `submit`**

```
// existing imports & exports

export default function SidebarLayout({
  loaderData,
}: Route.ComponentProps) {
  // existing code

  return (
    <>
      <div id="sidebar">
        {/* existing elements */}
        <div>
          <Form
            id="search-form"
            onChange={(event) => {
              const isFirstSearch = q === null;
              submit(event.currentTarget, {
                replace: !isFirstSearch,
              });
            }}
            role="search"
          >
            {/* existing elements */}
          </Form>
          {/* existing elements */}
        </div>
        {/* existing elements */}
      </div>
      {/* existing elements */}
    </>
  );
}

```

Copy code to clipboard

After a quick check if this is the first search or not, we decide to replace. Now the first search will add a new entry, but every keystroke after that will replace the current entry. Instead of clicking back 7 times to remove the search, users only have to click back once.

## `Form` s Without Navigation

So far all of our forms have changed the URL. While these user flows are common, it's equally common to want to submit a form _without_ causing a navigation.

For these cases, we have [`useFetcher`](https://api.reactrouter.com/v7/functions/react_router.useFetcher). It allows us to communicate with `action` s and `loader` s without causing a navigation.

The ★ button on the contact page makes sense for this. We aren't creating or deleting a new record, and we don't want to change pages. We simply want to change the data on the page we're looking at.

👉 **Change the `<Favorite>` form to a fetcher form**

```
import { Form, useFetcher } from "react-router";

// existing imports & exports

function Favorite({
  contact,
}: {
  contact: Pick<ContactRecord, "favorite">;
}) {
  const fetcher = useFetcher();
  const favorite = contact.favorite;

  return (
    <fetcher.Form method="post">
      <button
        aria-label={
          favorite
            ? "Remove from favorites"
            : "Add to favorites"
        }
        name="favorite"
        value={favorite ? "false" : "true"}
      >
        {favorite ? "★" : "☆"}
      </button>
    </fetcher.Form>
  );
}

```

Copy code to clipboard

This form will no longer cause a navigation, but simply fetch to the `action`. Speaking of which ... this won't work until we create the `action`.

👉 **Create the `action`**

```
// existing imports
import { getContact, updateContact } from "../data";
// existing imports

export async function action({
  params,
  request,
}: Route.ActionArgs) {
  const formData = await request.formData();
  return updateContact(params.contactId, {
    favorite: formData.get("favorite") === "true",
  });
}

// existing code

```

Copy code to clipboard

Alright, we're ready to click the star next to the user's name!

![](https://reactrouter.com/_docs/v7_address_book_tutorial/22.webp)

Check that out, both stars automatically update. Our new `<fetcher.Form method="post">` works almost exactly like the `<Form>` we've been using: it calls the action and then all data is revalidated automatically — even your errors will be caught the same way.

There is one key difference though, it's not a navigation, so the URL doesn't change and the history stack is unaffected.

## Optimistic UI

You probably noticed the app felt kind of unresponsive when we clicked the favorite button from the last section. Once again, we added some network latency because you're going to have it in the real world.

To give the user some feedback, we could put the star into a loading state with `fetcher.state` (a lot like `navigation.state` from before), but we can do something even better this time. We can use a strategy called "Optimistic UI".

The fetcher knows the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) being submitted to the `action`, so it's available to you on `fetcher.formData`. We'll use that to immediately update the star's state, even though the network hasn't finished. If the update eventually fails, the UI will revert to the real data.

👉 **Read the optimistic value from `fetcher.formData`**

```
// existing code

function Favorite({
  contact,
}: {
  contact: Pick<ContactRecord, "favorite">;
}) {
  const fetcher = useFetcher();
  const favorite = fetcher.formData
    ? fetcher.formData.get("favorite") === "true"
    : contact.favorite;

  return (
    <fetcher.Form method="post">
      <button
        aria-label={
          favorite
            ? "Remove from favorites"
            : "Add to favorites"
        }
        name="favorite"
        value={favorite ? "false" : "true"}
      >
        {favorite ? "★" : "☆"}
      </button>
    </fetcher.Form>
  );
}

```

Copy code to clipboard

Now the star _immediately_ changes to the new state when you click it.

* * *

That's it! Thanks for giving React Router a shot. We hope this tutorial gives you a solid start to build great user experiences. There's a lot more you can do, so make sure to check out all the [APIs](https://api.reactrouter.com/v7/modules/react_router) 😀

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/tutorials/address-book.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Navigate

# `<Navigate>`

Type declaration

```
declare function Navigate(props: NavigateProps): null;

interface NavigateProps {
  to: To;
  replace?: boolean;
  state?: any;
  relative?: RelativeRoutingType;
}

```

Copy code to clipboard

A `<Navigate>` element changes the current location when it is rendered. It's a component wrapper around [`useNavigate`](https://reactrouter.com/6.30.0/hooks/use-navigate), and accepts all the same arguments as props.

Having a component-based version of the `useNavigate` hook makes it easier to use this feature in a [`React.Component`](https://reactjs.org/docs/react-component.html) subclass where hooks are not able to be used.

```
import * as React from "react";
import { Navigate } from "react-router-dom";

class LoginForm extends React.Component {
  state = { user: null, error: null };

  async handleSubmit(event) {
    event.preventDefault();
    try {
      let user = await login(event.target);
      this.setState({ user });
    } catch (error) {
      this.setState({ error });
    }
  }

  render() {
    let { user, error } = this.state;
    return (
      <div>
        {error && <p>{error.message}</p>}
        {user && (
          <Navigate to="/dashboard" replace={true} />
        )}
        <form
          onSubmit={(event) => this.handleSubmit(event)}
        >
          <input type="text" name="username" />
          <input type="password" name="password" />
        </form>
      </div>
    );
  }
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/how-to/headers) [dev](https://reactrouter.com/dev/how-to/headers)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

HTTP Headers

On this page

- [From Route Modules](https://reactrouter.com/how-to/headers#from-route-modules)
- [From loaders and actions](https://reactrouter.com/how-to/headers#from-loaders-and-actions)
- [1\. Wrap your return value in `data`](https://reactrouter.com/how-to/headers#1-wrap-your-return-value-in-data)
- [2\. Return from `headers` export](https://reactrouter.com/how-to/headers#2-return-from-headers-export)
- [Merging with parent headers](https://reactrouter.com/how-to/headers#merging-with-parent-headers)
- [Appending](https://reactrouter.com/how-to/headers#appending)
- [Setting](https://reactrouter.com/how-to/headers#setting)
- [From `entry.server.tsx`](https://reactrouter.com/how-to/headers#from-entryservertsx)

- [From Route Modules](https://reactrouter.com/how-to/headers#from-route-modules)
- [From loaders and actions](https://reactrouter.com/how-to/headers#from-loaders-and-actions)
- [1\. Wrap your return value in `data`](https://reactrouter.com/how-to/headers#1-wrap-your-return-value-in-data)
- [2\. Return from `headers` export](https://reactrouter.com/how-to/headers#2-return-from-headers-export)
- [Merging with parent headers](https://reactrouter.com/how-to/headers#merging-with-parent-headers)
- [Appending](https://reactrouter.com/how-to/headers#appending)
- [Setting](https://reactrouter.com/how-to/headers#setting)
- [From `entry.server.tsx`](https://reactrouter.com/how-to/headers#from-entryservertsx)

# HTTP Headers

Headers are primarily defined with the route module `headers` export. You can also set headers in `entry.server.tsx`.

## From Route Modules

```
import { Route } from "./+types/some-route";

export function headers(_: Route.HeadersArgs) {
  return {
    "Content-Security-Policy": "default-src 'self'",
    "X-Frame-Options": "DENY",
    "X-Content-Type-Options": "nosniff",
    "Cache-Control": "max-age=3600, s-maxage=86400",
  };
}

```

Copy code to clipboard

You can return either a [`Headers`](https://developer.mozilla.org/en-US/docs/Web/API/Headers) instance or `HeadersInit`.

## From loaders and actions

When the header is dependent on loader data, loaders and actions can also set headers.

### 1\. Wrap your return value in `data`

```
import { data } from "react-router";

export async function loader({ params }: LoaderArgs) {
  let [page, ms] = await fakeTimeCall(
    await getPage(params.id)
  );

  return data(page, {
    headers: {
      "Server-Timing": `page;dur=${ms};desc="Page query"`,
    },
  });
}

```

Copy code to clipboard

### 2\. Return from `headers` export

Headers from loaders and actions are not sent automatically. You must explicitly return them from the `headers` export.

```
export function headers({
  actionHeaders,
  loaderHeaders,
}: HeadersArgs) {
  return actionHeaders ? actionHeaders : loaderHeaders;
}

```

Copy code to clipboard

One notable exception is `Set-Cookie` headers, which are automatically preserved from `headers`, `loader`, and `action` in parent routes, even without exporting `headers` from the child route.

## Merging with parent headers

Consider these nested routes

```
route("pages", "pages-layout-with-nav.tsx", [\
  route(":slug", "page.tsx"),\
]);

```

Copy code to clipboard

If both route modules want to set headers, the headers from the deepest matching route will be sent.

When you need to keep both the parent and the child headers, you need to merge them in the child route.

### Appending

The easiest way is to simply append to the parent headers. This avoids overwriting a header the parent may have set and both are important.

```
export function headers({ parentHeaders }: HeadersArgs) {
  parentHeaders.append(
    "Permissions-Policy: geolocation=()"
  );
  return parentHeaders;
}

```

Copy code to clipboard

### Setting

Sometimes it's important to overwrite the parent header. Do this with `set` instead of `append`:

```
export function headers({ parentHeaders }: HeadersArgs) {
  parentHeaders.set(
    "Cache-Control",
    "max-age=3600, s-maxage=86400"
  );
  return parentHeaders;
}

```

Copy code to clipboard

You can avoid the need to merge headers by only defining headers in "leaf routes" (index routes and child routes without children) and not in parent routes.

## From `entry.server.tsx`

The `handleRequest` export receives the headers from the route module as an argument. You can append global headers here.

```
export default function handleRequest(
  request,
  responseStatusCode,
  responseHeaders,
  routerContext,
  loadContext
) {
  // set, append global headers
  responseHeaders.set(
    "X-App-Version",
    routerContext.manifest.version
  );

  return new Response(await getStream(), {
    headers: responseHeaders,
    status: responseStatusCode,
  });
}

```

Copy code to clipboard

If you don't have an `entry.server.tsx` run the `reveal` command:

```
react-router reveal

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/how-to/headers.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/framework/rendering) [dev](https://reactrouter.com/dev/start/framework/rendering)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Rendering Strategies

# Rendering Strategies

There are three rendering strategies in React Router:

- Client Side Rendering
- Server Side Rendering
- Static Pre-rendering

## Client Side Rendering

Routes are always client side rendered as the user navigates around the app. If you're looking to build a Single Page App, disable server rendering:

```
import type { Config } from "@react-router/dev/config";

export default {
  ssr: false,
} satisfies Config;

```

Copy code to clipboard

## Server Side Rendering

```
import type { Config } from "@react-router/dev/config";

export default {
  ssr: true,
} satisfies Config;

```

Copy code to clipboard

Server side rendering requires a deployment that supports it. Though it's a global setting, individual routes can still be statically pre-rendered. Routes can also use client data loading with `clientLoader` to avoid server rendering/fetching for their portion of the UI.

## Static Pre-rendering

```
import type { Config } from "@react-router/dev/config";

export default {
  // return a list of URLs to prerender at build time
  async prerender() {
    return ["/", "/about", "/contact"];
  },
} satisfies Config;

```

Copy code to clipboard

Pre-rendering is a build-time operation that generates static HTML and client navigation data payloads for a list of URLs. This is useful for SEO and performance, especially for deployments without server rendering. When pre-rendering, route module loaders are used to fetch data at build time.

* * *

Next: [Data Loading](https://reactrouter.com/start/framework/data-loading)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/framework/rendering.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Routes

# `<Routes>`

Rendered anywhere in the app, `<Routes>` will match a set of child routes from the current [location](https://reactrouter.com/6.30.0/utils/location).

```
interface RoutesProps {
  children?: React.ReactNode;
  location?: Partial<Location> | string;
}

<Routes location>
  <Route />
</Routes>;

```

Copy code to clipboard

If you're using a data router like [`createBrowserRouter`](https://reactrouter.com/6.30.0/routers/create-browser-router) it is uncommon to use this component as routes defined as part of a descendant `<Routes>` tree cannot leverage the [Data APIs](https://reactrouter.com/6.30.0/routers/picking-a-router#data-apis) available to [`RouterProvider`](https://reactrouter.com/6.30.0/routers/router-provider) apps. You **can and should** use this component within your `RouterProvider` application [while you are migrating](https://reactrouter.com/6.30.0/upgrading/v6-data).

Whenever the location changes, `<Routes>` looks through all its child routes to find the best match and renders that branch of the UI. `<Route>` elements may be nested to indicate nested UI, which also correspond to nested URL paths. Parent routes render their child routes by rendering an [`<Outlet>`](https://reactrouter.com/6.30.0/components/outlet).

```
<Routes>
  <Route path="/" element={<Dashboard />}>
    <Route
      path="messages"
      element={<DashboardMessages />}
    />
    <Route path="tasks" element={<DashboardTasks />} />
  </Route>
  <Route path="about" element={<AboutPage />} />
</Routes>

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)# React Router API Reference

[![npm package](https://img.shields.io/npm/v/react-router-dom.svg?style=flat-square)](https://www.npmjs.org/package/react-router-dom)[![build](https://img.shields.io/github/actions/workflow/status/remix-run/react-router/test.yml?branch=dev&style=square)](https://github.com/remix-run/react-router/actions/workflows/test.yml)

React Router is a multi-strategy router for React bridging the gap from React 18 to React 19. You can use it maximally as a React framework or minimally as a library with your own architecture.

- [Getting Started - Framework](https://reactrouter.com/start/framework/installation)
- [Getting Started - Library](https://reactrouter.com/start/library/installation)
- [Upgrade from v6](https://reactrouter.com/upgrading/v6)
- [Upgrade from Remix](https://reactrouter.com/upgrading/remix)
- [Changelog](https://github.com/remix-run/react-router/blob/main/CHANGELOG.md)

## Packages [Permalink](https://api.reactrouter.com/dev/\#md:packages)

- [react-router](https://api.reactrouter.com/dev/modules/react_router)
- [@react-router/dev](https://api.reactrouter.com/dev/modules/_react_router_dev)
- [@react-router/node](https://api.reactrouter.com/dev/modules/_react_router_node)
- [@react-router/cloudflare](https://api.reactrouter.com/dev/modules/_react_router_cloudflare)
- [@react-router/serve](https://api.reactrouter.com/dev/modules/_react_router_serve)
- [@react-router/fs-routes](https://api.reactrouter.com/dev/modules/_react_router_fs_routes)

## Previous Versions [Permalink](https://api.reactrouter.com/dev/\#md:previous-versions)

- [v6](https://reactrouter.com/v6)
- [v5](https://v5.reactrouter.com/)

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

### On This Page

[Packages](https://api.reactrouter.com/dev/#md:packages) [Previous Versions](https://api.reactrouter.com/dev/#md:previous-versions)

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/explanation/type-safety) [dev](https://reactrouter.com/dev/explanation/type-safety)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Type Safety

# Type Safety

If you haven't done so already, check out our guide for [setting up type safety](https://reactrouter.com/how-to/route-module-type-safety) in a new project.

React Router generates types for each route in your app to provide type safety for the route module exports.

For example, let's say you have a `products/:id` route configured:

```
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [\
  route("products/:id", "./routes/product.tsx"),\
] satisfies RouteConfig;

```

Copy code to clipboard

You can import route-specific types like so:

```
import type { Route } from "./+types/product";
// types generated for this route 👆

export function loader({ params }: Route.LoaderArgs) {
  //                      👆 { id: string }
  return { planet: `world #${params.id}` };
}

export default function Component({
  loaderData, // 👈 { planet: string }
}: Route.ComponentProps) {
  return <h1>Hello, {loaderData.planet}!</h1>;
}

```

Copy code to clipboard

## How it works

React Router's type generation executes your route config ( `app/routes.ts` by default) to determine the routes for your app.
It then generates a `+types/<route file>.d.ts` for each route within a special `.react-router/types/` directory.
With [`rootDirs` configured](https://reactrouter.com/how-to/route-module-type-safety), TypeScript can import these generated files as if they were right next to their corresponding route modules.

For a deeper dive into some of the design decisions, check out our [type inference decision doc](https://github.com/remix-run/react-router/blob/dev/decisions/0012-type-inference.md).

## `typegen` command

You can manually generate types with the `typegen` command:

```sh
react-router typegen

```

The following types are generated for each route:

- `LoaderArgs`
- `ClientLoaderArgs`
- `ActionArgs`
- `ClientActionArgs`
- `HydrateFallbackProps`
- `ComponentProps` (for the `default` export)
- `ErrorBoundaryProps`

### --watch

If you run `react-router dev` — or if your custom server calls `vite.createServer` — then React Router's Vite plugin is already generating up-to-date types for you.
But if you really need to run type generation on its own, you can also use `--watch` to automatically regenerate types as files change:

```sh
react-router typegen --watch

```

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/explanation/type-safety.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

React Router Home

# React Router Home

React Router is a multi-strategy router for React bridging the gap from React 18 to React 19. You can use it maximally as a React framework or minimally as a library with your own architecture.

- [Getting Started - Framework](https://reactrouter.com/start/framework/installation)
- [Getting Started - Library](https://reactrouter.com/start/library/installation)

If you are caught up on future flags, upgrading from React Router v6 or Remix is generally non-breaking:

- [Upgrade from v6](https://reactrouter.com/upgrading/v6)
- [Upgrade from Remix](https://reactrouter.com/upgrading/remix)

## React Router as a Library

Like previous versions, React Router can still be used as a simple, declarative routing library. Its only job will be matching the URL to a set of components, providing access to URL data, and navigating around the app.

This strategy is popular for "Single Page Apps" that have their own frontend infrastructure and v6 apps looking for a stress free upgrade.

It's particularly good at offline + sync architectures where pending states are rare and users have long running sessions. Framework features like pending states, code splitting, server rendering, SEO, and initial page load times can be traded out for instant local-first interactions.

```
ReactDOM.createRoot(root).render(
  <BrowserRouter>
    <Routes>
      <Route path="/" element={<Home />} />
      <Route path="dashboard" element={<Dashboard />}>
        <Route index element={<RecentActivity />} />
        <Route path="project/:id" element={<Project />} />
      </Route>
    </Routes>
  </BrowserRouter>
);

```

[Get Started](https://reactrouter.com/start/library/installation) with React Router as a library.

## React Router as a framework

React Router can be used maximally as your React framework. In this setup, you'll use the React Router CLI and Vite bundler plugin for a full-stack development and deployment architecture. This enables React Router to provide a large set of features most web projects will want, including:

- Vite bundler and dev server integration
- hot module replacement
- code splitting
- route conventions with type safety
- file system or config-based routing
- data loading with type safety
- actions with type safety
- automatic revalidation of page data after actions
- SSR, SPA, and static rendering strategies
- APIs for pending states and optimistic UI
- deployment adapters

Routes are configured with `routes.ts` which enables React Router to do a lot for you. For example, it will automatically code-split each route, provide type safety for the parameters and data, and automatically load the data with access to pending states as the user navigates to it.

```
import {
  type RouteConfig,
  route,
  index,
  layout,
  prefix,
} from "@react-router/dev/routes";

export default [\
  index("./home.tsx"),\
  route("about", "./about.tsx"),\
\
  layout("./auth/layout.tsx", [\
    route("login", "./auth/login.tsx"),\
    route("register", "./auth/register.tsx"),\
  ]),\
\
  ...prefix("concerts", [\
    index("./concerts/home.tsx"),\
    route(":city", "./concerts/city.tsx"),\
    route(":city/:id", "./concerts/show.tsx"),\
    route("trending", "./concerts/trending.tsx"),\
  ]),\
] satisfies RouteConfig;

```

You'll have access to the Route Module API, which most of the other features are built on.

Loaders provide data to route components:

```
// loaders provide data to components
export async function loader({ params }: Route.LoaderArgs) {
  const [show, isLiked] = await Promise.all([\
    fakeDb.find("show", params.id),\
    fakeIsLiked(params.city),\
  ]);
  return { show, isLiked };
}

```

Components render at their configured URLs from routes.ts with the loader data passed in as a prop:

```
export default function Show({
  loaderData,
}: Route.ComponentProps) {
  const { show, isLiked } = loaderData;
  return (
    <div>
      <h1>{show.name}</h1>
      <p>{show.description}</p>

      <form method="post">
        <button
          type="submit"
          name="liked"
          value={isLiked ? 0 : 1}
        >
          {isLiked ? "Remove" : "Save"}
        </button>
      </form>
    </div>
  );
}

```

Actions can update data and trigger a revalidation of all data on
the page so your UI stays up to date automatically:

```
export async function action({
  request,
  params,
}: Route.LoaderArgs) {
  const formData = await request.formData();
  await fakeSetLikedShow(formData.get("liked"));
  return { ok: true };
}

```

Route modules also provide conventions for SEO, asset loading, error boundaries, and more.

[Get Started](https://reactrouter.com/start/framework/installation) with React Router as a framework.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/index.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/library/routing) [dev](https://reactrouter.com/dev/start/library/routing)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Routing

On this page

- [Configuring Routes](https://reactrouter.com/start/library/routing#configuring-routes)
- [Nested Routes](https://reactrouter.com/start/library/routing#nested-routes)
- [Layout Routes](https://reactrouter.com/start/library/routing#layout-routes)
- [Index Routes](https://reactrouter.com/start/library/routing#index-routes)
- [Route Prefixes](https://reactrouter.com/start/library/routing#route-prefixes)
- [Dynamic Segments](https://reactrouter.com/start/library/routing#dynamic-segments)
- [Optional Segments](https://reactrouter.com/start/library/routing#optional-segments)
- [Splats](https://reactrouter.com/start/library/routing#splats)
- [Linking](https://reactrouter.com/start/library/routing#linking)

- [Configuring Routes](https://reactrouter.com/start/library/routing#configuring-routes)
- [Nested Routes](https://reactrouter.com/start/library/routing#nested-routes)
- [Layout Routes](https://reactrouter.com/start/library/routing#layout-routes)
- [Index Routes](https://reactrouter.com/start/library/routing#index-routes)
- [Route Prefixes](https://reactrouter.com/start/library/routing#route-prefixes)
- [Dynamic Segments](https://reactrouter.com/start/library/routing#dynamic-segments)
- [Optional Segments](https://reactrouter.com/start/library/routing#optional-segments)
- [Splats](https://reactrouter.com/start/library/routing#splats)
- [Linking](https://reactrouter.com/start/library/routing#linking)

# Routing

## Configuring Routes

Routes are configured by rendering `<Routes>` and `<Route>` that couple URL segments to UI elements.

```
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter, Routes, Route } from "react-router";
import App from "./app";

const root = document.getElementById("root");

ReactDOM.createRoot(root).render(
  <BrowserRouter>
    <Routes>
      <Route path="/" element={<App />} />
    </Routes>
  </BrowserRouter>
);

```

Copy code to clipboard

Here's a larger sample config:

```
<Routes>
  <Route index element={<Home />} />
  <Route path="about" element={<About />} />

  <Route element={<AuthLayout />}>
    <Route path="login" element={<Login />} />
    <Route path="register" element={<Register />} />
  </Route>

  <Route path="concerts">
    <Route index element={<ConcertsHome />} />
    <Route path=":city" element={<City />} />
    <Route path="trending" element={<Trending />} />
  </Route>
</Routes>

```

Copy code to clipboard

## Nested Routes

Routes can be nested inside parent routes.

```
<Routes>
  <Route path="dashboard" element={<Dashboard />}>
    <Route index element={<Home />} />
    <Route path="settings" element={<Settings />} />
  </Route>
</Routes>

```

Copy code to clipboard

The path of the parent is automatically included in the child, so this config creates both `"/dashboard"` and `"/dashboard/settings"` URLs.

Child routes are rendered through the `<Outlet/>` in the parent route.

```
import { Outlet } from "react-router";

export default function Dashboard() {
  return (
    <div>
      <h1>Dashboard</h1>
      {/* will either be <Home/> or <Settings/> */}
      <Outlet />
    </div>
  );
}

```

Copy code to clipboard

## Layout Routes

Routes _without_ a `path` create new nesting for their children, but they don't add any segments to the URL.

```
<Routes>
  <Route element={<MarketingLayout />}>
    <Route index element={<MarketingHome />} />
    <Route path="contact" element={<Contact />} />
  </Route>

  <Route path="projects">
    <Route index element={<ProjectsHome />} />
    <Route element={<ProjectsLayout />}>
      <Route path=":pid" element={<Project />} />
      <Route path=":pid/edit" element={<EditProject />} />
    </Route>
  </Route>
</Routes>

```

Copy code to clipboard

## Index Routes

Index routes render into their parent's `<Outlet/>` at their parent's URL (like a default child route). They are configured with the `index` prop:

```
<Routes>
  <Route path="/" element={<Root />}>
    {/* renders into the outlet in <Root> at "/" */}
    <Route index element={<Home />} />

    <Route path="dashboard" element={<Dashboard />}>
      {/* renders into the outlet in <Dashboard> at "/dashboard" */}
      <Route index element={<DashboardHome />} />
      <Route path="settings" element={<Settings />} />
    </Route>
  </Route>
</Routes>

```

Copy code to clipboard

Note that index routes can't have children. If you're expecting that behavior, you probably want a [layout route](https://reactrouter.com/start/library/routing#layout-routes).

## Route Prefixes

A `<Route path>` _without_ an `element` prop adds a path prefix to its child routes, without introducing a parent layout.

```
<Route path="projects">
  <Route index element={<ProjectsHome />} />
  <Route element={<ProjectsLayout />}>
    <Route path=":pid" element={<Project />} />
    <Route path=":pid/edit" element={<EditProject />} />
  </Route>
</Route>

```

Copy code to clipboard

## Dynamic Segments

If a path segment starts with `:` then it becomes a "dynamic segment". When the route matches the URL, the dynamic segment will be parsed from the URL and provided as `params` to other router APIs like `useParams`.

```
<Route path="teams/:teamId" element={<Team />} />

```

Copy code to clipboard

```
import { useParams } from "react-router";

export default function Team() {
  let params = useParams();
  // params.teamId
}

```

Copy code to clipboard

You can have multiple dynamic segments in one route path:

```
<Route
  path="/c/:categoryId/p/:productId"
  element={<Product />}
/>

```

Copy code to clipboard

```
import { useParams } from "react-router";

export default function CategoryProduct() {
  let { categoryId, productId } = useParams();
  // ...
}

```

Copy code to clipboard

You should ensure that all dynamic segments in a given path are unique. Otherwise, as the `params` object is populated - latter dynamic segment values will override earlier values.

## Optional Segments

You can make a route segment optional by adding a `?` to the end of the segment.

```
<Route path=":lang?/categories" element={<Categories />} />

```

Copy code to clipboard

You can have optional static segments, too:

```
<Route path="users/:userId/edit?" element={<User />} />

```

Copy code to clipboard

## Splats

Also known as "catchall" and "star" segments. If a route path pattern ends with `/*` then it will match any characters following the `/`, including other `/` characters.

```
<Route path="files/*" element={<File />} />

```

Copy code to clipboard

```
let params = useParams();
// params["*"] will contain the remaining URL after files/
let filePath = params["*"];

```

Copy code to clipboard

You can destructure the `*`, you just have to assign it a new name. A common name is `splat`:

```
let { "*": splat } = useParams();

```

Copy code to clipboard

## Linking

Link to routes from your UI with `Link` and `NavLink`

```
import { NavLink, Link } from "react-router";

function Header() {
  return (
    <nav>
      {/* NavLink makes it easy to show active states */}
      <NavLink
        to="/"
        className={({ isActive }) =>
          isActive ? "active" : ""
        }
      >
        Home
      </NavLink>

      <Link to="/concerts/salt-lake-city">Concerts</Link>
    </nav>
  );
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/library/routing.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/framework/navigating) [dev](https://reactrouter.com/dev/start/framework/navigating)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Navigating

On this page

- [NavLink](https://reactrouter.com/start/framework/navigating#navlink)
- [Link](https://reactrouter.com/start/framework/navigating#link)
- [Form](https://reactrouter.com/start/framework/navigating#form)
- [redirect](https://reactrouter.com/start/framework/navigating#redirect)
- [useNavigate](https://reactrouter.com/start/framework/navigating#usenavigate)

- [NavLink](https://reactrouter.com/start/framework/navigating#navlink)
- [Link](https://reactrouter.com/start/framework/navigating#link)
- [Form](https://reactrouter.com/start/framework/navigating#form)
- [redirect](https://reactrouter.com/start/framework/navigating#redirect)
- [useNavigate](https://reactrouter.com/start/framework/navigating#usenavigate)

# Navigating

Users navigate your application with `<Link>`, `<NavLink>`, `<Form>`, `redirect`, and `useNavigate`.

## NavLink

This component is for navigation links that need to render active and pending states.

```
import { NavLink } from "react-router";

export function MyAppNav() {
  return (
    <nav>
      <NavLink to="/" end>
        Home
      </NavLink>
      <NavLink to="/trending" end>
        Trending Concerts
      </NavLink>
      <NavLink to="/concerts">All Concerts</NavLink>
      <NavLink to="/account">Account</NavLink>
    </nav>
  );
}

```

Copy code to clipboard

`NavLink` renders default class names for different states for easy styling with CSS:

```
a.active {
  color: red;
}

a.pending {
  animate: pulse 1s infinite;
}

a.transitioning {
  /* css transition is running */
}

```

Copy code to clipboard

It also has callback props on `className`, `style`, and `children` with the states for inline styling or conditional rendering:

```
// className
<NavLink
  to="/messages"
  className={({ isActive, isPending, isTransitioning }) =>
    [\
      isPending ? "pending" : "",\
      isActive ? "active" : "",\
      isTransitioning ? "transitioning" : "",\
    ].join(" ")
  }
>
  Messages
</NavLink>

```

Copy code to clipboard

```
// style
<NavLink
  to="/messages"
  style={({ isActive, isPending, isTransitioning }) => {
    return {
      fontWeight: isActive ? "bold" : "",
      color: isPending ? "red" : "black",
      viewTransitionName: isTransitioning ? "slide" : "",
    };
  }}
>
  Messages
</NavLink>

```

Copy code to clipboard

```
// children
<NavLink to="/tasks">
  {({ isActive, isPending, isTransitioning }) => (
    <span className={isActive ? "active" : ""}>Tasks</span>
  )}
</NavLink>

```

Copy code to clipboard

## Link

Use `<Link>` when the link doesn't need active styling:

```
import { Link } from "react-router";

export function LoggedOutMessage() {
  return (
    <p>
      You've been logged out.{" "}
      <Link to="/login">Login again</Link>
    </p>
  );
}

```

Copy code to clipboard

## Form

The form component can be used to navigate with `URLSearchParams` provided by the user.

```
<Form action="/search">
  <input type="text" name="q" />
</Form>

```

Copy code to clipboard

If the user enters "journey" into the input and submits it, they will navigate to:

```
/search?q=journey

```

Forms with `<Form method="post" />` will also navigate to the action prop but will submit the data as `FormData` instead of `URLSearchParams`. However, it is more common to `useFetcher()` to POST form data. See [Using Fetchers](https://reactrouter.com/how-to/fetchers).

## redirect

Inside of route loaders and actions, you can return a `redirect` to another URL.

```
import { redirect } from "react-router";

export async function loader({ request }) {
  let user = await getUser(request);
  if (!user) {
    return redirect("/login");
  }
  return { userName: user.name };
}

```

Copy code to clipboard

It is common to redirect to a new record after it has been created:

```
import { redirect } from "react-router";

export async function action({ request }) {
  let formData = await request.formData();
  let project = await createProject(formData);
  return redirect(`/projects/${project.id}`);
}

```

Copy code to clipboard

## useNavigate

This hook allows the programmer to navigate the user to a new page without the user interacting. Usage of this hook should be uncommon. It's recommended to use the other APIs in this guide when possible.

Reserve usage of `useNavigate` to situations where the user is _not_ interacting but you need to navigate, for example:

- Logging them out after inactivity
- Timed UIs like quizzes, etc.

```
import { useNavigate } from "react-router";

export function useLogoutAfterInactivity() {
  let navigate = useNavigate();

  useFakeInactivityHook(() => {
    navigate("/logout");
  });
}

```

Copy code to clipboard

* * *

Next: [Pending UI](https://reactrouter.com/start/framework/pending-ui)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/framework/navigating.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Navigation

[**What's New in 6.4?** \\
v6.4 is our most exciting release yet with new data abstractions for reads, writes, and navigation hooks to easily keep your UI in sync with your data. The new feature overview will catch you up.](https://reactrouter.com/6.30.0/start/overview) [**I'm New!** \\
Start with the tutorial. It will quickly introduce you to the primary features of React Router: from configuring routes, to loading and mutating data, to pending and optimistic UI.](https://reactrouter.com/6.30.0/start/tutorial) [**I'm on v5** \\
The migration guide will help you migrate incrementally and keep shipping along the way. Or, do it all in one yolo commit! Either way, we've got you covered to start using the new features right away.](https://reactrouter.com/6.30.0/upgrading/v5) [**I'm Stuck!** \\
Running into a problem? Chances are you're not the first! Explore common questions about React Router v6.](https://reactrouter.com/6.30.0/start/faq)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.29.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Navigate

# `<Navigate>`

Type declaration

```
declare function Navigate(props: NavigateProps): null;

interface NavigateProps {
  to: To;
  replace?: boolean;
  state?: any;
  relative?: RelativeRoutingType;
}

```

Copy code to clipboard

A `<Navigate>` element changes the current location when it is rendered. It's a component wrapper around [`useNavigate`](https://reactrouter.com/6.29.0/hooks/use-navigate), and accepts all the same arguments as props.

Having a component-based version of the `useNavigate` hook makes it easier to use this feature in a [`React.Component`](https://reactjs.org/docs/react-component.html) subclass where hooks are not able to be used.

```
import * as React from "react";
import { Navigate } from "react-router-dom";

class LoginForm extends React.Component {
  state = { user: null, error: null };

  async handleSubmit(event) {
    event.preventDefault();
    try {
      let user = await login(event.target);
      this.setState({ user });
    } catch (error) {
      this.setState({ error });
    }
  }

  render() {
    let { user, error } = this.state;
    return (
      <div>
        {error && <p>{error.message}</p>}
        {user && (
          <Navigate to="/dashboard" replace={true} />
        )}
        <form
          onSubmit={(event) => this.handleSubmit(event)}
        >
          <input type="text" name="username" />
          <input type="password" name="password" />
        </form>
      </div>
    );
  }
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [@react-router/serve](https://api.reactrouter.com/v7/modules/_react_router_serve.html)

# Module @react-router/serve

Node.js application server for React Router

```sh
npm install @react-router/serve
Copy
```

### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR- [React Router API Reference](https://api.reactrouter.com/v7/modules.html)
- [react-router](https://api.reactrouter.com/v7/modules/react_router.html)
- [useFetchers](https://api.reactrouter.com/v7/functions/react_router.useFetchers.html)

# Function useFetchers

- useFetchers(): ( [Fetcher](https://api.reactrouter.com/v7/types/react_router.Fetcher.html) & {

key: string;

})\[\] [Permalink](https://api.reactrouter.com/v7/functions/react_router.useFetchers.html#useFetchers)
- Returns an array of all in-flight fetchers. This is useful for components throughout the app that didn't create the fetchers but want to use their submissions to participate in optimistic UI.



```tsx
import { useFetchers } from "react-router";

function SomeComponent() {
    const fetchers = useFetchers();
    fetchers[0].formData; // FormData
    fetchers[0].state; // etc.
    // ...
}
Copy
```




#### Returns ( [Fetcher](https://api.reactrouter.com/v7/types/react_router.Fetcher.html) & {   key: string;   })\[\]


### Settings

Member Visibility

- Protected
- Inherited
- External

ThemeOSLightDark

MMNEPVFCICPMFPCPTTAAATR![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Current Future Flags

On this page

- [Update to latest v6.x](https://reactrouter.com/6.30.0/upgrading/future#update-to-latest-v6x)
- [v7\_relativeSplatPath](https://reactrouter.com/6.30.0/upgrading/future#v7_relativesplatpath)
- [v7\_startTransition](https://reactrouter.com/6.30.0/upgrading/future#v7_starttransition)
- [v7\_fetcherPersist](https://reactrouter.com/6.30.0/upgrading/future#v7_fetcherpersist)
- [v7\_normalizeFormMethod](https://reactrouter.com/6.30.0/upgrading/future#v7_normalizeformmethod)
- [v7\_partialHydration](https://reactrouter.com/6.30.0/upgrading/future#v7_partialhydration)
- [v7\_skipActionErrorRevalidation](https://reactrouter.com/6.30.0/upgrading/future#v7_skipactionerrorrevalidation)

- [Update to latest v6.x](https://reactrouter.com/6.30.0/upgrading/future#update-to-latest-v6x)
- [v7\_relativeSplatPath](https://reactrouter.com/6.30.0/upgrading/future#v7_relativesplatpath)
- [v7\_startTransition](https://reactrouter.com/6.30.0/upgrading/future#v7_starttransition)
- [v7\_fetcherPersist](https://reactrouter.com/6.30.0/upgrading/future#v7_fetcherpersist)
- [v7\_normalizeFormMethod](https://reactrouter.com/6.30.0/upgrading/future#v7_normalizeformmethod)
- [v7\_partialHydration](https://reactrouter.com/6.30.0/upgrading/future#v7_partialhydration)
- [v7\_skipActionErrorRevalidation](https://reactrouter.com/6.30.0/upgrading/future#v7_skipactionerrorrevalidation)

# Future Flags

The following future flags are stable and ready to adopt. To read more about future flags see [Development Strategy](https://reactrouter.com/6.30.0/guides/api-development-strategy)

## Update to latest v6.x

First update to the latest minor version of v6.x to have the latest future flags.

👉 **Update to latest v6**

```
npm install react-router-dom@6

```

## v7\_relativeSplatPath

**Background**

Changes the relative path matching and linking for multi-segment splats paths like `dashboard/*` (vs. just `*`). [View the CHANGELOG](https://github.com/remix-run/react-router/blob/main/packages/react-router-dom/CHANGELOG.md#minor-changes-2) for more information.

👉 **Enable the flag**

Enabling the flag depends on the type of router:

```
<BrowserRouter
  future={{
    v7_relativeSplatPath: true,
  }}
/>

```

```
createBrowserRouter(routes, {
  future: {
    v7_relativeSplatPath: true,
  },
});

```

**Update your Code**

If you have any routes with a path + a splat like `<Route path="dashboard/*">` and has relative links like `<Link to="relative">` or `<Link to="../relative">` beneath it, you will need to update your code.

👉 **Split the `<Route>` into two**

Split any multi-segment splat `<Route>` into a parent route with the path and a child route with the splat:

```
<Routes>
  <Route path="/" element={<Home />} />
-  <Route path="dashboard/*" element={<Dashboard />} />
+  <Route path="dashboard">
+    <Route index element={<Dashboard />} />
+    <Route path="*" element={<Dashboard />} />
+  </Route>
</Routes>

// or
createBrowserRouter([\
  { path: "/", element: <Home /> },\
  {\
-    path: "dashboard/*",\
-    element: <Dashboard />,\
+    path: "dashboard",\
+    children: [{ path: "*", element: <Dashboard /> }],\
  },\
]);

```

👉 **Update relative links**

Update any `<Link>` elements within that route tree to include the extra `..` relative segment to continue linking to the same place:

```
function Dashboard() {
  return (
    <div>
      <h2>Dashboard</h2>
      <nav>
-        <Link to="/">Dashboard Home</Link>
-        <Link to="team">Team</Link>
-        <Link to="projects">Projects</Link>
+        <Link to="../">Dashboard Home</Link>
+        <Link to="../team">Team</Link>
+        <Link to="../projects">Projects</Link>
      </nav>

      <Routes>
        <Route path="/" element={<DashboardHome />} />
        <Route path="team" element={<DashboardTeam />} />
        <Route
          path="projects"
          element={<DashboardProjects />}
        />
      </Routes>
    </div>
  );
}

```

## v7\_startTransition

**Background**

This uses `React.useTransition` instead of `React.useState` for Router state updates. View the [CHANGELOG](https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#v7_starttransition) for more information.

👉 **Enable the flag**

```
<BrowserRouter
  future={{
    v7_startTransition: true,
  }}
/>

// or
<RouterProvider
  future={{
    v7_startTransition: true,
  }}
/>

```

👉 **Update your Code**

You don't need to update anything unless you are using `React.lazy` _inside_ of a component.

Using `React.lazy` inside of a component is incompatible with `React.useTransition` (or other code that makes promises inside of components). Move `React.lazy` to the module scope and stop making promises inside of components. This is not a limitation of React Router but rather incorrect usage of React.

## v7\_fetcherPersist

If you are not using a `createBrowserRouter` you can skip this

**Background**

The fetcher lifecycle is now based on when it returns to an idle state rather than when its owner component unmounts: [View the CHANGELOG](https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#persistence-future-flag-futurev7_fetcherpersist) for more information.

**Enable the Flag**

```
createBrowserRouter(routes, {
  future: {
    v7_fetcherPersist: true,
  },
});

```

**Update your Code**

It's unlikely to affect your app. You may want to check any usage of `useFetchers` as they may persist longer than they did before. Depending on what you're doing, you may render something longer than before.

## v7\_normalizeFormMethod

If you are not using a `createBrowserRouter` you can skip this

This normalizes `formMethod` fields as uppercase HTTP methods to align with the `fetch()` behavior. [View the CHANGELOG](https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#futurev7_normalizeformmethod) for more information.

👉 **Enable the Flag**

```
createBrowserRouter(routes, {
  future: {
    v7_normalizeFormMethod: true,
  },
});

```

**Update your Code**

If any of your code is checking for lowercase HTTP methods, you will need to update it to check for uppercase HTTP methods (or call `toLowerCase()` on it).

👉 **Compare `formMethod` to UPPERCASE**

```
-useNavigation().formMethod === "post"
-useFetcher().formMethod === "get";
+useNavigation().formMethod === "POST"
+useFetcher().formMethod === "GET";

```

## v7\_partialHydration

If you are not using a `createBrowserRouter` you can skip this

This allows SSR frameworks to provide only partial hydration data. It's unlikely you need to worry about this, just turn the flag on. [View the CHANGELOG](https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#partial-hydration) for more information.

👉 **Enable the Flag**

```
createBrowserRouter(routes, {
  future: {
    v7_partialHydration: true,
  },
});

```

**Update your Code**

With partial hydration, you need to provide a `HydrateFallback` component to render during initial hydration. Additionally, if you were using `fallbackElement` before, you need to remove it as it is now deprecated. In most cases, you will want to reuse the `fallbackElement` as the `HydrateFallback`.

👉 **Replace `fallbackElement` with `HydrateFallback`**

```
const router = createBrowserRouter(
  [\
    {\
      path: "/",\
      Component: Layout,\
+      HydrateFallback: Fallback,\
      // or\
+      hydrateFallbackElement: <Fallback />,\
      children: [],\
    },\
  ],
);

<RouterProvider
  router={router}
-  fallbackElement={<Fallback />}
/>

```

## v7\_skipActionErrorRevalidation

If you are not using a `createBrowserRouter` you can skip this

When this flag is enabled, loaders will no longer revalidate by default after an action throws/returns a `Response` with a `4xx`/ `5xx` status code. You may opt-into revalidation in these scenarios via `shouldRevalidate` and the `actionStatus` parameter.

👉 **Enable the Flag**

```
createBrowserRouter(routes, {
  future: {
    v7_skipActionErrorRevalidation: true,
  },
});

```

**Update your Code**

In most cases, you probably won't have to make changes to your app code. Usually, if an action errors, it's unlikely data was mutated and needs revalidation. If any of your code _does_ mutate data in action error scenarios you have 2 options:

👉 **Option 1: Change the `action` to avoid mutations in error scenarios**

```
// Before
async function action() {
  await mutateSomeData();
  if (detectError()) {
    throw new Response(error, { status: 400 });
  }
  await mutateOtherData();
  // ...
}

// After
async function action() {
  if (detectError()) {
    throw new Response(error, { status: 400 });
  }
  // All data is now mutated after validations
  await mutateSomeData();
  await mutateOtherData();
  // ...
}

```

👉 **Option 2: Opt-into revalidation via `shouldRevalidate` and `actionStatus`**

```
async function action() {
  await mutateSomeData();
  if (detectError()) {
    throw new Response(error, { status: 400 });
  }
  await mutateOtherData();
}

async function loader() { ... }

function shouldRevalidate({ actionStatus, defaultShouldRevalidate }) {
  if (actionStatus != null && actionStatus >= 400) {
    // Revalidate this loader when actions return a 4xx/5xx status
    return true;
  }
  return defaultShouldRevalidate;
}

```

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/how-to/form-validation) [dev](https://reactrouter.com/dev/how-to/form-validation)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Form Validation

# Form Validation

This guide walks through a simple signup form implementation. You will likely want to pair these concepts with third-party validation libraries and error components, but this guide only focuses on the moving pieces for React Router.

## 1\. Setting Up

We'll start by creating a basic signup route with form.

```
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [\
  route("signup", "signup.tsx"),\
] satisfies RouteConfig;

```

Copy code to clipboard

```
import type { Route } from "./+types/signup";
import { useFetcher } from "react-router";

export default function Signup(_: Route.ComponentProps) {
  let fetcher = useFetcher();
  return (
    <fetcher.Form method="post">
      <p>
        <input type="email" name="email" />
      </p>

      <p>
        <input type="password" name="password" />
      </p>

      <button type="submit">Sign Up</button>
    </fetcher.Form>
  );
}

```

Copy code to clipboard

## 2\. Defining the Action

In this step, we'll define a server `action` in the same file as our `Signup` component. Note that the aim here is to provide a broad overview of the mechanics involved rather than digging deep into form validation rules or error object structures. We'll use rudimentary checks for the email and password to demonstrate the core concepts.

```
import type { Route } from "./+types/signup";
import { redirect, useFetcher, data } from "react-router";

export default function Signup(_: Route.ComponentProps) {
  // omitted for brevity
}

export async function action({
  request,
}: Route.ActionArgs) {
  const formData = await request.formData();
  const email = String(formData.get("email"));
  const password = String(formData.get("password"));

  const errors = {};

  if (!email.includes("@")) {
    errors.email = "Invalid email address";
  }

  if (password.length < 12) {
    errors.password =
      "Password should be at least 12 characters";
  }

  if (Object.keys(errors).length > 0) {
    return data({ errors }, { status: 400 });
  }

  // Redirect to dashboard if validation is successful
  return redirect("/dashboard");
}

```

Copy code to clipboard

If any validation errors are found, they are returned from the `action` to the fetcher. This is our way of signaling to the UI that something needs to be corrected, otherwise the user will be redirected to the dashboard.

Note the `data({ errors }, { status: 400 })` call. Setting a 400 status is the web standard way to signal to the client that there was a validation error (Bad Request). In React Router, only 200 status codes trigger page data revalidation so a 400 prevent that.

## 3\. Displaying Validation Errors

Finally, we'll modify the `Signup` component to display validation errors, if any, from `fetcher.data`.

```
export default function Signup(_: Route.ComponentProps) {
  let fetcher = useFetcher();
  let errors = fetcher.data?.errors;
  return (
    <fetcher.Form method="post">
      <p>
        <input type="email" name="email" />
        {errors?.email ? <em>{errors.email}</em> : null}
      </p>

      <p>
        <input type="password" name="password" />
        {errors?.password ? (
          <em>{errors.password}</em>
        ) : null}
      </p>

      <button type="submit">Sign Up</button>
    </fetcher.Form>
  );
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/how-to/form-validation.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.29.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Routes

# `<Routes>`

Rendered anywhere in the app, `<Routes>` will match a set of child routes from the current [location](https://reactrouter.com/6.29.0/utils/location).

```
interface RoutesProps {
  children?: React.ReactNode;
  location?: Partial<Location> | string;
}

<Routes location>
  <Route />
</Routes>;

```

If you're using a data router like [`createBrowserRouter`](https://reactrouter.com/6.29.0/routers/create-browser-router) it is uncommon to use this component as routes defined as part of a descendant `<Routes>` tree cannot leverage the [Data APIs](https://reactrouter.com/6.29.0/routers/picking-a-router#data-apis) available to [`RouterProvider`](https://reactrouter.com/6.29.0/routers/router-provider) apps. You **can and should** use this component within your `RouterProvider` application [while you are migrating](https://reactrouter.com/6.29.0/upgrading/v6-data).

Whenever the location changes, `<Routes>` looks through all its child routes to find the best match and renders that branch of the UI. `<Route>` elements may be nested to indicate nested UI, which also correspond to nested URL paths. Parent routes render their child routes by rendering an [`<Outlet>`](https://reactrouter.com/6.29.0/components/outlet).

```
<Routes>
  <Route path="/" element={<Dashboard />}>
    <Route
      path="messages"
      element={<DashboardMessages />}
    />
    <Route path="tasks" element={<DashboardTasks />} />
  </Route>
  <Route path="about" element={<AboutPage />} />
</Routes>

```

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/how-to/spa) [dev](https://reactrouter.com/dev/how-to/spa)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Single Page App (SPA)

On this page

- [Overview](https://reactrouter.com/how-to/spa#overview)
- [1\. Disable Runtime Server Rendering](https://reactrouter.com/how-to/spa#1-disable-runtime-server-rendering)
- [2\. Add a `HydrateFallback` and optional `loader` to your root route](https://reactrouter.com/how-to/spa#2-add-a-hydratefallback-and-optional-loader-to-your-root-route)
- [3\. Use client loaders and client actions](https://reactrouter.com/how-to/spa#3-use-client-loaders-and-client-actions)
- [4\. Direct all URLs to index.html](https://reactrouter.com/how-to/spa#4-direct-all-urls-to-indexhtml)

- [Overview](https://reactrouter.com/how-to/spa#overview)
- [1\. Disable Runtime Server Rendering](https://reactrouter.com/how-to/spa#1-disable-runtime-server-rendering)
- [2\. Add a `HydrateFallback` and optional `loader` to your root route](https://reactrouter.com/how-to/spa#2-add-a-hydratefallback-and-optional-loader-to-your-root-route)
- [3\. Use client loaders and client actions](https://reactrouter.com/how-to/spa#3-use-client-loaders-and-client-actions)
- [4\. Direct all URLs to index.html](https://reactrouter.com/how-to/spa#4-direct-all-urls-to-indexhtml)

# Single Page App (SPA)

There are two ways to ship a single page app with React Router

- **as a library** \- Instead of using React Router's framework features, you can use it as a library in your own SPA architecture. Refer to [React Router as a Library](https://reactrouter.com/start/library/installation) guides.
- **as a framework** \- This guide will focus here

## Overview

When using React Router as a framework, you can enable "SPA Mode" by setting `ssr:false` in your `react-router.config.ts` file. This will disable runtime server rendering and generate an `index.html` at build time that you can serve and hydrate as a SPA.

Typical Single Page apps send a mostly blank `index.html` template with little more than an empty `<div id="root"></div>`. In contrast, `react-router build` (in SPA Mode) pre-renders your root route at build time into an `index.html` file. This means you can:

- Send more than an empty `<div>`
- Use a root `loader` to load data for your application shell
- Use React components to generate the initial page users see (root `HydrateFallback`)
- Re-enable server rendering later without changing anything about your UI

It's important to note that setting `ssr:false` only disables _runtime server rendering_. React Router will still server render your root route at _build time_ to generate the `index.html` file. This is why your project still needs a dependency on `@react-router/node` and your routes need to be SSR-safe. That means you can't call `window` or other browser-only APIs during the initial render, even when server rendering is disabled.

SPA Mode is a special form of "Pre-Rendering" that allows you to serve all paths in your application from the same HTML file. Please refer to the [Pre-Rendering](https://reactrouter.com/how-to/pre-rendering) guide if you want to do more extensive pre-rendering.

## 1\. Disable Runtime Server Rendering

Server rendering is enabled by default. Set the `ssr` flag to `false` in `react-router.config.ts` to disable it.

```
import { type Config } from "@react-router/dev/config";

export default {
  ssr: false,
} satisfies Config;

```

Copy code to clipboard

With this set to false, the server build will no longer be generated.

It's important to note that setting `ssr:false` only disables _runtime server rendering_. React Router will still server render your root route at _build time_ to generate the `index.html` file. This is why your project still needs a dependency on `@react-router/node` and your routes need to be SSR-safe. That means you can't call `window` or other browser-only APIs during the initial render, even when server rendering is disabled.

## 2\. Add a `HydrateFallback` and optional `loader` to your root route

SPA Mode will generate an `index.html` file at build-time that you can serve as the entry point for your SPA. This will only render the root route so that it is capable of hydrating at runtime for any path in your application.

To provide a better loading UI than an empty `<div>`, you can add a `HydrateFallback` component to your root route to render your loading UI into the `index.html` at build time. This way, it will be shown to users immediately while the SPA is loading/hydrating.

```
import LoadingScreen from "./components/loading-screen";

export function Layout() {
  return <html>{/*...*/}</html>;
}

export function HydrateFallback() {
  return <LoadingScreen />;
}

export default function App() {
  return <Outlet />;
}

```

Copy code to clipboard

Because the root route is server-rendered at build time, you can also use a `loader` in your root route if you choose. This `loader` will be called at build time ans the data will be available via the optional `HydrateFallback` `loaderData` prop.

```
import { Route } from "./+types/root";

export async function loader() {
  return {
    version: await getVersion(),
  };
}

export function HydrateFallback({
  loaderData,
}: Route.ComponentProps) {
  return (
    <div>
      <h1>Loading version {loaderData.version}...</h1>
      <AwesomeSpinner />
    </div>
  );
}

```

Copy code to clipboard

You cannot include a `loader` in any other routes in your app when using SPA Mode unless you are [pre-rendering those pages](https://reactrouter.com/how-to/pre-rendering).

## 3\. Use client loaders and client actions

With server rendering disabled, you can still use `clientLoader` and `clientAction` to manage route data and mutations.

```
import { Route } from "./+types/some-route";

export async function clientLoader({
  params,
}: Route.ClientLoaderArgs) {
  let data = await fetch(`/some/api/stuff/${params.id}`);
  return data;
}

export async function clientAction({
  request,
}: Route.ClientActionArgs) {
  let formData = await request.formData();
  return await processPayment(formData);
}

```

Copy code to clipboard

## 4\. Direct all URLs to index.html

After running `react-router build`, deploy the `build/client` directory to whatever static host you prefer.

Common to deploying any SPA, you'll need to configure your host to direct all URLs to the `index.html` of the client build. Some hosts do this by default, but others don't. As an example, a host may support a `_redirects` file to do this:

```
/*    /index.html   200

```

If you're getting 404s at valid routes for your app, it's likely you need to configure your host.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/how-to/spa.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

# React Router Brand

These assets are provided for use in situations like articles and video tutorials.

## Trademark Usage Agreement

The React Router name and logos are trademarks of Shopify Inc.

You may not use the React Router name or logos in any way that could mistakenly imply any official connection with or endorsement of Shopify Inc. Any use of the React Router name or logos in a manner that could cause customer confusion is not permitted.

Additionally, you may not use our trademarks for t-shirts, stickers, or other merchandise without explicit written consent.

## Download Assets

You can download a zip file containing all the React Router brand assets:

[React Router Brand Assets](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets.zip)

## Lockup

![ - _brand - React Router Brand Assets - React Router Lockup - Light](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Lockup/Light.svg)

[svg](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Lockup/Light.svg) [png](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Lockup/Light.png)

![ - _brand - React Router Brand Assets - React Router Lockup - Dark](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Lockup/Dark.svg)

[svg](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Lockup/Dark.svg) [png](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Lockup/Dark.png)

![ - _brand - React Router Brand Assets - React Router Lockup - One Color - Light](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Lockup/One%20Color/Light.svg)

[svg](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Lockup/One%20Color/Light.svg) [png](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Lockup/One%20Color/Light.png)

![ - _brand - React Router Brand Assets - React Router Lockup - One Color - Dark](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Lockup/One%20Color/Dark.svg)

[svg](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Lockup/One%20Color/Dark.svg) [png](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Lockup/One%20Color/Dark.png)

## Wordmark

![ - _brand - React Router Brand Assets - React Router Wordmark - Light](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Wordmark/Light.svg)

[svg](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Wordmark/Light.svg) [png](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Wordmark/Light.png)

![ - _brand - React Router Brand Assets - React Router Wordmark - Dark](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Wordmark/Dark.svg)

[svg](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Wordmark/Dark.svg) [png](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Wordmark/Dark.png)

## Logo

![ - _brand - React Router Brand Assets - React Router Logo - Light](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Logo/Light.svg)

[svg](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Logo/Light.svg) [png](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Logo/Light.png)

![ - _brand - React Router Brand Assets - React Router Logo - Dark](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Logo/Dark.svg)

[svg](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Logo/Dark.svg) [png](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Logo/Dark.png)

![ - _brand - React Router Brand Assets - React Router Logo - One Color - Light](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Logo/One%20Color/Light.svg)

[svg](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Logo/One%20Color/Light.svg) [png](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Logo/One%20Color/Light.png)

![ - _brand - React Router Brand Assets - React Router Logo - One Color - Dark](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Logo/One%20Color/Dark.svg)

[svg](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Logo/One%20Color/Dark.svg) [png](https://reactrouter.com/_brand/React%20Router%20Brand%20Assets/React%20Router%20Logo/One%20Color/Dark.png)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Await

On this page

- [`<Await>`](https://reactrouter.com/6.30.0/components/await#await)
- [Type declaration](https://reactrouter.com/6.30.0/components/await#type-declaration)
- [`children`](https://reactrouter.com/6.30.0/components/await#children)
- [`errorElement`](https://reactrouter.com/6.30.0/components/await#errorelement)
- [`resolve`](https://reactrouter.com/6.30.0/components/await#resolve)

- [`<Await>`](https://reactrouter.com/6.30.0/components/await#await)
- [Type declaration](https://reactrouter.com/6.30.0/components/await#type-declaration)
- [`children`](https://reactrouter.com/6.30.0/components/await#children)
- [`errorElement`](https://reactrouter.com/6.30.0/components/await#errorelement)
- [`resolve`](https://reactrouter.com/6.30.0/components/await#resolve)

## `<Await>`

Used to render [deferred](https://reactrouter.com/6.30.0/utils/defer) values with automatic error handling. Make sure to review the [Deferred Data Guide](https://reactrouter.com/6.30.0/guides/deferred) since there are a few APIs that work together with this component.

```
import { Await, useLoaderData } from "react-router-dom";

function Book() {
  const { book, reviews } = useLoaderData();
  return (
    <div>
      <h1>{book.title}</h1>
      <p>{book.description}</p>
      <React.Suspense fallback={<ReviewsSkeleton />}>
        <Await
          resolve={reviews}
          errorElement={
            <div>Could not load reviews 😬</div>
          }
          children={(resolvedReviews) => (
            <Reviews items={resolvedReviews} />
          )}
        />
      </React.Suspense>
    </div>
  );
}

```

Copy code to clipboard

**Note:** `<Await>` expects to be rendered inside of a `<React.Suspense>` or `<React.SuspenseList>` parent to enable the fallback UI.

## Type declaration

```
declare function Await(
  props: AwaitProps
): React.ReactElement;

interface AwaitProps {
  children: React.ReactNode | AwaitResolveRenderFunction;
  errorElement?: React.ReactNode;
  resolve: TrackedPromise | any;
}

interface AwaitResolveRenderFunction {
  (data: Awaited<any>): React.ReactElement;
}

```

Copy code to clipboard

## `children`

Can either be React elements or a function.

When using a function, the value is provided as the only parameter.

```
<Await resolve={reviewsPromise}>
  {(resolvedReviews) => <Reviews items={resolvedReviews} />}
</Await>

```

Copy code to clipboard

When using React elements, [`useAsyncValue`](https://reactrouter.com/6.30.0/hooks/use-async-value) will provide the data:

```
<Await resolve={reviewsPromise}>
  <Reviews />
</Await>;

function Reviews() {
  const resolvedReviews = useAsyncValue();
  return <div>{/* ... */}</div>;
}

```

Copy code to clipboard

## `errorElement`

The error element renders instead of the children when the promise rejects. You can access the error with [`useAsyncError`](https://reactrouter.com/6.30.0/hooks/use-async-error).

If the promise rejects, you can provide an optional `errorElement` to handle that error in a contextual UI via the `useAsyncError` hook.

```
<Await
  resolve={reviewsPromise}
  errorElement={<ReviewsError />}
>
  <Reviews />
</Await>;

function ReviewsError() {
  const error = useAsyncError();
  return <div>{error.message}</div>;
}

```

Copy code to clipboard

If you do not provide an errorElement, the rejected value will bubble up to the nearest route-level [`errorElement`](https://reactrouter.com/6.30.0/route/error-element) and be accessible via the [`useRouteError`](https://reactrouter.com/6.30.0/hooks/use-route-error) hook.

## `resolve`

Takes a promise returned from a [deferred](https://reactrouter.com/6.30.0/utils/defer) [loader](https://reactrouter.com/6.30.0/route/loader) value to be resolved and rendered.

```
import {
  defer,
  Route,
  useLoaderData,
  Await,
} from "react-router-dom";

// given this route
<Route
  loader={async () => {
    let book = await getBook();
    let reviews = getReviews(); // not awaited
    return defer({
      book,
      reviews, // this is a promise
    });
  }}
  element={<Book />}
/>;

function Book() {
  const {
    book,
    reviews, // this is the same promise
  } = useLoaderData();
  return (
    <div>
      <h1>{book.title}</h1>
      <p>{book.description}</p>
      <React.Suspense fallback={<ReviewsSkeleton />}>
        <Await
          // and is the promise we pass to Await
          resolve={reviews}
        >
          <Reviews />
        </Await>
      </React.Suspense>
    </div>
  );
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.29.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

replace

# `replace`

This is a small wrapper around [`redirect`](https://reactrouter.com/6.29.0/fetch/redirect) that will trigger a client-side redirect to the new location using `history.replaceState` instead of `history.pushState`.

## Type Declaration

```
type RedirectFunction = (
  url: string,
  init?: number | ResponseInit
) => Response;

```

Copy code to clipboard

## `url`

The URL to redirect to.

```
replace("/otherapp/login");

```

Copy code to clipboard

## `init`

The `status` or the [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response/Response) options to be used in the response.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/explanation/state-management) [dev](https://reactrouter.com/dev/explanation/state-management)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

State Management

On this page

- [Understanding State Management in React](https://reactrouter.com/explanation/state-management#understanding-state-management-in-react)
- [How React Router Simplifies State](https://reactrouter.com/explanation/state-management#how-react-router-simplifies-state)
- [Examples](https://reactrouter.com/explanation/state-management#examples)
- [Network Related State](https://reactrouter.com/explanation/state-management#network-related-state)
- [URL Search Params](https://reactrouter.com/explanation/state-management#url-search-params)
- [Persistent UI State](https://reactrouter.com/explanation/state-management#persistent-ui-state)
- [Form Validation and Action Data](https://reactrouter.com/explanation/state-management#form-validation-and-action-data)

- [Understanding State Management in React](https://reactrouter.com/explanation/state-management#understanding-state-management-in-react)
- [How React Router Simplifies State](https://reactrouter.com/explanation/state-management#how-react-router-simplifies-state)
- [Examples](https://reactrouter.com/explanation/state-management#examples)
- [Network Related State](https://reactrouter.com/explanation/state-management#network-related-state)
- [URL Search Params](https://reactrouter.com/explanation/state-management#url-search-params)
- [Persistent UI State](https://reactrouter.com/explanation/state-management#persistent-ui-state)
- [Form Validation and Action Data](https://reactrouter.com/explanation/state-management#form-validation-and-action-data)

# State Management

State management in React typically involves maintaining a synchronized cache of server data on the client side. However, when using React Router as your framework, most of the traditional caching solutions become redundant because of how it inherently handles data synchronization.

## Understanding State Management in React

In a typical React context, when we refer to "state management", we're primarily discussing how we synchronize server state with the client. A more apt term could be "cache management" because the server is the source of truth and the client state is mostly functioning as a cache.

Popular caching solutions in React include:

- **Redux:** A predictable state container for JavaScript apps.
- **React Query:** Hooks for fetching, caching, and updating asynchronous data in React.
- **Apollo:** A comprehensive state management library for JavaScript that integrates with GraphQL.

In certain scenarios, using these libraries may be warranted. However, with React Router's unique server-focused approach, their utility becomes less prevalent. In fact, most React Router applications forgo them entirely.

## How React Router Simplifies State

React Router seamlessly bridges the gap between the backend and frontend via mechanisms like loaders, actions, and forms with automatic synchronization through revalidation. This offers developers the ability to directly use server state within components without managing a cache, the network communication, or data revalidation, making most client-side caching redundant.

Here's why using typical React state patterns might be an anti-pattern in React Router:

1. **Network-related State:** If your React state is managing anything related to the network—such as data from loaders, pending form submissions, or navigational states—it's likely that you're managing state that React Router already manages:
   - **[`useNavigation`](https://api.reactrouter.com/v7/functions/react_router.useNavigation)**: This hook gives you access to `navigation.state`, `navigation.formData`, `navigation.location`, etc.
   - **[`useFetcher`](https://api.reactrouter.com/v7/functions/react_router.useFetcher)**: This facilitates interaction with `fetcher.state`, `fetcher.formData`, `fetcher.data` etc.
   - **[`loaderData`](https://reactrouter.com/start/framework/data-loading)**: Access the data for a route.
   - **[`actionData`](https://reactrouter.com/start/framework/actions)**: Access the data from the latest action.
2. **Storing Data in React Router:** A lot of data that developers might be tempted to store in React state has a more natural home in React Router, such as:
   - **URL Search Params:** Parameters within the URL that hold state.
   - **[Cookies](https://reactrouter.com/explanation/sessions-and-cookies#cookies):** Small pieces of data stored on the user's device.
   - **[Server Sessions](https://reactrouter.com/explanation/sessions-and-cookies#sessions):** Server-managed user sessions.
   - **Server Caches:** Cached data on the server side for quicker retrieval.
3. **Performance Considerations:** At times, client state is leveraged to avoid redundant data fetching. With React Router, you can use the [`Cache-Control`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) headers within `loader` s, allowing you to tap into the browser's native cache. However, this approach has its limitations and should be used judiciously. It's usually more beneficial to optimize backend queries or implement a server cache. This is because such changes benefit all users and do away with the need for individual browser caches.


As a developer transitioning to React Router, it's essential to recognize and embrace its inherent efficiencies rather than applying traditional React patterns. React Router offers a streamlined solution to state management leading to less code, fresh data, and no state synchronization bugs.

## Examples

### Network Related State

For examples on using React Router's internal state to manage network related state, refer to [Pending UI](https://reactrouter.com/start/framework/pending-ui).

### URL Search Params

Consider a UI that lets the user customize between list view or detail view. Your instinct might be to reach for React state:

```
export function List() {
  const [view, setView] = useState("list");
  return (
    <div>
      <div>
        <button onClick={() => setView("list")}>
          View as List
        </button>
        <button onClick={() => setView("details")}>
          View with Details
        </button>
      </div>
      {view === "list" ? <ListView /> : <DetailView />}
    </div>
  );
}

```

Copy code to clipboard

Now consider you want the URL to update when the user changes the view. Note the state synchronization:

```
import { useNavigate, useSearchParams } from "react-router";

export function List() {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [view, setView] = useState(
    searchParams.get("view") || "list"
  );

  return (
    <div>
      <div>
        <button
          onClick={() => {
            setView("list");
            navigate(`?view=list`);
          }}
        >
          View as List
        </button>
        <button
          onClick={() => {
            setView("details");
            navigate(`?view=details`);
          }}
        >
          View with Details
        </button>
      </div>
      {view === "list" ? <ListView /> : <DetailView />}
    </div>
  );
}

```

Copy code to clipboard

Instead of synchronizing state, you can simply read and set the state in the URL directly with boring old HTML forms:

```
import { Form, useSearchParams } from "react-router";

export function List() {
  const [searchParams] = useSearchParams();
  const view = searchParams.get("view") || "list";

  return (
    <div>
      <Form>
        <button name="view" value="list">
          View as List
        </button>
        <button name="view" value="details">
          View with Details
        </button>
      </Form>
      {view === "list" ? <ListView /> : <DetailView />}
    </div>
  );
}

```

Copy code to clipboard

### Persistent UI State

Consider a UI that toggles a sidebar's visibility. We have three ways to handle the state:

1. React state
2. Browser local storage
3. Cookies

In this discussion, we'll break down the trade-offs associated with each method.

#### React State

React state provides a simple solution for temporary state storage.

**Pros**:

- **Simple**: Easy to implement and understand.
- **Encapsulated**: State is scoped to the component.

**Cons**:

- **Transient**: Doesn't survive page refreshes, returning to the page later, or unmounting and remounting the component.

**Implementation**:

```
function Sidebar() {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <div>
      <button onClick={() => setIsOpen((open) => !open)}>
        {isOpen ? "Close" : "Open"}
      </button>
      <aside hidden={!isOpen}>
        <Outlet />
      </aside>
    </div>
  );
}

```

Copy code to clipboard

#### Local Storage

To persist state beyond the component lifecycle, browser local storage is a step-up. See our doc on [Client Data](https://reactrouter.com/how-to/client-data) for more advanced examples.

**Pros**:

- **Persistent**: Maintains state across page refreshes and component mounts/unmounts.
- **Encapsulated**: State is scoped to the component.

**Cons**:

- **Requires Synchronization**: React components must sync up with local storage to initialize and save the current state.
- **Server Rendering Limitation**: The [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window/window) and [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) objects are not accessible during server-side rendering, so state must be initialized in the browser with an effect.
- **UI Flickering**: On initial page loads, the state in local storage may not match what was rendered by the server and the UI will flicker when JavaScript loads.

**Implementation**:

```
function Sidebar() {
  const [isOpen, setIsOpen] = useState(false);

  // synchronize initially
  useLayoutEffect(() => {
    const isOpen = window.localStorage.getItem("sidebar");
    setIsOpen(isOpen);
  }, []);

  // synchronize on change
  useEffect(() => {
    window.localStorage.setItem("sidebar", isOpen);
  }, [isOpen]);

  return (
    <div>
      <button onClick={() => setIsOpen((open) => !open)}>
        {isOpen ? "Close" : "Open"}
      </button>
      <aside hidden={!isOpen}>
        <Outlet />
      </aside>
    </div>
  );
}

```

Copy code to clipboard

In this approach, state must be initialized within an effect. This is crucial to avoid complications during server-side rendering. Directly initializing the React state from `localStorage` will cause errors since `window.localStorage` is unavailable during server rendering.

```
function Sidebar() {
  const [isOpen, setIsOpen] = useState(
    // error: window is not defined
    window.localStorage.getItem("sidebar")
  );

  // ...
}

```

Copy code to clipboard

By initializing the state within an effect, there's potential for a mismatch between the server-rendered state and the state stored in local storage. This discrepancy will lead to brief UI flickering shortly after the page renders and should be avoided.

#### Cookies

Cookies offer a comprehensive solution for this use case. However, this method introduces added preliminary setup before making the state accessible within the component.

**Pros**:

- **Server Rendering**: State is available on the server for rendering and even for server actions.
- **Single Source of Truth**: Eliminates state synchronization hassles.
- **Persistence**: Maintains state across page loads and component mounts/unmounts. State can even persist across devices if you switch to a database-backed session.
- **Progressive Enhancement**: Functions even before JavaScript loads.

**Cons**:

- **Boilerplate**: Requires more code because of the network.
- **Exposed**: The state is not encapsulated to a single component, other parts of the app must be aware of the cookie.

**Implementation**:

First we'll need to create a cookie object:

```
import { createCookie } from "react-router";
export const prefs = createCookie("prefs");

```

Copy code to clipboard

Next we set up the server action and loader to read and write the cookie:

```
import { data, Outlet } from "react-router";
import type { Route } from "./+types/sidebar";

import { prefs } from "./prefs-cookie";

// read the state from the cookie
export async function loader({
  request,
}: Route.LoaderArgs) {
  const cookieHeader = request.headers.get("Cookie");
  const cookie = (await prefs.parse(cookieHeader)) || {};
  return data({ sidebarIsOpen: cookie.sidebarIsOpen });
}

// write the state to the cookie
export async function action({
  request,
}: Route.ActionArgs) {
  const cookieHeader = request.headers.get("Cookie");
  const cookie = (await prefs.parse(cookieHeader)) || {};
  const formData = await request.formData();

  const isOpen = formData.get("sidebar") === "open";
  cookie.sidebarIsOpen = isOpen;

  return data(isOpen, {
    headers: {
      "Set-Cookie": await prefs.serialize(cookie),
    },
  });
}

```

Copy code to clipboard

After the server code is set up, we can use the cookie state in our UI:

```
function Sidebar({ loaderData }: Route.ComponentProps) {
  const fetcher = useFetcher();
  let { sidebarIsOpen } = loaderData;

  // use optimistic UI to immediately change the UI state
  if (fetcher.formData?.has("sidebar")) {
    sidebarIsOpen =
      fetcher.formData.get("sidebar") === "open";
  }

  return (
    <div>
      <fetcher.Form method="post">
        <button
          name="sidebar"
          value={sidebarIsOpen ? "closed" : "open"}
        >
          {sidebarIsOpen ? "Close" : "Open"}
        </button>
      </fetcher.Form>
      <aside hidden={!sidebarIsOpen}>
        <Outlet />
      </aside>
    </div>
  );
}

```

Copy code to clipboard

While this is certainly more code that touches more of the application to account for the network requests and responses, the UX is greatly improved. Additionally, state comes from a single source of truth without any state synchronization required.

In summary, each of the discussed methods offers a unique set of benefits and challenges:

- **React state**: Offers simple but transient state management.
- **Local Storage**: Provides persistence but with synchronization requirements and UI flickering.
- **Cookies**: Delivers robust, persistent state management at the cost of added boilerplate.

None of these are wrong, but if you want to persist the state across visits, cookies offer the best user experience.

### Form Validation and Action Data

Client-side validation can augment the user experience, but similar enhancements can be achieved by leaning more towards server-side processing and letting it handle the complexities.

The following example illustrates the inherent complexities of managing network state, coordinating state from the server, and implementing validation redundantly on both the client and server sides. It's just for illustration, so forgive any obvious bugs or problems you find.

```
export function Signup() {
  // A multitude of React State declarations
  const [isSubmitting, setIsSubmitting] = useState(false);

  const [userName, setUserName] = useState("");
  const [userNameError, setUserNameError] = useState(null);

  const [password, setPassword] = useState(null);
  const [passwordError, setPasswordError] = useState("");

  // Replicating server-side logic in the client
  function validateForm() {
    setUserNameError(null);
    setPasswordError(null);
    const errors = validateSignupForm(userName, password);
    if (errors) {
      if (errors.userName) {
        setUserNameError(errors.userName);
      }
      if (errors.password) {
        setPasswordError(errors.password);
      }
    }
    return Boolean(errors);
  }

  // Manual network interaction handling
  async function handleSubmit() {
    if (validateForm()) {
      setSubmitting(true);
      const res = await postJSON("/api/signup", {
        userName,
        password,
      });
      const json = await res.json();
      setIsSubmitting(false);

      // Server state synchronization to the client
      if (json.errors) {
        if (json.errors.userName) {
          setUserNameError(json.errors.userName);
        }
        if (json.errors.password) {
          setPasswordError(json.errors.password);
        }
      }
    }
  }

  return (
    <form
      onSubmit={(event) => {
        event.preventDefault();
        handleSubmit();
      }}
    >
      <p>
        <input
          type="text"
          name="username"
          value={userName}
          onChange={() => {
            // Synchronizing form state for the fetch
            setUserName(event.target.value);
          }}
        />
        {userNameError ? <i>{userNameError}</i> : null}
      </p>

      <p>
        <input
          type="password"
          name="password"
          onChange={(event) => {
            // Synchronizing form state for the fetch
            setPassword(event.target.value);
          }}
        />
        {passwordError ? <i>{passwordError}</i> : null}
      </p>

      <button disabled={isSubmitting} type="submit">
        Sign Up
      </button>

      {isSubmitting ? <BusyIndicator /> : null}
    </form>
  );
}

```

Copy code to clipboard

The backend endpoint, `/api/signup`, also performs validation and sends error feedback. Note that some essential validation, like detecting duplicate usernames, can only be done server-side using information the client doesn't have access to.

```
export async function signupHandler(request: Request) {
  const errors = await validateSignupRequest(request);
  if (errors) {
    return { ok: false, errors: errors };
  }
  await signupUser(request);
  return { ok: true, errors: null };
}

```

Copy code to clipboard

Now, let's contrast this with a React Router-based implementation. The action remains consistent, but the component is vastly simplified due to the direct utilization of server state via `actionData`, and leveraging the network state that React Router inherently manages.

```
import { useNavigation } from "react-router";
import type { Route } from "./+types/signup";

export async function action({
  request,
}: ActionFunctionArgs) {
  const errors = await validateSignupRequest(request);
  if (errors) {
    return { ok: false, errors: errors };
  }
  await signupUser(request);
  return { ok: true, errors: null };
}

export function Signup({
  actionData,
}: Route.ComponentProps) {
  const navigation = useNavigation();

  const userNameError = actionData?.errors?.userName;
  const passwordError = actionData?.errors?.password;
  const isSubmitting = navigation.formAction === "/signup";

  return (
    <Form method="post">
      <p>
        <input type="text" name="username" />
        {userNameError ? <i>{userNameError}</i> : null}
      </p>

      <p>
        <input type="password" name="password" />
        {passwordError ? <i>{passwordError}</i> : null}
      </p>

      <button disabled={isSubmitting} type="submit">
        Sign Up
      </button>

      {isSubmitting ? <BusyIndicator /> : null}
    </Form>
  );
}

```

Copy code to clipboard

The extensive state management from our previous example is distilled into just three code lines. We eliminate the necessity for React state, change event listeners, submit handlers, and state management libraries for such network interactions.

Direct access to the server state is made possible through `actionData`, and network state through `useNavigation` (or `useFetcher`).

As bonus party trick, the form is functional even before JavaScript loads (see [Progressive Enhancement](https://reactrouter.com/explanation/progressive-enhancement)). Instead of React Router managing the network operations, the default browser behaviors step in.

If you ever find yourself entangled in managing and synchronizing state for network operations, React Router likely offers a more elegant solution.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/explanation/state-management.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/how-to/view-transitions) [dev](https://reactrouter.com/dev/how-to/view-transitions)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

View Transitions

On this page

- [Basic View Transition](https://reactrouter.com/how-to/view-transitions#basic-view-transition)
- [1\. Enable view transitions on navigation](https://reactrouter.com/how-to/view-transitions#1-enable-view-transitions-on-navigation)
- [Image Gallery Example](https://reactrouter.com/how-to/view-transitions#image-gallery-example)
- [2\. Create the image gallery route](https://reactrouter.com/how-to/view-transitions#2-create-the-image-gallery-route)
- [3\. Add transition styles](https://reactrouter.com/how-to/view-transitions#3-add-transition-styles)
- [4\. Create the image detail route](https://reactrouter.com/how-to/view-transitions#4-create-the-image-detail-route)
- [5\. Add matching transition styles for the detail view](https://reactrouter.com/how-to/view-transitions#5-add-matching-transition-styles-for-the-detail-view)
- [Advanced Usage](https://reactrouter.com/how-to/view-transitions#advanced-usage)
- [1\. Using render props](https://reactrouter.com/how-to/view-transitions#1-using-render-props)
- [2\. Using the `useViewTransitionState` hook](https://reactrouter.com/how-to/view-transitions#2-using-the-useviewtransitionstate-hook)

- [Basic View Transition](https://reactrouter.com/how-to/view-transitions#basic-view-transition)
- [1\. Enable view transitions on navigation](https://reactrouter.com/how-to/view-transitions#1-enable-view-transitions-on-navigation)
- [Image Gallery Example](https://reactrouter.com/how-to/view-transitions#image-gallery-example)
- [2\. Create the image gallery route](https://reactrouter.com/how-to/view-transitions#2-create-the-image-gallery-route)
- [3\. Add transition styles](https://reactrouter.com/how-to/view-transitions#3-add-transition-styles)
- [4\. Create the image detail route](https://reactrouter.com/how-to/view-transitions#4-create-the-image-detail-route)
- [5\. Add matching transition styles for the detail view](https://reactrouter.com/how-to/view-transitions#5-add-matching-transition-styles-for-the-detail-view)
- [Advanced Usage](https://reactrouter.com/how-to/view-transitions#advanced-usage)
- [1\. Using render props](https://reactrouter.com/how-to/view-transitions#1-using-render-props)
- [2\. Using the `useViewTransitionState` hook](https://reactrouter.com/how-to/view-transitions#2-using-the-useviewtransitionstate-hook)

# View Transitions

Enable smooth animations between page transitions in your React Router applications using the [View Transitions API](https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition). This feature allows you to create seamless visual transitions during client-side navigation.

## Basic View Transition

### 1\. Enable view transitions on navigation

The simplest way to enable view transitions is by adding the `viewTransition` prop to your `Link`, `NavLink`, or `Form` components. This automatically wraps the navigation update in `document.startViewTransition()`.

```
<Link to="/about" viewTransition>
  About
</Link>

```

Copy code to clipboard

Without any additional CSS, this provides a basic cross-fade animation between pages.

For more information on using the View Transitions API, please refer to the ["Smooth transitions with the View Transition API" guide](https://developer.chrome.com/docs/web-platform/view-transitions) from the Google Chrome team.

## Image Gallery Example

Let's build an image gallery that demonstrates how to trigger and use view transitions. We'll create a list of images that expand into a detail view with smooth animations.

### 2\. Create the image gallery route

```
import { NavLink } from "react-router";

export const images = [\
  "https://remix.run/blog-images/headers/the-future-is-now.jpg",\
  "https://remix.run/blog-images/headers/waterfall.jpg",\
  "https://remix.run/blog-images/headers/webpack.png",\
  // ... more images ...\
];

export default function ImageGalleryRoute() {
  return (
    <div className="image-list">
      <h1>Image List</h1>
      <div>
        {images.map((src, idx) => (
          <NavLink
            key={src}
            to={`/image/${idx}`}
            viewTransition // Enable view transitions for this link
          >
            <p>Image Number {idx}</p>
            <img
              className="max-w-full contain-layout"
              src={src}
            />
          </NavLink>
        ))}
      </div>
    </div>
  );
}

```

Copy code to clipboard

### 3\. Add transition styles

Define view transition names and animations for elements that should transition smoothly between routes.

```
/* Layout styles for the image grid */
.image-list > div {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  column-gap: 10px;
}

.image-list h1 {
  font-size: 2rem;
  font-weight: 600;
}

.image-list img {
  max-width: 100%;
  contain: layout;
}

.image-list p {
  width: fit-content;
}

/* Assign transition names to elements during navigation */
.image-list a.transitioning img {
  view-transition-name: image-expand;
}

.image-list a.transitioning p {
  view-transition-name: image-title;
}

```

Copy code to clipboard

### 4\. Create the image detail route

The detail view needs to use the same view transition names to create a seamless animation.

```
import { Link } from "react-router";
import { images } from "./home";
import type { Route } from "./+types/image-details";

export default function ImageDetailsRoute({
  params,
}: Route.ComponentProps) {
  return (
    <div className="image-detail">
      <Link to="/" viewTransition>
        Back
      </Link>
      <h1>Image Number {params.id}</h1>
      <img src={images[Number(params.id)]} />
    </div>
  );
}

```

Copy code to clipboard

### 5\. Add matching transition styles for the detail view

```
/* Match transition names from the list view */
.image-detail h1 {
  font-size: 2rem;
  font-weight: 600;
  width: fit-content;
  view-transition-name: image-title;
}

.image-detail img {
  max-width: 100%;
  contain: layout;
  view-transition-name: image-expand;
}

```

Copy code to clipboard

## Advanced Usage

You can control view transitions more precisely using either render props or the `useViewTransitionState` hook.

### 1\. Using render props

```
<NavLink to={`/image/${idx}`} viewTransition>
  {({ isTransitioning }) => (
    <>
      <p
        style={{
          viewTransitionName: isTransitioning
            ? "image-title"
            : "none",
        }}
      >
        Image Number {idx}
      </p>
      <img
        src={src}
        style={{
          viewTransitionName: isTransitioning
            ? "image-expand"
            : "none",
        }}
      />
    </>
  )}
</NavLink>

```

Copy code to clipboard

### 2\. Using the `useViewTransitionState` hook

```
function NavImage(props: { src: string; idx: number }) {
  const href = `/image/${props.idx}`;
  // Hook provides transition state for specific route
  const isTransitioning = useViewTransitionState(href);

  return (
    <Link to={href} viewTransition>
      <p
        style={{
          viewTransitionName: isTransitioning
            ? "image-title"
            : "none",
        }}
      >
        Image Number {props.idx}
      </p>
      <img
        src={props.src}
        style={{
          viewTransitionName: isTransitioning
            ? "image-expand"
            : "none",
        }}
      />
    </Link>
  );
}

```

Copy code to clipboard

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/how-to/view-transitions.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.30.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

replace

# `replace`

This is a small wrapper around [`redirect`](https://reactrouter.com/6.30.0/fetch/redirect) that will trigger a client-side redirect to the new location using `history.replaceState` instead of `history.pushState`.

## Type Declaration

```
type RedirectFunction = (
  url: string,
  init?: number | ResponseInit
) => Response;

```

Copy code to clipboard

## `url`

The URL to redirect to.

```
replace("/otherapp/login");

```

Copy code to clipboard

## `init`

The `status` or the [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response/Response) options to be used in the response.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.29.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

FAQs

On this page

- [What happened to withRouter? I need it!](https://reactrouter.com/6.29.0/start/faq#what-happened-to-withrouter-i-need-it)
- [Why does `<Route>` have an `element` prop instead of `render` or `component`?](https://reactrouter.com/6.29.0/start/faq#why-does-route-have-an-element-prop-instead-of-render-or-component)
- [How do I add a No Match (404) Route in react-router v6?](https://reactrouter.com/6.29.0/start/faq#how-do-i-add-a-no-match-404-route-in-react-router-v6)
- [`<Route>` doesn't render? How do I compose?](https://reactrouter.com/6.29.0/start/faq#route-doesnt-render-how-do-i-compose)
- [How do I nest routes deep in the tree?](https://reactrouter.com/6.29.0/start/faq#how-do-i-nest-routes-deep-in-the-tree)
- [What Happened to Regexp Routes Paths?](https://reactrouter.com/6.29.0/start/faq#what-happened-to-regexp-routes-paths)

- [What happened to withRouter? I need it!](https://reactrouter.com/6.29.0/start/faq#what-happened-to-withrouter-i-need-it)
- [Why does `<Route>` have an `element` prop instead of `render` or `component`?](https://reactrouter.com/6.29.0/start/faq#why-does-route-have-an-element-prop-instead-of-render-or-component)
- [How do I add a No Match (404) Route in react-router v6?](https://reactrouter.com/6.29.0/start/faq#how-do-i-add-a-no-match-404-route-in-react-router-v6)
- [`<Route>` doesn't render? How do I compose?](https://reactrouter.com/6.29.0/start/faq#route-doesnt-render-how-do-i-compose)
- [How do I nest routes deep in the tree?](https://reactrouter.com/6.29.0/start/faq#how-do-i-nest-routes-deep-in-the-tree)
- [What Happened to Regexp Routes Paths?](https://reactrouter.com/6.29.0/start/faq#what-happened-to-regexp-routes-paths)

# FAQs

Here are some questions that people commonly have about React Router v6. You might also find what you're looking for in the [examples](https://github.com/remix-run/react-router/tree/dev/examples).

## What happened to withRouter? I need it!

This question usually stems from the fact that you're using React class components, which don't support hooks. In React Router v6, we fully embraced hooks and use them to share all the router's internal state. But that doesn't mean you can't use the router. Assuming you can actually use hooks (you're on React 16.8+), you just need a wrapper.

```
import {
  useLocation,
  useNavigate,
  useParams,
} from "react-router-dom";

function withRouter(Component) {
  function ComponentWithRouterProp(props) {
    let location = useLocation();
    let navigate = useNavigate();
    let params = useParams();
    return (
      <Component
        {...props}
        router={{ location, navigate, params }}
      />
    );
  }

  return ComponentWithRouterProp;
}

```

Copy code to clipboard

## Why does `<Route>` have an `element` prop instead of `render` or `component`?

In React Router v6 we switched from using v5's `<Route component>` and `<Route render>` APIs to `<Route element>`. Why is that?

For starters, we see React itself taking the lead here with the `<Suspense fallback={<Spinner />}>` API. The `fallback` prop takes a React **element**, not a **component**. This lets you easily pass whatever props you want to your `<Spinner>` from the component that renders it.

Using elements instead of components means we don't have to provide a `passProps`-style API, so you can get the props you need to your elements. For example, in a component-based API there is no good way to pass props to the `<Profile>` element that is rendered when `<Route path=":userId" component={Profile} />` matches. Most React libraries who take this approach end up with either an API like `<Route component={Profile} passProps={{ animate: true }} />` or use a render prop or higher-order component.

Also, `Route`'s rendering API in v5 was rather large. As we worked on v4/5, the conversation went something like this:

```
// Ah, this is nice and simple!
<Route path=":userId" component={Profile} />

// But wait, how do I pass custom props to the <Profile> element??
// Hmm, maybe we can use a render prop in those situations?
<Route
  path=":userId"
  render={routeProps => (
    <Profile routeProps={routeProps} animate={true} />
  )}
/>

// Ok, now we have two ways to render something with a route. :/

// But wait, what if we want to render something when a route
// *doesn't* match the URL, like a Not Found page? Maybe we
// can use another render prop with slightly different semantics?
<Route
  path=":userId"
  children={({ match }) => (
    match ? (
      <Profile match={match} animate={true} />
    ) : (
      <NotFound />
    )
  )}
/>

// What if I want to get access to the route match, or I need
// to redirect deeper in the tree?
function DeepComponent(routeStuff) {
  // got routeStuff, phew!
}
export default withRouter(DeepComponent);

// Well hey, now at least we've covered all our use cases!
// ... *facepalm*

```

Copy code to clipboard

At least part of the reason for this API sprawl was that React did not provide any way for us to get the information from the `<Route>` to your route element, so we had to invent clever ways to get both the route data **and** your own custom props through to your elements: `component`, render props, `passProps` higher-order-components ... until **hooks** came along!

Now, the conversation above goes like this:

```
// Ah, nice and simple API. And it's just like the <Suspense> API!
// Nothing more to learn here.
<Route path=":userId" element={<Profile />} />

// But wait, how do I pass custom props to the <Profile>
// element? Oh ya, it's just an element. Easy.
<Route path=":userId" element={<Profile animate={true} />} />

// Ok, but how do I access the router's data, like the URL params
// or the current location?
function Profile({ animate }) {
  let params = useParams();
  let location = useLocation();
}

// But what about components deep in the tree?
function DeepComponent() {
  // oh right, same as anywhere else
  let navigate = useNavigate();
}

// Aaaaaaaaand we're done here.

```

Copy code to clipboard

Another important reason for using the `element` prop in v6 is that `<Route children>` is reserved for nesting routes. You can read more about this in [the guide about getting started](https://reactrouter.com/6.29.0/start/overview#nested-routes) with v6.

## How do I add a No Match (404) Route in react-router v6?

In v4 we would have just left the path prop off a route. In v5 we would have wrapped our 404 element in a Route and used `path="*"`. In v6 use `path="*"` and pass the 404 element into the new `element` prop instead of wrapping it:

```
<Route path="*" element={<NoMatch />} />

```

Copy code to clipboard

## `<Route>` doesn't render? How do I compose?

In v5 the `<Route>` component was just a normal component that was like an `if` statement that rendered when the URL matched its path. In v6, a `<Route>` element doesn't actually ever render, it's simply there for configuration.

In v5, since routes were just components, `MyRoute` will be rendered when the path is "/my-route".

```
let App = () => (
  <div>
    <MyRoute />
  </div>
);

let MyRoute = ({ element, ...rest }) => {
  return (
    <Route path="/my-route" children={<p>Hello!</p>} />
  );
};

```

Copy code to clipboard

In v6, however, the `<Route>` is only used for its props, so the following code will never render `<p>Hello!</p>` because `<MyRoute>` has no path that `<Routes>` can see:

```
let App = () => (
  <Routes>
    <MyRoute />
  </Routes>
);

let MyRoute = () => {
  // won't ever render because the path is down here
  return (
    <Route path="/my-route" children={<p>Hello!</p>} />
  );
};

```

Copy code to clipboard

You can get the same behavior by:

- Only rendering `<Route>` elements inside of `<Routes>`
- Moving the composition into the `element` prop

```
let App = () => (
  <div>
    <Routes>
      <Route path="/my-route" element={<MyRoute />} />
    </Routes>
  </div>
);

let MyRoute = () => {
  return <p>Hello!</p>;
};

```

Copy code to clipboard

Having a full nested route config available statically in `<Routes>` is going to enable a lot of features in `v6.x`, so we encourage you to put your routes in one top-level config. If you really like the idea of components that match the URL independent of any other components, you can make a component that behaves similarly to the v5 `Route` with this:

```
function MatchPath({ path, Comp }) {
  let match = useMatch(path);
  return match ? <Comp {...match} /> : null;
}

// Will match anywhere w/o needing to be in a `<Routes>`
<MatchPath path="/accounts/:id" Comp={Account} />;

```

Copy code to clipboard

## How do I nest routes deep in the tree?

In v5 you could render a `<Route>` or `<Switch>` anywhere you want. You can keep doing the very same thing, but you need to use `<Routes>` ( `<Route>` without an 's' will not work). We call these "Descendant `<Routes>`".

It might have looked like this in v5

```
// somewhere up the tree
<Switch>
  <Route path="/users" component={Users} />
</Switch>;

// and now deeper in the tree
function Users() {
  return (
    <div>
      <h1>Users</h1>
      <Switch>
        <Route path="/users/account" component={Account} />
      </Switch>
    </div>
  );
}

```

Copy code to clipboard

In v6 it's almost the same:

- Note the `*` in the ancestor routes to get it to match deeper URLs even though it has no direct children
- You no longer need to know the entire child route path, you can use a relative route now

```
// somewhere up the tree
<Routes>
  <Route path="/users/*" element={<Users />} />
</Routes>;

// and now deeper in the tree
function Users() {
  return (
    <div>
      <h1>Users</h1>
      <Routes>
        <Route path="account" element={<Account />} />
      </Routes>
    </div>
  );
}

```

Copy code to clipboard

If you had a "floating route" in v5 (not wrapped in a `<Switch>`), simply wrap it in a `<Routes>` instead.

```
// v5
<Route path="/contact" component={Contact} />

// v6
<Routes>
  <Route path="contact" element={<Contact />} />
</Routes>

```

Copy code to clipboard

## What Happened to Regexp Routes Paths?

Regexp route paths were removed for two reasons:

1. Regular expression paths in routes raised a lot of questions for v6's ranked route matching. How do you rank a regex?

2. We were able to shed an entire dependency (path-to-regexp) and cut the package weight sent to your user's browser significantly. If it were added back, it would represent 1/3 of React Router's page weight!


After looking at a lot of use cases, we found we can still meet them without direct regexp path support, so we made the tradeoff to significantly decrease the bundle size and avoid the open questions around ranking regexp routes.

The majority of regexp routes were only concerned about one URL segment at a time and doing one of two things:

1. Matching multiple static values
2. Validating the param in some way (is a number, not a number, etc.)

**Matching generally static values**

A very common route we've seen is a regex matching multiple language codes:

```
function App() {
  return (
    <Switch>
      <Route path={/(en|es|fr)/} component={Lang} />
    </Switch>
  );
}

function Lang({ params }) {
  let lang = params[0];
  let translations = I81n[lang];
  // ...
}

```

Copy code to clipboard

These are all actually just static paths, so in v6 you can make three routes and pass the code directly to the component. If you've got a lot of them, make an array and map it into routes to avoid the repetition.

```
function App() {
  return (
    <Routes>
      <Route path="en" element={<Lang lang="en" />} />
      <Route path="es" element={<Lang lang="es" />} />
      <Route path="fr" element={<Lang lang="fr" />} />
    </Routes>
  );
}

function Lang({ lang }) {
  let translations = I81n[lang];
  // ...
}

```

Copy code to clipboard

**Doing some sort of param validation**

Another common case was ensuring that parameters were an integer.

```
function App() {
  return (
    <Switch>
      <Route path={/users\/(\d+)/} component={User} />
    </Switch>
  );
}

function User({ params }) {
  let id = params[0];
  // ...
}

```

Copy code to clipboard

In this case you have to do a bit of work yourself with the regex inside the matching component:

```
function App() {
  return (
    <Routes>
      <Route path="/users/:id" element={<ValidateUser />} />
      <Route path="/users/*" element={<NotFound />} />
    </Routes>
  );
}

function ValidateUser() {
  let params = useParams();
  let userId = params.id.match(/\d+/);
  if (!userId) {
    return <NotFound />;
  }
  return <User id={params.userId} />;
}

function User(props) {
  let id = props.id;
  // ...
}

```

Copy code to clipboard

In v5 if the regex didn't match then `<Switch>` would keep trying to match the next routes:

```
function App() {
  return (
    <Switch>
      <Route path={/users\/(\d+)/} component={User} />
      <Route path="/users/new" exact component={NewUser} />
      <Route
        path="/users/inactive"
        exact
        component={InactiveUsers}
      />
      <Route path="/users/*" component={NotFound} />
    </Switch>
  );
}

```

Copy code to clipboard

Looking at this example you might be concerned that in the v6 version your other routes won't get rendered at their URLs because the `:userId` route might match first. But, thanks to route ranking, that is not the case. The "new" and "inactive" routes will rank higher and therefore render at their respective URLs:

```
function App() {
  return (
    <Routes>
      <Route path="/users/:id" element={<ValidateUser />} />
      <Route path="/users/new" element={<NewUser />} />
      <Route
        path="/users/inactive"
        element={<InactiveUsers />}
      />
    </Routes>
  );
}

```

Copy code to clipboard

In fact, the v5 version has all sorts of problems if your routes aren't ordered _just right_. V6 completely eliminates this problem.

**Remix Users**

If you're using [Remix](https://remix.run/), you can send proper 40x responses to the browser by moving this work into your loader. This also decreases the size of the browser bundles sent to the user because loaders only run on the server.

```
import { useLoaderData } from "remix";

export async function loader({ params }) {
  if (!params.id.match(/\d+/)) {
    throw new Response("", { status: 400 });
  }

  let user = await fakeDb.user.find({
    where: { id: params.id },
  });
  if (!user) {
    throw new Response("", { status: 404 });
  }

  return user;
}

function User() {
  let user = useLoaderData();
  // ...
}

```

Copy code to clipboard

Instead of rendering your component, remix will render the nearest [catch boundary](https://remix.run/docs/en/v1/api/conventions#catchboundary) instead.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.29.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

json

# `json`

A shortcut for:

```
new Response(JSON.stringify(someValue), {
  headers: {
    "Content-Type": "application/json; utf-8",
  },
});

```

Copy code to clipboard

Typically used in loaders:

```
import { json } from "react-router-dom";

const loader = async () => {
  const data = getSomeData();
  return json(data);
};

```

Copy code to clipboard

See also:

- [Returning Responses from Loaders](https://reactrouter.com/6.29.0/route/loader#returning-responses)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/community/contributing) [dev](https://reactrouter.com/dev/community/contributing)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Contributing

On this page

- [Setup](https://reactrouter.com/community/contributing#setup)
- [Think You Found a Bug?](https://reactrouter.com/community/contributing#think-you-found-a-bug)
- [Adding an Example?](https://reactrouter.com/community/contributing#adding-an-example)
- [Proposing New or Changed API?](https://reactrouter.com/community/contributing#proposing-new-or-changed-api)
- [Issue Not Getting Attention?](https://reactrouter.com/community/contributing#issue-not-getting-attention)
- [Making a Pull Request?](https://reactrouter.com/community/contributing#making-a-pull-request)
- [Tests](https://reactrouter.com/community/contributing#tests)
- [Docs + Examples](https://reactrouter.com/community/contributing#docs--examples)
- [Development](https://reactrouter.com/community/contributing#development)
- [Packages](https://reactrouter.com/community/contributing#packages)
- [Building](https://reactrouter.com/community/contributing#building)
- [Testing](https://reactrouter.com/community/contributing#testing)
- [Repository Branching](https://reactrouter.com/community/contributing#repository-branching)
- [New Releases](https://reactrouter.com/community/contributing#new-releases)
- [`react-router@next` Releases](https://reactrouter.com/community/contributing#react-routernext-releases)
- [Latest Major Releases](https://reactrouter.com/community/contributing#latest-major-releases)
- [Hot-fix Releases](https://reactrouter.com/community/contributing#hot-fix-releases)

- [Setup](https://reactrouter.com/community/contributing#setup)
- [Think You Found a Bug?](https://reactrouter.com/community/contributing#think-you-found-a-bug)
- [Adding an Example?](https://reactrouter.com/community/contributing#adding-an-example)
- [Proposing New or Changed API?](https://reactrouter.com/community/contributing#proposing-new-or-changed-api)
- [Issue Not Getting Attention?](https://reactrouter.com/community/contributing#issue-not-getting-attention)
- [Making a Pull Request?](https://reactrouter.com/community/contributing#making-a-pull-request)
- [Tests](https://reactrouter.com/community/contributing#tests)
- [Docs + Examples](https://reactrouter.com/community/contributing#docs--examples)
- [Development](https://reactrouter.com/community/contributing#development)
- [Packages](https://reactrouter.com/community/contributing#packages)
- [Building](https://reactrouter.com/community/contributing#building)
- [Testing](https://reactrouter.com/community/contributing#testing)
- [Repository Branching](https://reactrouter.com/community/contributing#repository-branching)
- [New Releases](https://reactrouter.com/community/contributing#new-releases)
- [`react-router@next` Releases](https://reactrouter.com/community/contributing#react-routernext-releases)
- [Latest Major Releases](https://reactrouter.com/community/contributing#latest-major-releases)
- [Hot-fix Releases](https://reactrouter.com/community/contributing#hot-fix-releases)

# Contributing to React Router

Thanks for contributing, you rock!

When it comes to open source, there are many different kinds of contributions that can be made, all of which are valuable. Here are a few guidelines that should help you as you prepare your contribution.

## Setup

Before you can contribute to the codebase, you will need to fork the repo. This will look a bit different depending on what type of contribution you are making:

- All new features, bug-fixes, or **anything that touches `react-router` code** should be branched off of and merged into the `dev` branch
- Changes that only touch documentation can be branched off of and merged into the `main` branch

The following steps will get you set up to contribute changes to this repo:

1. Fork the repo (click the `Fork` button at the top right of [this page](https://github.com/remix-run/react-router))

2. Clone your fork locally


```bash
# in a terminal, cd to parent directory where you want your clone to be, then
git clone https://github.com/<your_github_username>/react-router.git
cd react-router

# if you are making *any* code changes, make sure to checkout the dev branch
git checkout dev

```

3. Install dependencies and build. React Router uses [pnpm](https://pnpm.io/), so you should too. If you install using `npm`, unnecessary `package-lock.json` files will be generated.


## Think You Found a Bug?

Please conform to the issue template and provide a clear path to reproduction with a code example. Best is a pull request with a [failing test](https://github.com/remix-run/react-router/blob/dev/integration/bug-report-test.ts). Next best is a link to [StackBlitz](https://reactrouter.com/new) or repository that illustrates the bug.

## Adding an Example?

Examples can be added directly to the main branch. Create a branch off of your local clone of main. Once you've finished, create a pull request and outline your example.

## Proposing New or Changed API?

Please provide thoughtful comments and some sample code that show what you'd like to do with React Router in your app. It helps the conversation if you can show us how you're limited by the current API first before jumping to a conclusion about what needs to be changed and/or added.

We have learned by experience that small APIs are usually better, so we may be a little reluctant to add something new unless there's an obvious limitation with the current API. That being said, we are always anxious to hear about cases that we just haven't considered before, so please don't be shy! :)

## Issue Not Getting Attention?

If you need a bug fixed and nobody is fixing it, your best bet is to provide a fix for it and make a [pull request](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request). Open source code belongs to all of us, and it's all of our responsibility to push it forward.

## Making a Pull Request?

Pull requests need only the approval of two or more collaborators to be merged; when the PR author is a collaborator, that counts as one.

When creating the PR in GitHub, make sure that you set the base to the correct branch. If you are submitting a PR that touches any code, this should be the `dev` branch. You set the base in GitHub when authoring the PR with the dropdown below the "Compare changes" heading: ![](https://raw.githubusercontent.com/remix-run/react-router/main/static/base-branch.png)

### Tests

All commits that fix bugs or add features need a test.

Do not merge code without tests!

### Docs + Examples

All commits that change or add to the API must be done in a pull request that also updates all relevant examples and docs.

Documentation is located in the `docs` directory. Once changes make their way into the `main` branch, they will automatically be published to the docs site.

If you want to preview how the changes will look on the docs site, clone the [`react-router-website` repository](https://github.com/remix-run/react-router-website) and follow the instructions in `README.md` to view your changes locally.

## Development

### Packages

React Router uses a monorepo to host code for multiple packages. These packages live in the `packages` directory.

We use [pnpm workspaces](https://pnpm.io/workspaces/) to manage installation of dependencies and running various scripts. To get everything installed, make sure you have [pnpm installed](https://pnpm.io/installation), and then run `pnpm install` from the repo root.

### Building

Calling `pnpm build` from the root directory will run the build, which should take only a few seconds. It's important to build all the packages together because the individual packages have dependencies on one another.

### Testing

Before running the tests, you need to run a build. After you build, running `pnpm test` from the root directory will run **every** package's tests. If you want to run tests for a specific package, use `pnpm test --projects packages/<package-name>`:

```bash
# Test all packages
pnpm test

# Test only react-router-dom
pnpm test --projects packages/react-router-dom

```

## Repository Branching

This repo maintains separate branches for different purposes. They will look something like this:

```
- main   > the most recent release and current docs
- dev    > code under active development between stable releases
- v5     > the most recent code for a specific major release

```

There may be other branches for various features and experimentation, but all of the magic happens from these branches.

## New Releases

When it's time to cut a new release, we follow a process based on our branching strategy depending on the type of release.

### `react-router@next` Releases

We create experimental releases from the current state of the `dev` branch. They can be installed by using the `@next` tag:

```bash
pnpm add react-router-dom@next
# or
npm install react-router-dom@next

```

These releases will be automated as PRs are merged into the `dev` branch.

### Latest Major Releases

```bash
# Start from the dev branch.
git checkout dev

# Merge the main branch into dev to ensure that any hotfixes and
# docs updates are available in the release.
git merge main

# Create a new release branch from dev.
git checkout -b release/v6.1.0

# Create a new tag and update version references throughout the
# codebase.
pnpm run version [nextVersion]

# Push the release branch along with the new release tag.
git push origin release/v6.1.0 --follow-tags

# Wait for GitHub actions to run all tests. If the tests pass, the
# release is ready to go! Merge the release branch into main and dev.
git checkout main
git merge release/v6.1.0
git checkout dev
git merge release/v6.1.0

# The release branch can now be deleted.
git branch -D release/v6.1.0
git push origin --delete release/v6.1.0

# Now go to GitHub and create the release from the new tag. Let
# GitHub Actions take care of the rest!

```

### Hot-fix Releases

Sometimes we have a crucial bug that needs to be patched right away. If the bug affects the latest release, we can create a new version directly from `main` (or the relevant major release branch where the bug exists):

```bash
# From the main branch, make sure to run the build and all tests
# before creating a new release.
pnpm install && pnpm build && pnpm test

# Assuming the tests pass, create the release tag and update
# version references throughout the codebase.
pnpm run version [nextVersion]

# Push changes along with the new release tag.
git push origin main --follow-tags

# In GitHub, create the release from the new tag and it will be
# published via GitHub actions

# When the hot-fix is done, merge the changes into dev and clean
# up conflicts as needed.
git checkout dev
git merge main
git push origin dev

```

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/community/contributing.md)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

6.29.0

Branches

[latest (7.2.0)](https://reactrouter.com/home) [dev](https://reactrouter.com/dev/)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Main Concepts

On this page

- [Definitions](https://reactrouter.com/6.29.0/start/concepts#definitions)
- [History and Locations](https://reactrouter.com/6.29.0/start/concepts#history-and-locations)
- [History Object](https://reactrouter.com/6.29.0/start/concepts#history-object)
- [Locations](https://reactrouter.com/6.29.0/start/concepts#locations)
- [Matching](https://reactrouter.com/6.29.0/start/concepts#matching)
- [Defining Routes](https://reactrouter.com/6.29.0/start/concepts#defining-routes)
- [Match Params](https://reactrouter.com/6.29.0/start/concepts#match-params)
- [Ranking Routes](https://reactrouter.com/6.29.0/start/concepts#ranking-routes)
- [Pathless Routes](https://reactrouter.com/6.29.0/start/concepts#pathless-routes)
- [Route Matches](https://reactrouter.com/6.29.0/start/concepts#route-matches)
- [Rendering](https://reactrouter.com/6.29.0/start/concepts#rendering)
- [Outlets](https://reactrouter.com/6.29.0/start/concepts#outlets)
- [Index Routes](https://reactrouter.com/6.29.0/start/concepts#index-routes)
- [Layout Routes](https://reactrouter.com/6.29.0/start/concepts#layout-routes)
- [Navigating](https://reactrouter.com/6.29.0/start/concepts#navigating)
- [Link](https://reactrouter.com/6.29.0/start/concepts#link)
- [Navigate Function](https://reactrouter.com/6.29.0/start/concepts#navigate-function)
- [Data Access](https://reactrouter.com/6.29.0/start/concepts#data-access)
- [Review](https://reactrouter.com/6.29.0/start/concepts#review)

- [Definitions](https://reactrouter.com/6.29.0/start/concepts#definitions)
- [History and Locations](https://reactrouter.com/6.29.0/start/concepts#history-and-locations)
- [History Object](https://reactrouter.com/6.29.0/start/concepts#history-object)
- [Locations](https://reactrouter.com/6.29.0/start/concepts#locations)
- [Matching](https://reactrouter.com/6.29.0/start/concepts#matching)
- [Defining Routes](https://reactrouter.com/6.29.0/start/concepts#defining-routes)
- [Match Params](https://reactrouter.com/6.29.0/start/concepts#match-params)
- [Ranking Routes](https://reactrouter.com/6.29.0/start/concepts#ranking-routes)
- [Pathless Routes](https://reactrouter.com/6.29.0/start/concepts#pathless-routes)
- [Route Matches](https://reactrouter.com/6.29.0/start/concepts#route-matches)
- [Rendering](https://reactrouter.com/6.29.0/start/concepts#rendering)
- [Outlets](https://reactrouter.com/6.29.0/start/concepts#outlets)
- [Index Routes](https://reactrouter.com/6.29.0/start/concepts#index-routes)
- [Layout Routes](https://reactrouter.com/6.29.0/start/concepts#layout-routes)
- [Navigating](https://reactrouter.com/6.29.0/start/concepts#navigating)
- [Link](https://reactrouter.com/6.29.0/start/concepts#link)
- [Navigate Function](https://reactrouter.com/6.29.0/start/concepts#navigate-function)
- [Data Access](https://reactrouter.com/6.29.0/start/concepts#data-access)
- [Review](https://reactrouter.com/6.29.0/start/concepts#review)

# Main Concepts

This document needs to be updated for 6.4 data APIs

This document is a deep dive into the core concepts behind routing as implemented in React Router. It's pretty long, so if you're looking for a more practical guide check out our [quick start tutorial](https://reactrouter.com/6.29.0/start/tutorial).

You might be wondering what exactly React Router does. How can it help you build your app? What exactly is a **router**, anyway?

If you've ever had any of these questions, or you'd just like to dig into the fundamental pieces of routing, you're in the right place. This document contains detailed explanations of all the core concepts behind routing as implemented in React Router.

Please don't let this document overwhelm you! For everyday use, React Router is pretty simple. You don't need to go this deep to use it.

React Router isn't just about matching a url to a function or component: it's about building a full user interface that maps to the URL, so it might have more concepts in it than you're used to. We'll go into detail on the three main jobs of React Router:

1. Subscribing and manipulating the [history stack](https://reactrouter.com/6.29.0/start/concepts#history-stack)
2. Matching the [URL](https://reactrouter.com/6.29.0/start/concepts#url) to your [routes](https://reactrouter.com/6.29.0/start/concepts#route-config)
3. Rendering a nested UI from the [route matches](https://reactrouter.com/6.29.0/start/concepts#matches)

## Definitions

But first, some definitions! There are a lot of different ideas around routing from back and front end frameworks. Sometimes a word in one context might have different meaning than another.

Here are some words we use a lot when we talk about React Router. The rest of this guide will go into more detail on each one.

- **URL** \- The URL in the address bar. A lot of people use the term "URL" and "route" interchangeably, but this is not a route in React Router, it's just a URL.

- **Location** \- This is a React Router specific object that is based on the built-in browser's `window.location` object. It represents "where the user is at". It's mostly an object representation of the URL but has a bit more to it than that.

- **Location State** \- A value that persists with a [location](https://reactrouter.com/6.29.0/start/concepts#location) that isn't encoded in the [URL](https://reactrouter.com/6.29.0/start/concepts#url). Much like hash or search params (data encoded in the URL), but stored invisibly in the browser's memory.

- **History Stack** \- As the user navigates, the browser keeps track of each [location](https://reactrouter.com/6.29.0/start/concepts#location) in a stack. If you click and hold the back button in a browser you can see the browser's history stack right there.

- **Client Side Routing (CSR)** \- A plain HTML document can link to other documents and the browser handles the [history stack](https://reactrouter.com/6.29.0/start/concepts#history-stack) itself. Client Side Routing enables developers to manipulate the browser history stack without making a document request to the server.

- **History** \- An object that allows React Router to subscribe to changes in the [URL](https://reactrouter.com/6.29.0/start/concepts#url) as well as providing APIs to manipulate the browser [history stack](https://reactrouter.com/6.29.0/start/concepts#history-stack) programmatically.

- **History Action** \- One of `POP`, `PUSH`, or `REPLACE`. Users can arrive at a [URL](https://reactrouter.com/6.29.0/start/concepts#url) for one of these three reasons. A push when a new entry is added to the history stack (typically a link click or the programmer forced a navigation). A replace is similar except it replaces the current entry on the stack instead of pushing a new one. Finally, a pop happens when the user clicks the back or forward buttons in the browser chrome.

- **Segment** \- The parts of a [URL](https://reactrouter.com/6.29.0/start/concepts#url) or [path pattern](https://reactrouter.com/6.29.0/start/concepts#path-pattern) between the `/` characters. For example, "/users/123" has two segments.

- **Path Pattern** \- These look like URLs but can have special characters for matching URLs to routes, like **dynamic segments** ( `"/users/:userId"`) or **star segments** ( `"/docs/*"`). They aren't URLs, they're patterns that React Router will match.

- **Dynamic Segment** \- A segment of a path pattern that is dynamic, meaning it can match any values in the segment. For example the pattern `/users/:userId` will match URLs like `/users/123`

- **URL Params** \- The parsed values from the URL that matched a [dynamic segment](https://reactrouter.com/6.29.0/start/concepts#dynamic-segment).

- **Router** \- Stateful, top-level component that makes all the other components and hooks work.

- **Route Config** \- A tree of **routes objects** that will be ranked and matched (with nesting) against the current location to create a branch of **route matches**.

- **Route** \- An object or Route Element typically with a shape of `{ path, element }` or `<Route path element>`. The `path` is a path pattern. When the path pattern matches the current URL, the element will be rendered.

- **Route Element** \- Or `<Route>`. This element's props are read to create a [route](https://reactrouter.com/6.29.0/start/concepts#route) by `<Routes>`, but otherwise does nothing.

- **Nested Routes** \- Because routes can have children and each route defines a portion of the [URL](https://reactrouter.com/6.29.0/start/concepts#url) through [segments](https://reactrouter.com/6.29.0/start/concepts#segment), a single URL can match multiple routes in a nested "branch" of the tree. This enables automatic layout nesting through [outlet](https://reactrouter.com/6.29.0/start/concepts#outlet), [relative links](https://reactrouter.com/6.29.0/start/concepts#relative-links), and more.

- **Relative links** \- Links that don't start with `/` will inherit the closest route in which they are rendered. This makes it easy to link to deeper URLs without having to know and build up the entire path.

- **Match** \- An object that holds information when a route matches the URL, like the [url params](https://reactrouter.com/6.29.0/start/concepts#url-params) and pathname that matched.

- **Matches** \- An array of routes (or branch of the [route config](https://reactrouter.com/6.29.0/start/concepts#route-config)) that matches the current [location](https://reactrouter.com/6.29.0/start/concepts#location). This structure enables [nested routes](https://reactrouter.com/6.29.0/start/concepts#nested-routes).

- **Parent Route** \- A route with child routes.

- **Outlet** \- A component that renders the next match in a set of [matches](https://reactrouter.com/6.29.0/start/concepts#match).

- **Index Route** \- A child route with no path that renders in the parent's [outlet](https://reactrouter.com/6.29.0/start/concepts#outlet) at the parent's [URL](https://reactrouter.com/6.29.0/start/concepts#url).

- **Layout Route** \- A **parent route** without a path, used exclusively for grouping child routes inside a specific layout.


## History and Locations

Before React Router can do anything, it has to be able to subscribe to changes in the browser [history stack](https://reactrouter.com/6.29.0/start/concepts#history-stack).

Browsers maintain their own history stack as the user navigates around. That's how the back and forward buttons can work. In a traditional website (HTML documents without JavaScript) the browser will make requests to the server every time the user clicks a link, submits a form, or clicks the back and forward buttons.

For example, consider the user:

1. clicks a link to `/dashboard`
2. clicks a link to `/accounts`
3. clicks a link to `/customers/123`
4. clicks the back button
5. clicks a link to `/dashboard`

The history stack will change as follows where **bold** entries denote the current [URL](https://reactrouter.com/6.29.0/start/concepts#url):

1. **`/dashboard`**
2. `/dashboard`, **`/accounts`**
3. `/dashboard`, `/accounts`, **`/customers/123`**
4. `/dashboard`, **`/accounts`**, `/customers/123`
5. `/dashboard`, `/accounts`, **`/dashboard`**

### History Object

With **client side routing**, developers are able to manipulate the browser [history stack](https://reactrouter.com/6.29.0/start/concepts#history-stack) programmatically. For example, we can write some code like this to change the [URL](https://reactrouter.com/6.29.0/start/concepts#url) without the browsers default behavior of making a request to the server:

```
<a
  href="/contact"
  onClick={(event) => {
    // stop the browser from changing the URL and requesting the new document
    event.preventDefault();
    // push an entry into the browser history stack and change the URL
    window.history.pushState({}, undefined, "/contact");
  }}
/>

```

Copy code to clipboard

For illustration only, don't use `window.history.pushState` directly in React Router

This code changes the [URL](https://reactrouter.com/6.29.0/start/concepts#url) but doesn't do anything for the UI. We would need to write some more code that changed some state somewhere to get the UI to change to the contact page. The trouble is, the browser doesn't give us a way to "listen to the URL" and subscribe to changes like this.

Well, that's not totally true. We can listen for changes to the URL via [pop](https://reactrouter.com/6.29.0/start/concepts#history-actions) events:

```
window.addEventListener("popstate", () => {
  // URL changed!
});

```

Copy code to clipboard

But that only fires when the user clicks the back or forward buttons. There is no event for when the programmer called `window.history.pushState` or `window.history.replaceState`.

That's where a React Router specific `history` object comes into play. It provides a way to "listen for [URL](https://reactrouter.com/6.29.0/start/concepts#url)" changes whether the [history action](https://reactrouter.com/6.29.0/start/concepts#history-actions) is **push**, **pop**, or **replace**.

```
let history = createBrowserHistory();
history.listen(({ location, action }) => {
  // this is called whenever new locations come in
  // the action is POP, PUSH, or REPLACE
});

```

Copy code to clipboard

Apps don't need to set up their own history objects--that's the job of `<Router>`. It sets up one of these objects, subscribe to changes in the [history stack](https://reactrouter.com/6.29.0/start/concepts#history-stack), and finally updates its state when the [URL](https://reactrouter.com/6.29.0/start/concepts#url) changes. This causes the app to re-render and the correct UI to display. The only thing it needs to put on state is a `location`, everything else works from that single object.

### Locations

The browser has a location object on `window.location`. It tells you information about the [URL](https://reactrouter.com/6.29.0/start/concepts#url) but also has some methods to change it:

```
window.location.pathname; // /getting-started/concepts/
window.location.hash; // #location
window.location.reload(); // force a refresh w/ the server
// and a lot more

```

Copy code to clipboard

For illustration. You don't typically work with `window.location` in a React Router app

Instead of using `window.location`, React Router has the concept of a [location](https://reactrouter.com/6.29.0/start/concepts#location) that's patterned after `window.location` but is much simpler. It looks like this:

```
{
  pathname: "/bbq/pig-pickins",
  search: "?campaign=instagram",
  hash: "#menu",
  state: null,
  key: "aefz24ie"
}

```

Copy code to clipboard

The first three: `{ pathname, search, hash }` are exactly like `window.location`. If you just add up the three you'll get the [URL](https://reactrouter.com/6.29.0/start/concepts#url) the user sees in the browser:

```
location.pathname + location.search + location.hash;
// /bbq/pig-pickins?campaign=instagram#menu

```

Copy code to clipboard

The last two, `{ state, key }`, are React Router specific.

**Location Pathname**

This is the part of [URL](https://reactrouter.com/6.29.0/start/concepts#url) after the origin, so for `https://example.com/teams/hotspurs` the pathname is `/teams/hotspurs`. This is the only part of the location that routes match against.

**Location Search**

People use a lot of different terms for this part of the [URL](https://reactrouter.com/6.29.0/start/concepts#url):

- location search
- search params
- URL search params
- query string

In React Router we call it the "location search". However, location search is a serialized version of [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams). So sometimes we might call it "URL search params" as well.

```
// given a location like this:
let location = {
  pathname: "/bbq/pig-pickins",
  search: "?campaign=instagram&popular=true",
  hash: "",
  state: null,
  key: "aefz24ie",
};

// we can turn the location.search into URLSearchParams
let params = new URLSearchParams(location.search);
params.get("campaign"); // "instagram"
params.get("popular"); // "true"
params.toString(); // "campaign=instagram&popular=true",

```

Copy code to clipboard

When being precise, refer to the serialized string version as "search" and the parsed version as "search params", but it's common to use the terms interchangeably when precision isn't important.

**Location Hash**

Hashes in URLs indicate a scroll position _on the current page_. Before the `window.history.pushState` API was introduced, web developers did client side routing exclusively with the hash portion of the [URL](https://reactrouter.com/6.29.0/start/concepts#url), it was the only part we could manipulate without making a new request to the server. However, today we can use it for its designed purpose.

**Location State**

You may have wondered why the `window.history.pushState()` API is called "push state". State? Aren't we just changing the [URL](https://reactrouter.com/6.29.0/start/concepts#url)? Shouldn't it be `history.push`? Well, we weren't in the room when the API was designed, so we're not sure why "state" was the focus, but it is a cool feature of browsers nonetheless.

Browsers let us persist information about a navigation by passing a value to `pushState`. When the user clicks back, the value on `history.state` changes to whatever was "pushed" before.

```
window.history.pushState("look ma!", undefined, "/contact");
window.history.state; // "look ma!"
// user clicks back
window.history.state; // undefined
// user clicks forward
window.history.state; // "look ma!"

```

Copy code to clipboard

For illustration. You don't read `history.state` directly in React Router apps

React Router takes advantage of this browser feature, abstracts it a bit, and surfaces the values on the `location` instead of `history`.

You can think about `location.state` just like `location.hash` or `location.search` except instead of putting the values in the [URL](https://reactrouter.com/6.29.0/start/concepts#url) it's hidden--like a super secret piece of the URL only the programmer knows about.

A couple of great use-cases for location state are:

- Telling the next page where the user came from and branching the UI. The most popular implementation here is showing a record in a modal if the user clicked on an item in a grid view, but if they show up to the URL directly, show the record in its own layout (pinterest, old instagram).
- Sending a partial record from a list to the next screen so it can render the partial data immediately and then fetching the rest of the data afterward.

You set location state in two ways: on `<Link>` or `navigate`:

```
<Link to="/pins/123" state={{ fromDashboard: true }} />;

let navigate = useNavigate();
navigate("/users/123", { state: partialUser });

```

Copy code to clipboard

And on the next page you can access it with `useLocation`:

```
let location = useLocation();
location.state;

```

Copy code to clipboard

Location state values will get serialized, so something like `new Date()` will be turned into a string.

**Location Key**

Each location gets a unique key. This is useful for advanced cases like location-based scroll management, client side data caching, and more. Because each new location gets a unique key, you can build abstractions that store information in a plain object, `new Map()`, or even `locationStorage`.

For example, a very basic client side data cache could store values by location key (and the fetch [URL](https://reactrouter.com/6.29.0/start/concepts#url)) and skip fetching the data when the user clicks back into it:

```
let cache = new Map();

function useFakeFetch(URL) {
  let location = useLocation();
  let cacheKey = location.key + URL;
  let cached = cache.get(cacheKey);

  let [data, setData] = useState(() => {
    // initialize from the cache
    return cached || null;
  });

  let [state, setState] = useState(() => {
    // avoid the fetch if cached
    return cached ? "done" : "loading";
  });

  useEffect(() => {
    if (state === "loading") {
      let controller = new AbortController();
      fetch(URL, { signal: controller.signal })
        .then((res) => res.json())
        .then((data) => {
          if (controller.signal.aborted) return;
          // set the cache
          cache.set(cacheKey, data);
          setData(data);
        });
      return () => controller.abort();
    }
  }, [state, cacheKey]);

  useEffect(() => {
    setState("loading");
  }, [URL]);

  return data;
}

```

Copy code to clipboard

## Matching

On the initial render, and when the [history stack](https://reactrouter.com/6.29.0/start/concepts#history-stack) changes, React Router will match the [location](https://reactrouter.com/6.29.0/start/concepts#location) against your [route config](https://reactrouter.com/6.29.0/start/concepts#route-config) to come up with a set of [matches](https://reactrouter.com/6.29.0/start/concepts#match) to render.

### Defining Routes

A route config is a tree of [routes](https://reactrouter.com/6.29.0/start/concepts#route) that looks something like this:

```
<Routes>
  <Route path="/" element={<App />}>
    <Route index element={<Home />} />
    <Route path="teams" element={<Teams />}>
      <Route path=":teamId" element={<Team />} />
      <Route path=":teamId/edit" element={<EditTeam />} />
      <Route path="new" element={<NewTeamForm />} />
      <Route index element={<LeagueStandings />} />
    </Route>
  </Route>
  <Route element={<PageLayout />}>
    <Route path="/privacy" element={<Privacy />} />
    <Route path="/tos" element={<Tos />} />
  </Route>
  <Route path="contact-us" element={<Contact />} />
</Routes>

```

Copy code to clipboard

The `<Routes>` component recurses through its `props.children`, strips their props, and generates an object like this:

```
let routes = [\
  {\
    element: <App />,\
    path: "/",\
    children: [\
      {\
        index: true,\
        element: <Home />,\
      },\
      {\
        path: "teams",\
        element: <Teams />,\
        children: [\
          {\
            index: true,\
            element: <LeagueStandings />,\
          },\
          {\
            path: ":teamId",\
            element: <Team />,\
          },\
          {\
            path: ":teamId/edit",\
            element: <EditTeam />,\
          },\
          {\
            path: "new",\
            element: <NewTeamForm />,\
          },\
        ],\
      },\
    ],\
  },\
  {\
    element: <PageLayout />,\
    children: [\
      {\
        element: <Privacy />,\
        path: "/privacy",\
      },\
      {\
        element: <Tos />,\
        path: "/tos",\
      },\
    ],\
  },\
  {\
    element: <Contact />,\
    path: "/contact-us",\
  },\
];

```

Copy code to clipboard

In fact, instead of `<Routes>` you can use the hook `useRoutes(routesGoHere)` instead. That's all `<Routes>` is doing.

As you can see, routes can define multiple [segments](https://reactrouter.com/6.29.0/start/concepts#segment) like `:teamId/edit`, or just one like `:teamId`. All of the segments down a branch of the [route config](https://reactrouter.com/6.29.0/start/concepts#route-config) are added together to create a final [path pattern](https://reactrouter.com/6.29.0/start/concepts#path-pattern) for a route.

### Match Params

Note the `:teamId` segments. This is what we call a [dynamic segment](https://reactrouter.com/6.29.0/start/concepts#dynamic-segment) of the [path pattern](https://reactrouter.com/6.29.0/start/concepts#path-pattern), meaning it doesn't match the URL statically (the actual characters) but it matches it dynamically. Any value can fill in for `:teamId`. Both `/teams/123` or `/teams/cupcakes` will match. We call the parsed values [URL params](https://reactrouter.com/6.29.0/start/concepts#url-params). So in this case our `teamId` param would be `"123"` or `"cupcakes"`. We'll see how to use them in your app in the [Rendering](https://reactrouter.com/6.29.0/start/concepts#rendering) section.

### Ranking Routes

If we add up all the segments of all the branches of our [route config](https://reactrouter.com/6.29.0/start/concepts#route-config), we end up with the following path patterns that our app responds to:

```
[\
  "/",\
  "/teams",\
  "/teams/:teamId",\
  "/teams/:teamId/edit",\
  "/teams/new",\
  "/privacy",\
  "/tos",\
  "/contact-us",\
];

```

Copy code to clipboard

Now this is where things get really interesting. Consider the [URL](https://reactrouter.com/6.29.0/start/concepts#url) `/teams/new`. Which pattern in that list matches the URL?

That's right, two of them!

```
/teams/new
/teams/:teamId

```

React Router has to make a decision here, there can be only one. Many routers, both client side and server side, will simply process the patterns in the order in which they were defined. First to match wins. In this case we would match `/` and render the `<Home/>` component. Definitely not what we wanted. These kinds of routers require us to order our routes perfectly to get the expected result. This is how React Router has worked up until v6, but now it's much smarter.

Looking at those patterns, you intuitively know that we want `/teams/new` to match the URL `/teams/new`. It's a perfect match! React Router also knows that. When matching, it will rank your routes according the number of segments, static segments, dynamic segments, star patterns, etc. and pick the most specific match. You'll never have to think about ordering your routes.

### Pathless Routes

You may have noticed the weird routes from earlier:

```
<Route index element={<Home />} />
<Route index element={<LeagueStandings />} />
<Route element={<PageLayout />} />

```

Copy code to clipboard

They don't even have a path, how can they be a route? This is where the word "route" in React Router is used pretty loosely. `<Home/>` and `<LeagueStandings/>` are [index routes](https://reactrouter.com/6.29.0/start/concepts#index-route) and `<PageLayout/>` is a [layout route](https://reactrouter.com/6.29.0/start/concepts#layout-route). We'll discuss how they work in the [Rendering](https://reactrouter.com/6.29.0/start/concepts#rendering) section. Neither really has much to do with matching.

### Route Matches

When a route matches the URL, it's represented by a [match](https://reactrouter.com/6.29.0/start/concepts#match) object. A match for `<Route path=":teamId" element={<Team/>}/>` would look something like this:

```
{
  pathname: "/teams/firebirds",
  params: {
    teamId: "firebirds"
  },
  route: {
    element: <Team />,
    path: ":teamId"
  }
}

```

Copy code to clipboard

`pathname` holds the portion of the URL that matched this route (in our case it's all of it). `params` holds the parsed values from any [dynamic segments](https://reactrouter.com/6.29.0/start/concepts#dynamic-segment) that matched. Note that the param's object keys map directly to the name of the segment: `:teamId` becomes `params.teamId`.

Because our routes are a tree, a single URL can match an entire branch of the tree. Consider the URL `/teams/firebirds`, it would be the following route branch:

```
<Routes>
  <Route path="/" element={<App />}>
    <Route index element={<Home />} />
    <Route path="teams" element={<Teams />}>
      <Route path=":teamId" element={<Team />} />
      <Route path=":teamId/edit" element={<EditTeam />} />
      <Route path="new" element={<NewTeamForm />} />
      <Route index element={<LeagueStandings />} />
    </Route>
  </Route>
  <Route element={<PageLayout />}>
    <Route path="/privacy" element={<Privacy />} />
    <Route path="/tos" element={<Tos />} />
  </Route>
  <Route path="contact-us" element={<Contact />} />
</Routes>

```

Copy code to clipboard

React Router will create an array of [matches](https://reactrouter.com/6.29.0/start/concepts#match) from these routes and the url so it can render a nested UI that matches the route nesting.

```
[\
  {\
    pathname: "/",\
    params: null,\
    route: {\
      element: <App />,\
      path: "/",\
    },\
  },\
  {\
    pathname: "/teams",\
    params: null,\
    route: {\
      element: <Teams />,\
      path: "teams",\
    },\
  },\
  {\
    pathname: "/teams/firebirds",\
    params: {\
      teamId: "firebirds",\
    },\
    route: {\
      element: <Team />,\
      path: ":teamId",\
    },\
  },\
];

```

Copy code to clipboard

## Rendering

The final concept is rendering. Consider that the entry to your app looks like this:

```
const root = ReactDOM.createRoot(
  document.getElementById("root")
);
root.render(
  <BrowserRouter>
    <Routes>
      <Route path="/" element={<App />}>
        <Route index element={<Home />} />
        <Route path="teams" element={<Teams />}>
          <Route path=":teamId" element={<Team />} />
          <Route path="new" element={<NewTeamForm />} />
          <Route index element={<LeagueStandings />} />
        </Route>
      </Route>
      <Route element={<PageLayout />}>
        <Route path="/privacy" element={<Privacy />} />
        <Route path="/tos" element={<Tos />} />
      </Route>
      <Route path="contact-us" element={<Contact />} />
    </Routes>
  </BrowserRouter>
);

```

Copy code to clipboard

Let's use the `/teams/firebirds` URL as an example again. `<Routes>` will match the [location](https://reactrouter.com/6.29.0/start/concepts#location) to your [route config](https://reactrouter.com/6.29.0/start/concepts#route-config), get a set of [matches](https://reactrouter.com/6.29.0/start/concepts#match), and then render a React element tree like this:

```
<App>
  <Teams>
    <Team />
  </Teams>
</App>

```

Copy code to clipboard

Each match rendered inside the parent route's element is a really powerful abstraction. Most websites and apps share this characteristic: boxes inside of boxes inside of boxes, each with a navigation section that changes a child section of the page.

### Outlets

This nested element tree won't happen automatically. `<Routes>` will render the first match's element for you (In our case that's `<App/>`). The next match's element is `<Teams>`. In order to render that, `App` needs to render an [outlet](https://reactrouter.com/6.29.0/start/concepts#outlet).

```
function App() {
  return (
    <div>
      <GlobalNav />
      <Outlet />
      <GlobalFooter />
    </div>
  );
}

```

Copy code to clipboard

The `Outlet` component will always render the next match. That means `<Teams>` also needs an outlet to render `<Team/>`.

If the URL were `/contact-us`, the element tree would change to:

```
<Contact />

```

Copy code to clipboard

Because the contact form is not under the main `<App>` route.

If the URL were `/teams/firebirds/edit`, the element tree would change to:

```
<App>
  <Teams>
    <EditTeam />
  </Teams>
</App>

```

Copy code to clipboard

The outlet swaps out the child for the new child that matches, but the parent layout persists. It's subtle but very effective at cleaning up your components.

### Index Routes

Remember the [route config](https://reactrouter.com/6.29.0/start/concepts#route-config) for `/teams`:

```
<Route path="teams" element={<Teams />}>
  <Route path=":teamId" element={<Team />} />
  <Route path="new" element={<NewTeamForm />} />
  <Route index element={<LeagueStandings />} />
</Route>

```

Copy code to clipboard

If the URL were `/teams/firebirds`, the element tree would be:

```
<App>
  <Teams>
    <Team />
  </Teams>
</App>

```

Copy code to clipboard

But if the URL were `/teams`, the element tree would be:

```
<App>
  <Teams>
    <LeagueStandings />
  </Teams>
</App>

```

Copy code to clipboard

League standings? How the heck did `<Route index element={<LeagueStandings>}/>` pop in there? It doesn't even have a path! The reason is that it's an [index route](https://reactrouter.com/6.29.0/start/concepts#index-route). Index routes render in their parent route's [outlet](https://reactrouter.com/6.29.0/start/concepts#outlet) at the parent route's path.

Think of it this way, if you're not at one of the child routes' paths, the `<Outlet>` will render nothing in the UI:

```
<App>
  <Teams />
</App>

```

Copy code to clipboard

If all the teams are in a list on the left then an empty outlet means you've got a blank page on the right! Your UI needs something to fill the space: index routes to the rescue.

Another way to think of an index route is that it's the default child route when the parent matches but none of its children do.

Depending on the user interface, you might not need an index route, but if there is any sort of persistent navigation in the parent route you'll most likely want an index route to fill the space when the user hasn't clicked one of the items yet.

### Layout Routes

Here's a part of our route config we haven't matched yet: `/privacy`. Let's look at the route config again, highlighting the matched routes:

```
<Routes>
  <Route path="/" element={<App />}>
    <Route index element={<Home />} />
    <Route path="teams" element={<Teams />}>
      <Route path=":teamId" element={<Team />} />
      <Route path=":teamId/edit" element={<EditTeam />} />
      <Route path="new" element={<NewTeamForm />} />
      <Route index element={<LeagueStandings />} />
    </Route>
  </Route>
  <Route element={<PageLayout />}>
    <Route path="/privacy" element={<Privacy />} />
    <Route path="/tos" element={<Tos />} />
  </Route>
  <Route path="contact-us" element={<Contact />} />
</Routes>

```

Copy code to clipboard

And the resulting element tree rendered will be:

```
<PageLayout>
  <Privacy />
</PageLayout>

```

Copy code to clipboard

Don't forget to add an `<Outlet>` to your layout where you would like child route elements to be rendered. Using `{children}` will not work as expected.

The `PageLayout` route is admittedly weird. We call it a [layout route](https://reactrouter.com/6.29.0/start/concepts#layout-route) because it doesn't participate in the matching at all (though its children do). It only exists to make wrapping multiple child routes in the same layout simpler. If we didn't allow this then you'd have to handle layouts in two different ways: sometimes your routes do it for you, sometimes you do it manually with lots of layout component repetition throughout your app:

You can do it like this, but we recommend using a layout route

```
<Routes>
  <Route path="/" element={<App />}>
    <Route index element={<Home />} />
    <Route path="teams" element={<Teams />}>
      <Route path=":teamId" element={<Team />} />
      <Route path=":teamId/edit" element={<EditTeam />} />
      <Route path="new" element={<NewTeamForm />} />
      <Route index element={<LeagueStandings />} />
    </Route>
  </Route>
  <Route
    path="/privacy"
    element={
      <PageLayout>
        <Privacy />
      </PageLayout>
    }
  />
  <Route
    path="/tos"
    element={
      <PageLayout>
        <Tos />
      </PageLayout>
    }
  />
  <Route path="contact-us" element={<Contact />} />
</Routes>

```

Copy code to clipboard

So, yeah, the semantics of a layout "route" is a bit silly since it has nothing to do with the URL matching, but it's just too convenient to disallow.

## Navigating

When the [URL](https://reactrouter.com/6.29.0/start/concepts#url) changes we call that a "navigation". There are two ways to navigate in React Router:

- `<Link>`
- `navigate`

### Link

This is the primary means of navigation. Rendering a `<Link>` allows the user to change the URL when they click it. React Router will prevent the browser's default behavior and tell the [history](https://reactrouter.com/6.29.0/start/concepts#history) to push a new entry into the [history stack](https://reactrouter.com/6.29.0/start/concepts#history-stack). The [location](https://reactrouter.com/6.29.0/start/concepts#location) changes and the new [matches](https://reactrouter.com/6.29.0/start/concepts#match) will render.

However, links are accessible in that they:

- Still render a `<a href>` so all default accessibility concerns are met (like keyboard, focusability, SEO, etc.)
- Don't prevent the browser's default behavior if it's a right click or command/control click to "open in new tab"

[Nested routes](https://reactrouter.com/6.29.0/start/concepts#nested-routes) aren't just about rendering layouts; they also enable "relative links". Consider our `teams` route from before:

```
<Route path="teams" element={<Teams />}>
  <Route path=":teamId" element={<Team />} />
</Route>

```

Copy code to clipboard

The `<Teams>` component can render links like:

```
<Link to="psg" />
<Link to="new" />

```

Copy code to clipboard

The full path it links to will be `/teams/psg` and `/teams/new`. They inherit the route within which they are rendered. This makes it so your route components don't have to really know anything about the rest of the routes in the app. A very large amount of links just go one more [segment](https://reactrouter.com/6.29.0/start/concepts#segment) deeper. You can rearrange your whole [route config](https://reactrouter.com/6.29.0/start/concepts#route-config) and these links will likely still work just fine. This is very valuable when building out a site in the beginning and the designs and layouts are shifting around.

### Navigate Function

This function is returned from the `useNavigate` hook and allows you, the programmer, to change the URL whenever you want. You could do it on a timeout:

```
let navigate = useNavigate();
useEffect(() => {
  setTimeout(() => {
    navigate("/logout");
  }, 30000);
}, []);

```

Copy code to clipboard

Or after a form is submitted:

```
<form onSubmit={event => {
  event.preventDefault();
  let data = new FormData(event.target)
  let urlEncoded = new URLSearchParams(data)
  navigate("/create", { state: urlEncoded })
}}>

```

Copy code to clipboard

Like `Link`, `navigate` works with nested "to" values as well.

```
navigate("psg");

```

Copy code to clipboard

You should have a good reason to use `navigate` instead of `<Link>`. This makes us very sad:

```
<li onClick={() => navigate("/somewhere")} />

```

Copy code to clipboard

Aside from links and forms, very few interactions should change the URL because it introduces complexity around accessibility and user expectations.

## Data Access

Finally, an application is going to want to ask React Router for a few pieces of information in order to build out the full UI. For this, React Router has a pile of hooks

```
let location = useLocation();
let urlParams = useParams();
let [urlSearchParams] = useSearchParams();

```

Copy code to clipboard

## Review

Let's put it all together from the top!

1. You render your app:



```
const root = ReactDOM.createRoot(
     document.getElementById("root")
);
root.render(
     <BrowserRouter>
       <Routes>
         <Route path="/" element={<App />}>
           <Route index element={<Home />} />
           <Route path="teams" element={<Teams />}>
             <Route path=":teamId" element={<Team />} />
             <Route path="new" element={<NewTeamForm />} />
             <Route index element={<LeagueStandings />} />
           </Route>
         </Route>
         <Route element={<PageLayout />}>
           <Route path="/privacy" element={<Privacy />} />
           <Route path="/tos" element={<Tos />} />
         </Route>
         <Route path="contact-us" element={<Contact />} />
       </Routes>
     </BrowserRouter>
);

```

Copy code to clipboard

2. `<BrowserRouter>` creates a [history](https://reactrouter.com/6.29.0/start/concepts#history), puts the initial [location](https://reactrouter.com/6.29.0/start/concepts#location) in to state, and subscribes to the [URL](https://reactrouter.com/6.29.0/start/concepts#url).

3. `<Routes>` recurses its [child routes](https://reactrouter.com/6.29.0/start/concepts#child-route) to build a [route config](https://reactrouter.com/6.29.0/start/concepts#route-config), matches those routes against the [location](https://reactrouter.com/6.29.0/start/concepts#location), creates some route [matches](https://reactrouter.com/6.29.0/start/concepts#match), and renders the first match's route element.

4. You render an [`<Outlet/>`](https://reactrouter.com/6.29.0/start/concepts#outlet) in each [parent route](https://reactrouter.com/6.29.0/start/concepts#parent-route).

5. The outlets render the next match in the route [matches](https://reactrouter.com/6.29.0/start/concepts#match).

6. The user clicks a link

7. The link calls `navigate()`

8. The [history](https://reactrouter.com/6.29.0/start/concepts#history) changes the URL and notifies `<BrowserRouter>`.

9. `<BrowserRouter>` rerenders, start over at (2)!


That's it! We hope this guide has helped you gain a deeper understanding of the main concepts in React Router.

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)![](https://reactrouter.com/assets/icons-DB3ijYGZ.svg)

latest

Branches

[latest (7.2.0)](https://reactrouter.com/start/framework/installation) [dev](https://reactrouter.com/dev/start/framework/installation)

Versions

[7.2.0](https://reactrouter.com/7.2.0/home) [6.30.0](https://reactrouter.com/6.30.0) [v4/5.x](https://v5.reactrouter.com/) [v3.x](https://github.com/remix-run/react-router/tree/v3.2.6/docs)

[API Reference](https://api.reactrouter.com/v7/)

Search`` `K`

LightDarkSystem

[View code on GitHub](https://github.com/remix-run/react-router "View code on GitHub")[Chat on Discord](https://rmx.as/discord "Chat on Discord")

Installation

# Installation

React Router v7 requires the following minimum versions:

- `node@20`
- `react@18`
- `react-dom@18`

Most projects start with a template. Let's use a basic template maintained by React Router:

```
npx create-react-router@latest my-react-router-app

```

Copy code to clipboard

Now change into the new directory and start the app

```
cd my-react-router-app
npm i
npm run dev

```

Copy code to clipboard

You can now open your browser to `http://localhost:5173`

You can [view the template on GitHub](https://github.com/remix-run/react-router-templates/tree/main/default) to see how to manually set up your project.

We also have a number of [ready to deploy templates](https://github.com/remix-run/react-router-templates) available for you to get started with:

```
npx create-react-router@latest --template remix-run/react-router-templates/<template-name>

```

Copy code to clipboard

* * *

Next: [Routing](https://reactrouter.com/start/framework/routing)

[Brand Assets](https://reactrouter.com/brand)

•

Docs and examples [CC 4.0](https://creativecommons.org/licenses/by/4.0/)

[Edit](https://github.com/remix-run/react-router/edit/main/docs/start/framework/installation.md)

